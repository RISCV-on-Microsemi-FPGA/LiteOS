
miv-rv32im-liteos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-liteos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x0000e100 memsz 0x0003e600 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          0000db30  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000010  8000db30  8000db30  0000eb30  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000001c0  8000db40  8000db40  0000eb40  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .vector.bss    00000400  8000dd00  8000dd00  0000ed00  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .sbss          00000040  8000e100  8000e100  0000f100  2**4  ALLOC
  5 .bss           000104c0  8000e140  8000e140  0000f100  2**4  ALLOC
  6 .heap          00010000  8001e600  8001e600  0000f100  2**4  ALLOC
  7 .stack         00010000  8002e600  8002e600  0000f100  2**4  ALLOC
  8 .debug_info    0001fcf8  00000000  00000000  0000f100  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  000059e9  00000000  00000000  0002edf8  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000dd8  00000000  00000000  000347e8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges  00000b00  00000000  00000000  000355c0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro   0000a06f  00000000  00000000  000360c0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_line    0001588c  00000000  00000000  0004012f  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_str     000147a6  00000000  00000000  000559bb  2**0  CONTENTS, READONLY, DEBUGGING
 15 .comment       00000043  00000000  00000000  0006a161  2**0  CONTENTS, READONLY
 16 .debug_frame   00002d0c  00000000  00000000  0006a1a4  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
8000db30 l    d  .sdata	00000000 .sdata
8000db40 l    d  .data	00000000 .data
8000dd00 l    d  .vector.bss	00000000 .vector.bss
8000e100 l    d  .sbss	00000000 .sbss
8000e140 l    d  .bss	00000000 .bss
8001e600 l    d  .heap	00000000 .heap
8002e600 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./platform/M2S150_RV32/riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000034 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 init.c
800001b8 l     F .text	0000005e copy_section
8000021c l     F .text	0000004e zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000328 l     F .text	000000b6 PLIC_DisableIRQ
800003e4 l     F .text	00000042 PLIC_ClaimIRQ
8000042c l     F .text	0000004a PLIC_CompleteIRQ
8000e100 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
8000db30 l     O .sdata	00000004 curbrk.3456
80000d3c l     F .text	0000002a stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 core_gpio.c
00000000 l    df *ABS*	00000000 los_bsp_adapter.c
8000e108 l     O .sbss	00000004 g_ucycle_per_tick
00000000 l    df *ABS*	00000000 los_bsp_key.c
00000000 l    df *ABS*	00000000 los_bsp_led.c
00000000 l    df *ABS*	00000000 los_bsp_uart.c
8000e140 l     O .bss	00000080 _buffer
00000000 l    df *ABS*	00000000 ./kernel/cpu/riscv/los_dispatch_gcc.o
00000010 l       *ABS*	00000000 OS_TASK_STATUS_RUNNING
000000ef l       *ABS*	00000000 OS_TASK_STATUS_NOT_RUNNING
80001c50 l       .text	00000000 TaskSwitch
00000000 l    df *ABS*	00000000 los_hw.c
00000000 l    df *ABS*	00000000 los_hw_tick.c
00000000 l    df *ABS*	00000000 los_hwi.c
00000000 l    df *ABS*	00000000 los_config.c
00000000 l    df *ABS*	00000000 los_misc.c
00000000 l    df *ABS*	00000000 los_membox.c
80002428 l     F .text	000000a6 osCheckBoxMem
00000000 l    df *ABS*	00000000 los_memory.c
800027e8 l     F .text	0000005a LOS_ListAdd
80002848 l     F .text	0000003e LOS_ListTailInsert
8000288c l     F .text	00000056 LOS_ListDelete
800028e8 l     F .text	0000004a LOS_DLnkNextMultiHead
80002984 l     F .text	000000b2 osMemFindSuitableFreeBlock
80002a3c l     F .text	00000036 osMemClearNode
80002a78 l     F .text	0000007a osMemMergeNode
80002af8 l     F .text	00000106 osMemSpitNode
80002c04 l     F .text	000001ae osMemFreeNode
80002db8 l     F .text	000000b2 osMemIsNodeValid
80002e70 l     F .text	0000017e osMemCheckUsedNode
80002ff4 l     F .text	0000006e osMemSetMagicNumAndTaskid
80003068 l     F .text	000000d2 osMemAllocWithCheck
00000000 l    df *ABS*	00000000 los_memstat.c
00000000 l    df *ABS*	00000000 los_multipledlinkhead.c
80003650 l     F .text	00000036 LOS_ListInit
8000368c l     F .text	000002f2 LOS_Log2
00000000 l    df *ABS*	00000000 los_event.c
80003a7c l     F .text	00000036 LOS_ListInit
80003ab8 l     F .text	0000005a LOS_ListAdd
80003b18 l     F .text	0000003e LOS_ListTailInsert
80003b5c l     F .text	00000056 LOS_ListDelete
80003bb8 l     F .text	00000036 LOS_ListEmpty
00000000 l    df *ABS*	00000000 los_mux.c
80004274 l     F .text	00000036 LOS_ListInit
800042b0 l     F .text	0000005a LOS_ListAdd
80004310 l     F .text	0000003e LOS_ListTailInsert
80004354 l     F .text	00000056 LOS_ListDelete
800043b0 l     F .text	00000036 LOS_ListEmpty
00000000 l    df *ABS*	00000000 los_queue.c
80004bf0 l     F .text	00000036 LOS_ListInit
80004c2c l     F .text	0000005a LOS_ListAdd
80004c8c l     F .text	0000003e LOS_ListTailInsert
80004cd0 l     F .text	00000056 LOS_ListDelete
80004d2c l     F .text	00000036 LOS_ListEmpty
80004f18 l     F .text	0000014a osQueuePend
80005068 l     F .text	000000ea osQueueWakeUp
00000000 l    df *ABS*	00000000 los_sem.c
80005930 l     F .text	00000036 LOS_ListInit
8000596c l     F .text	0000005a LOS_ListAdd
800059cc l     F .text	0000003e LOS_ListTailInsert
80005a10 l     F .text	00000056 LOS_ListDelete
80005a6c l     F .text	00000036 LOS_ListEmpty
00000000 l    df *ABS*	00000000 los_priqueue.c
80006144 l     F .text	00000036 LOS_ListInit
80006180 l     F .text	0000005a LOS_ListAdd
800061e0 l     F .text	0000003e LOS_ListTailInsert
80006224 l     F .text	00000056 LOS_ListDelete
80006280 l     F .text	00000036 LOS_ListEmpty
00000000 l    df *ABS*	00000000 los_swtmr.c
800068bc l     F .text	00000042 osSwtmrDelete
80006904 l     F .text	00000156 osSwTmrTimeoutHandle
00000000 l    df *ABS*	00000000 los_sys.c
00000000 l    df *ABS*	00000000 los_task.c
80007040 l     F .text	00000036 LOS_ListInit
8000707c l     F .text	0000005a LOS_ListAdd
800070dc l     F .text	0000003e LOS_ListTailInsert
80007120 l     F .text	00000056 LOS_ListDelete
8000717c l     F .text	00000036 LOS_ListEmpty
00000000 l    df *ABS*	00000000 los_tick.c
00000000 l    df *ABS*	00000000 los_timeslice.c
00000000 l    df *ABS*	00000000 los_api_dynamic_mem.c
00000000 l    df *ABS*	00000000 los_api_event.c
00000000 l    df *ABS*	00000000 los_api_list.c
80009200 l     F .text	00000036 LOS_ListInit
8000923c l     F .text	0000005a LOS_ListAdd
8000929c l     F .text	0000003e LOS_ListTailInsert
800092e0 l     F .text	00000056 LOS_ListDelete
8000933c l     F .text	00000036 LOS_ListEmpty
00000000 l    df *ABS*	00000000 los_api_msgqueue.c
8000e118 l     O .sbss	00000004 g_uwQueue
00000000 l    df *ABS*	00000000 los_api_mutex.c
00000000 l    df *ABS*	00000000 los_api_sem.c
8000e11c l     O .sbss	00000004 g_TestTaskID01
8000e120 l     O .sbss	00000004 g_TestTaskID02
8000e124 l     O .sbss	00000004 g_usSemID
00000000 l    df *ABS*	00000000 los_api_static_mem.c
00000000 l    df *ABS*	00000000 los_api_systick.c
00000000 l    df *ABS*	00000000 los_api_task.c
00000000 l    df *ABS*	00000000 los_api_timer.c
00000000 l    df *ABS*	00000000 los_inspect_entry.c
8000e130 l     O .sbss	00000004 gInspectErrCnt
8000e134 l     O .sbss	00000004 g_uwDemoTaskID
8000dbd4 l     O .data	000000c8 gInspect
8000a8e8 l     F .text	0000009e LOS_Inspect_KeyAndLed
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sysisatty.c
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 findfp.c
8000ae24 l     F .text	00000086 std.isra.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
8000b7ec l     F .text	0000003a __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
8000dc9c l     O .data	00000060 impure_data
8000ce38 g     F .text	0000001a _malloc_usable_size_r
80001808 g     F .text	00000072 LOS_EvbKeyInit
8000a478 g     F .text	00000112 Example_swTimer
8001e394 g     O .bss	00000004 g_Testmux01
8000cde8 g     F .text	0000004a _isatty_r
800019e4 g     F .text	00000036 LOS_EvbUartInit
8000c924 g     F .text	00000052 _lseek_r
80008b44 g     F .text	00000112 LOS_TaskYield
80001dc8 g     F .text	00000016 osTaskExit
80002614 g     F .text	000000b2 LOS_MemboxAlloc
80008cb0 g     F .text	00000072 LOS_TaskUnlock
800074b0 g     F .text	000000ca osTimerListDelete
800020dc g     F .text	00000026 LOS_SetTickSycle
00010000 g       *ABS*	00000000 STACK_SIZE
8001e5f8 g     O .bss	00000004 g_uwTskLoID
8000aca8 g     F .text	0000007a printf
80000950  w    F .text	0000001e External_11_IRQHandler
8000e330 g       .sdata	00000000 __global_pointer$
8000ad9c g     F .text	0000001a vsprintf
8001e234 g     O .bss	00000008 g_stUnusedSemList
8000c328 g     F .text	00000056 __sseek
8000af20 g     F .text	000000b2 __sinit
8000c390 g     F .text	00000136 __swbuf_r
8001e380 g     O .bss	0000000c example_event
8000aeb0 g     F .text	0000006a __sfmoreglue
80002250 g     F .text	0000002e LOS_Start
80001998 g     F .text	00000046 LOS_EvbLedControl
8000cb88 g     F .text	00000002 __malloc_unlock
80002284 g     F .text	000000e6 osMain
8000db40 g       *ABS*	00000000 __data_load
80001788 g     F .text	00000026 SysTick_Handler
80000878  w    F .text	0000001e External_5_IRQHandler
80000fa4 g       .text	00000000 HW_get_8bit_reg_field
8000cb28 g     F .text	00000052 memmove
80008da4 g     F .text	00000036 osTimesliceInit
80006ee8 g     F .text	000000f6 LOS_SwtmrDelete
800045ac g     F .text	000000e2 LOS_MuxDelete
80009b18 g     F .text	000000ba Example_SemTask1
8001e324 g     O .bss	00000004 g_uwIdleTaskID
8000e1e0 g     O .bss	00000004 m_aucSysMem0
8000e100 g       .sbss	00000000 __sbss_start
80006ab8 g     F .text	000000ce osSwtmrStop
8000cd94 g     F .text	0000004e _fstat_r
8000907c g     F .text	0000017e Example_SndRcvEvent
8000e1c0 g     O .bss	00000004 errno
80000edc g       .text	00000000 HW_set_32bit_reg
8000e1cc g     O .bss	00000008 g_gpio_out
8001e23c g     O .bss	00000004 g_pstAllSem
80009c54 g     F .text	000001ae Example_Semphore
800095e0 g     F .text	000000fa recv_Entry
8000a98c g     F .text	000000a2 LOS_Inspect_TskDeal
80006470 g     F .text	0000007e LOS_PriqueueSize
80001d44 g     F .text	0000007e LOS_Schedule
80000a94  w    F .text	0000001e External_20_IRQHandler
8001e38c g     O .bss	00000004 g_uweventTaskID
8000a394 g     F .text	00000066 Timer1_Callback
8000047c g     F .text	00000022 __enable_irq
8000aae0 g     F .text	000000e6 memcpy
8000e1c4 g     O .bss	00000008 g_gpio_in
8000ae14 g     F .text	0000000a _cleanup_r
8001e244 g     O .bss	00000004 m_pstSwtmrFreeList
8000b454 g     F .text	00000392 _svfprintf_r
8000db30 g       .sdata	00000000 __sdata_start
80003140 g     F .text	00000176 LOS_MemInit
800071b8 g     F .text	0000000e osIdleTask
800032bc g     F .text	00000072 LOS_MemAlloc
8001e328 g     O .bss	00000004 g_uwSwtmrTaskID
80006fe4 g     F .text	0000002e LOS_TickCountGet
80007290 g     F .text	0000021a osTaskAdd2TimerList
8000e1d4 g     O .bss	00000008 g_uart
8000ad50 g     F .text	00000046 _vsiprintf_r
80000f7c g       .text	00000000 HW_set_8bit_reg_field
80005f88 g     F .text	000001b6 LOS_SemPost
80000b6c  w    F .text	0000001e External_26_IRQHandler
8000ad28 g     F .text	00000002 isatty
80000da4 g     F .text	0000005a _fstat
800006f4 g     F .text	000000ca handle_trap
00080000 g       *ABS*	00000000 RAM_SIZE
8000092c  w    F .text	0000001e External_10_IRQHandler
80005aa8 g     F .text	000000ca osSemInit
800039f4 g     F .text	00000082 LOS_DLnkMultiHead
800071cc g     F .text	000000be osTaskPriModify
8001e378 g     O .bss	00000008 g_stTaskTimeSlice
80001bec g       .text	00000000 osDisableIRQ
8000c1fc g     F .text	0000004a _sbrk_r
80005c74 g     F .text	000000ca LOS_SemDelete
8001e368 g     O .bss	00000008 g_ullTickCount
80001c20 g       .text	00000000 osTaskSchedule
8001e32c g     O .bss	00000008 g_stTskRecyleList
80001de4 g     F .text	0000028e osTskStackInit
80001880 g     F .text	0000005a LOS_EvbGetKeyVal
8000a170 g     F .text	000000ce Example_TaskLo
8000cd3c g     F .text	00000052 _read_r
8000e1dc g     O .bss	00000004 g_uwCyclesPerTick
80004204 g     F .text	0000006a LOS_EventClear
8001e334 g     O .bss	00000008 g_stTskSortLink
8001e398 g     O .bss	00000004 g_TestTaskID02
80000bfc  w    F .text	0000001e External_30_IRQHandler
80000a28  w    F .text	0000001e External_17_IRQHandler
8002e600 g       .heap	00000000 _heap_end
80000cec g     F .text	0000004a _isatty
80008c5c g     F .text	0000004e LOS_TaskLock
8000db38 g     O .sdata	00000004 _global_impure_ptr
8000cca0 g     F .text	00000096 _realloc_r
8001e600 g       .bss	00000000 __bss_end
8000e10c g     O .sbss	00000004 g_vuwIntCount
80004988 g     F .text	00000262 LOS_MuxPost
8000a590 g     F .text	000000de LOS_InspectStatusSetByID
8000ad9c g     F .text	0000001a vsiprintf
80005158 g     F .text	0000011e LOS_QueueCreate
80000c5c g     F .text	0000008a _sbrk
80006ce8 g     F .text	000000f6 LOS_SwtmrStart
80006a60 g     F .text	00000052 osSwtmrScan
80001728 g     F .text	0000005a osTickStart
80008fe4 g     F .text	00000092 Example_Event
80000270 g     F .text	00000092 _init
80000f6c g       .text	00000000 HW_set_8bit_reg
80000f74 g       .text	00000000 HW_get_8bit_reg
80009f60 g     F .text	0000011e Example_GetTick
80008de0 g     F .text	000000d6 osTimesliceCheck
80001bf8 g       .text	00000000 LOS_IntLock
8000e140 g       .sbss	00000000 __sbss_end
80000eec g       .text	00000000 HW_set_32bit_reg_field
80006780 g     F .text	00000136 osSwTmrStart
80003d38 g     F .text	000002ae LOS_EventRead
80006de4 g     F .text	000000fe LOS_SwtmrStop
8000ad30 g     F .text	0000001a write
80009378 g     F .text	00000192 Example_list
8001e33c g     O .bss	00000004 g_pstTaskCBArray
8000a084 g     F .text	000000e6 Example_TaskHi
8001e390 g     O .bss	00000004 g_TestTaskID
80005508 g     F .text	000002a6 LOS_QueueWrite
80000b48  w    F .text	0000001e External_25_IRQHandler
80001a64 g     F .text	000000a2 LOS_EvbUartPrintf
8003e600 g       .stack	00000000 __stack_top
80003c50 g     F .text	000000e2 LOS_EventPoll
80000bd8  w    F .text	0000001e External_29_IRQHandler
80007018 g     F .text	00000022 LOS_CyclePerTickGet
8000da94 g     O .text	00000020 __sf_fake_stderr
8001e340 g     O .bss	00000004 g_uwTskMaxNum
800063e0 g     F .text	0000008a LOS_PriqueueTop
800096e0 g     F .text	00000126 Example_MsgQueue
800018e0 g     F .text	000000b2 LOS_EvbLedInit
8001e344 g     O .bss	00000002 g_usLosTaskLock
8000e1e4 g     O .bss	00010000 g_ucMemStart
800098e8 g     F .text	0000008e Example_MutexTask2
8001e348 g     O .bss	00000008 g_stLosTask
8000b2e8 g     F .text	00000166 __ssputs_r
80004d68 g     F .text	00000072 osQueueInit
8001e224 g     O .bss	00000004 g_pstAllMux
80000998  w    F .text	0000001e External_13_IRQHandler
8000080c  w    F .text	0000001e External_2_IRQHandler
8000527c g     F .text	00000286 LOS_QueueRead
00010000 g       *ABS*	00000000 HEAP_SIZE
80003984 g     F .text	0000006a LOS_DLnkInitMultiHead
80000974  w    F .text	0000001e External_12_IRQHandler
8000b82c g     F .text	00000072 __sfputs_r
8000cb00 g     F .text	00000022 memchr
8001e228 g     O .bss	00000008 g_stUnusedMuxList
8000cb90 g     F .text	0000010a _free_r
8001e1e4 g     O .bss	00000040 g_TskMemUsedInfo
800010d0 g     F .text	000000b2 UART_send
80000000 g       .text	00000000 _start
80000e04 g     F .text	00000052 _lseek
8000db34 g     O .sdata	00000001 g_use_ram_vect
80003518 g     F .text	000000a2 osTaskMemUsedInc
8000059c g     F .text	000000aa handle_m_timer_interrupt
8000db30 g       *ABS*	00000000 __sdata_load
8000dd00 g       .data	00000000 __data_end
80000a4c  w    F .text	0000001e External_18_IRQHandler
80000f14 g       .text	00000000 HW_get_32bit_reg_field
80001d18 g     F .text	00000026 osSchedule
8000c650 g     F .text	0000004a _close_r
80009e08 g     F .text	00000152 Example_StaticMem
80005b78 g     F .text	000000f6 LOS_SemCreate
80001188 g     F .text	00000172 GPIO_init
8000a400 g     F .text	00000072 Timer2_Callback
8000c4cc g     F .text	0000017e __swsetup_r
8001e248 g     O .bss	00000004 m_pstSwtmrCBArray
8000afd8 g     F .text	000000ee __sfp
80000adc  w    F .text	0000001e External_22_IRQHandler
8000c24c g     F .text	0000004e __sread
800009e0  w    F .text	0000001e External_15_IRQHandler
80004694 g     F .text	000002ee LOS_MuxPend
8000cb80 g     F .text	00000002 __malloc_lock
8000215c g     F .text	0000006a osHwiInit
80004de0 g     F .text	00000132 osQueueCreate
8000e114 g     O .sbss	00000004 g_pfnTskSwitchHook
8000c880 g     F .text	0000009e _fflush_r
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80006b8c g     F .text	00000156 LOS_SwtmrCreate
8000dab4 g     O .text	00000020 __sf_fake_stdin
8001e370 g     O .bss	00000004 g_uwCyclePerSec
8000e140 g       .bss	00000000 __bss_start
8000aa34 g     F .text	00000072 LOS_Inspect_Entry
80000a04  w    F .text	0000001e External_16_IRQHandler
8000abcc g     F .text	000000dc memset
8001e24c g     O .bss	00000004 m_uwSwTmrHandlerQueue
80000160 g     F .text	00000052 main
800083b8 g     F .text	00000186 LOS_TaskResume
80000bb4  w    F .text	0000001e External_28_IRQHandler
8000660c g     F .text	0000016e osSwTmrInit
8000c384 g     F .text	00000006 __sclose
8000136c g     F .text	00000176 GPIO_get_inputs
800063ac g     F .text	0000002e LOS_PriqueueDequeue
8000b184 g     F .text	0000015e _malloc_r
80001c08 g       .text	00000000 LOS_IntUnLock
8001e39c g     O .bss	00000004 g_TestTaskID01
80000f2c g       .text	00000000 HW_get_16bit_reg
80008ebc g     F .text	00000122 Example_Dyn_Mem
8000db40 g       .sdata	00000000 __sdata_end
800064f4 g     F .text	0000008e osSwTmrTask
800017b4 g     F .text	0000001a LosAdapIntInit
8002e600 g       .heap	00000000 __heap_end
800009bc  w    F .text	0000001e External_14_IRQHandler
80003bf4 g     F .text	00000056 LOS_EventInit
80009510 g     F .text	000000ca send_Entry
80007d20 g     F .text	0000018e osTaskEntry
80000308 g     F .text	0000001a _fini
8000aca8 g     F .text	0000007a iprintf
8001e350 g     O .bss	00000004 g_bTaskScheduled
8000dd00 g     O .vector.bss	00000400 m_pstHwiForm
8000db40 g     O .data	00000080 ext_irq_handler_table
8000adbc g     F .text	00000052 _write_r
8000ad50 g     F .text	00000046 _vsprintf_r
80000f34 g       .text	00000000 HW_set_16bit_reg_field
80009bd8 g     F .text	00000076 Example_SemTask2
8001e240 g     O .bss	00000004 g_pstLosPriorityQueueList
8000bc6c g     F .text	000001ae _printf_common
8000997c g     F .text	00000196 Example_MutexLock
8000a674 g     F .text	0000026e LOS_InspectByID
80006588 g     F .text	0000007e osSwTmrTaskCreate
8000db3c g     O .sdata	00000004 _impure_ptr
800023b8 g     F .text	0000006a LOS_Align
8002e600 g       .stack	00000000 __stack_bottom
8000c6a0 g     F .text	000001da __sflush_r
80001c38 g     F .text	0000001c Software_IRQHandler
80000b90  w    F .text	0000001e External_27_IRQHandler
8000b454 g     F .text	00000392 _svfiprintf_r
800008e4  w    F .text	0000001e External_8_IRQHandler
80000908  w    F .text	0000001e External_9_IRQHandler
80003440 g     F .text	000000d2 LOS_MemFree
800035c0 g     F .text	0000008a osTaskMemUsedDec
8000e12c g     O .sbss	00000004 g_timercount2
8000220c g     F .text	0000003e LOS_EnableTick
800043ec g     F .text	000000d6 osMuxInit
8001e600 g       .heap	00000000 __heap_start
800007c4  w    F .text	0000001e Invalid_IRQHandler
80002370 g     F .text	00000042 LOS_KernelInit
80005d44 g     F .text	0000023e LOS_SemPend
80008544 g     F .text	000001ce LOS_TaskSuspend
8001e5fc g     O .bss	00000004 g_uwTskHiID
80001a20 g     F .text	0000003e LOS_EvbUartWriteByte
80000830  w    F .text	0000001e External_3_IRQHandler
8000980c g     F .text	000000d6 Example_MutexTask1
80001300 g     F .text	00000066 GPIO_config
8000213c g     F .text	0000001a osHwiDefaultHandler
8000c97c g     F .text	0000008a __swhatbuf_r
80002938 g     F .text	00000046 osMemSystemInit
80008d28 g     F .text	00000076 osTickHandler
80007acc g     F .text	0000024e osTaskSelfDelete
80000a70  w    F .text	0000001e External_19_IRQHandler
80000e9c g     F .text	0000003a _write
8001e600 g       .bss	00000000 _end
800026cc g     F .text	000000ae LOS_MemboxFree
800057b4 g     F .text	00000176 LOS_QueueDelete
8001e354 g     O .bss	00000008 g_stLosFreeTask
800017d4 g     F .text	0000002e LOS_EvbSetup
80003334 g     F .text	00000106 LOS_MemAllocAlign
80008a38 g     F .text	00000106 LOS_TaskDelay
80002108 g     F .text	0000002e osIntNumGet
80007a3c g     F .text	0000008a osIdleTaskCreate
8001e230 g     O .bss	00000004 g_pstAllQueue
8000c2a0 g     F .text	00000082 __swrite
8000a244 g     F .text	0000014a Example_TskCaseEntry
8000b8a4 g     F .text	000003c2 _vfiprintf_r
8000b0cc g     F .text	000000b2 _fwalk_reent
80008718 g     F .text	0000031a LOS_TaskDelete
8001e250 g     O .bss	00000004 m_pstSwtmrSortList
80000fb4 g     F .text	00000116 UART_init
8000dad4 g     O .text	00000020 __sf_fake_stdout
80000ee4 g       .text	00000000 HW_get_32bit_reg
80000e5c g     F .text	0000003a _read
80000c44 g     F .text	00000012 _exit
80000f24 g       .text	00000000 HW_set_16bit_reg
8001e374 g     O .bss	00000004 g_uwTicksPerSec
8000635c g     F .text	0000004a LOS_PriqueueEnqueue
80007eb4 g     F .text	000003b6 LOS_TaskCreateOnly
8000ca0c g     F .text	000000ee __smakebuf_r
800024d4 g     F .text	0000013a LOS_MemboxInit
80002078 g     F .text	0000005e LOS_TickHandler
8000be20 g     F .text	000003d6 _printf_i
800007e8  w    F .text	0000001e External_1_IRQHandler
8000089c  w    F .text	0000001e External_6_IRQHandler
8001e254 g     O .bss	000000d0 m_aucSwTmrHandlerPool
8000e13c g     O .sbss	00000004 __malloc_sbrk_start
8000aaac g     F .text	0000002e LOS_Inspect_delim
8000dbc0 g     O .data	00000012 abuf
80000c20  w    F .text	0000001e External_31_IRQHandler
8001e3a0 g     O .bss	00000258 pBoxMem
8000e110 g     O .sbss	00000004 g_sys_mem_addr_end
80001c18 g       .text	00000000 LOS_IntRestore
8000db40 g       .data	00000000 __data_start
8000e138 g     O .sbss	00000004 __malloc_free_list
80008270 g     F .text	00000142 LOS_TaskCreate
8000b8a4 g     F .text	000003c2 _vfprintf_r
80000ab8  w    F .text	0000001e External_21_IRQHandler
800062bc g     F .text	0000009a osPriqueueInit
80002780 g     F .text	00000062 LOS_MemboxClr
80001b0c g       .text	00000000 LOS_StartToRun
800006c0 g     F .text	0000002e handle_m_soft_interrupt
8000064c g     F .text	0000006e handle_m_ext_interrupt
80007580 g     F .text	0000026a osTaskScan
80000f5c g       .text	00000000 HW_get_16bit_reg_field
80000b00  w    F .text	0000001e External_23_IRQHandler
8001e35c g     O .bss	00000008 g_stTaskTimerList
80000b24  w    F .text	0000001e External_24_IRQHandler
800014e8 g     F .text	0000023a GPIO_set_output
800044c8 g     F .text	000000de LOS_MuxCreate
80000854  w    F .text	0000001e External_4_IRQHandler
800077f0 g     F .text	00000246 osTaskInit
800004a4 g     F .text	000000f2 SysTick_Config
800021cc g     F .text	0000003a osRegister
80001bdc g       .text	00000000 LOS_IntNumGet
80000d6c g     F .text	00000032 _close
80003fec g     F .text	00000212 LOS_EventWrite
800008c0  w    F .text	0000001e External_7_IRQHandler
8000e128 g     O .sbss	00000004 g_timercount1



Disassembly of section .text:

80000000 <_start>:
_start():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	02c0006f          	j	80000034 <trap_entry>

8000000c <handle_reset>:
handle_reset():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02828293          	addi	t0,t0,40 # 80000034 <trap_entry>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	0000e197          	auipc	gp,0xe
80000024:	31018193          	addi	gp,gp,784 # 8000e330 <__global_pointer$>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000028:	0003e117          	auipc	sp,0x3e
8000002c:	5d810113          	addi	sp,sp,1496 # 8003e600 <__stack_top>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
80000030:	2400006f          	j	80000270 <_init>

80000034 <trap_entry>:
trap_entry():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000034:	f8010113          	addi	sp,sp,-128
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000038:	00112023          	sw	ra,0(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
8000003c:	00212223          	sw	sp,4(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
80000040:	00312423          	sw	gp,8(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000044:	00412623          	sw	tp,12(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000048:	00512823          	sw	t0,16(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
8000004c:	00612a23          	sw	t1,20(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
80000050:	00712c23          	sw	t2,24(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000054:	00812e23          	sw	s0,28(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000058:	02912023          	sw	s1,32(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
8000005c:	02a12223          	sw	a0,36(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
80000060:	02b12423          	sw	a1,40(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000064:	02c12623          	sw	a2,44(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000068:	02d12823          	sw	a3,48(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
8000006c:	02e12a23          	sw	a4,52(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
80000070:	02f12c23          	sw	a5,56(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000074:	03012e23          	sw	a6,60(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000078:	05112023          	sw	a7,64(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
8000007c:	05212223          	sw	s2,68(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
80000080:	05312423          	sw	s3,72(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000084:	05412623          	sw	s4,76(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000088:	05512823          	sw	s5,80(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
8000008c:	05612a23          	sw	s6,84(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
80000090:	05712c23          	sw	s7,88(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000094:	05812e23          	sw	s8,92(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000098:	07912023          	sw	s9,96(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
8000009c:	07a12223          	sw	s10,100(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
800000a0:	07b12423          	sw	s11,104(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a4:	07c12623          	sw	t3,108(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a8:	07d12823          	sw	t4,112(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000ac:	07e12a23          	sw	t5,116(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000b0:	07f12c23          	sw	t6,120(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:105


  csrr t0, mepc
800000b4:	341022f3          	csrr	t0,mepc
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b8:	06512e23          	sw	t0,124(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:108

  csrr a0, mcause
800000bc:	34202573          	csrr	a0,mcause
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:109
  csrr a1, mepc
800000c0:	341025f3          	csrr	a1,mepc
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:110
  mv a2, sp
800000c4:	00010613          	mv	a2,sp
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:111
  jal handle_trap
800000c8:	62c000ef          	jal	ra,800006f4 <handle_trap>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:112
  csrw mepc, a0
800000cc:	34151073          	csrw	mepc,a0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d0:	000022b7          	lui	t0,0x2
800000d4:	80028293          	addi	t0,t0,-2048 # 1800 <OS_TASK_STATUS_NOT_RUNNING+0x1711>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:116
  csrs mstatus, t0
800000d8:	3002a073          	csrs	mstatus,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000dc:	00012083          	lw	ra,0(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000e0:	00412103          	lw	sp,4(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e4:	00812183          	lw	gp,8(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e8:	00c12203          	lw	tp,12(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000ec:	01012283          	lw	t0,16(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000f0:	01412303          	lw	t1,20(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f4:	01812383          	lw	t2,24(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f8:	01c12403          	lw	s0,28(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000fc:	02012483          	lw	s1,32(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
80000100:	02412503          	lw	a0,36(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000104:	02812583          	lw	a1,40(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000108:	02c12603          	lw	a2,44(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
8000010c:	03012683          	lw	a3,48(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
80000110:	03412703          	lw	a4,52(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000114:	03812783          	lw	a5,56(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000118:	03c12803          	lw	a6,60(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
8000011c:	04012883          	lw	a7,64(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
80000120:	04412903          	lw	s2,68(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000124:	04812983          	lw	s3,72(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000128:	04c12a03          	lw	s4,76(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
8000012c:	05012a83          	lw	s5,80(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
80000130:	05412b03          	lw	s6,84(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000134:	05812b83          	lw	s7,88(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000138:	05c12c03          	lw	s8,92(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
8000013c:	06012c83          	lw	s9,96(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
80000140:	06412d03          	lw	s10,100(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000144:	06812d83          	lw	s11,104(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000148:	06c12e03          	lw	t3,108(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
8000014c:	07012e83          	lw	t4,112(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
80000150:	07412f03          	lw	t5,116(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000154:	07812f83          	lw	t6,120(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000158:	08010113          	addi	sp,sp,128
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/entry.S:151
  mret
8000015c:	30200073          	mret

80000160 <main>:
main():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:56
Output      : None
Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT
int main(void)
{
80000160:	fe010113          	addi	sp,sp,-32
80000164:	00112e23          	sw	ra,28(sp)
80000168:	00812c23          	sw	s0,24(sp)
8000016c:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:65
        for example flash, i2c , system clock ....
     */
    //HAL_init();....

    /*Init LiteOS kernel */
    uwRet = LOS_KernelInit();
80000170:	200020ef          	jal	ra,80002370 <LOS_KernelInit>
80000174:	00050793          	mv	a5,a0
80000178:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:66
    if (uwRet != LOS_OK) {
8000017c:	fec42783          	lw	a5,-20(s0)
80000180:	00078663          	beqz	a5,8000018c <main+0x2c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:67
        return LOS_NOK;
80000184:	00100793          	li	a5,1
80000188:	0180006f          	j	800001a0 <main+0x40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:70
    }
    /* Enable LiteOS system tick interrupt */
    LOS_EnableTick();
8000018c:	080020ef          	jal	ra,8000220c <LOS_EnableTick>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:77
    /*
        Notice: add your code here
        here you can create task for your function 
        do some hw init that need after systemtick init
     */
    LOS_EvbSetup();//init the device on the dev baord
80000190:	644010ef          	jal	ra,800017d4 <LOS_EvbSetup>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:81

    //LOS_Demo_Entry();

    LOS_Inspect_Entry();
80000194:	0a10a0ef          	jal	ra,8000aa34 <LOS_Inspect_Entry>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:86

    //LOS_BoadExampleEntry();

    /* Kernel start to run */
    LOS_Start();
80000198:	0b8020ef          	jal	ra,80002250 <LOS_Start>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:87 (discriminator 1)
    for (;;);
8000019c:	0000006f          	j	8000019c <main+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../user/main.c:89
    /* Replace the dots (...) with your own code. */
}
800001a0:	00078513          	mv	a0,a5
800001a4:	01c12083          	lw	ra,28(sp)
800001a8:	01812403          	lw	s0,24(sp)
800001ac:	02010113          	addi	sp,sp,32
800001b0:	00008067          	ret
800001b4:	0000                	unimp
	...

800001b8 <copy_section>:
copy_section():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:37
extern uint32_t     __bss_start;
extern uint32_t     __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
800001b8:	fe010113          	addi	sp,sp,-32
800001bc:	00812e23          	sw	s0,28(sp)
800001c0:	02010413          	addi	s0,sp,32
800001c4:	fea42623          	sw	a0,-20(s0)
800001c8:	feb42423          	sw	a1,-24(s0)
800001cc:	fec42223          	sw	a2,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
800001d0:	02c0006f          	j	800001fc <copy_section+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:40
    {
        *p_vma = *p_load;
800001d4:	fec42783          	lw	a5,-20(s0)
800001d8:	0007a703          	lw	a4,0(a5)
800001dc:	fe842783          	lw	a5,-24(s0)
800001e0:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:41
        ++p_load;
800001e4:	fec42783          	lw	a5,-20(s0)
800001e8:	00478793          	addi	a5,a5,4
800001ec:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:42
        ++p_vma;
800001f0:	fe842783          	lw	a5,-24(s0)
800001f4:	00478793          	addi	a5,a5,4
800001f8:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:38
    while(p_vma <= p_vma_end)
800001fc:	fe842703          	lw	a4,-24(s0)
80000200:	fe442783          	lw	a5,-28(s0)
80000204:	fce7f8e3          	bleu	a4,a5,800001d4 <copy_section+0x1c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:44
    }
}
80000208:	00000013          	nop
8000020c:	01c12403          	lw	s0,28(sp)
80000210:	02010113          	addi	sp,sp,32
80000214:	00008067          	ret
80000218:	0000                	unimp
	...

8000021c <zero_section>:
zero_section():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:47

static void zero_section(uint32_t * start, uint32_t * end)
{
8000021c:	fd010113          	addi	sp,sp,-48
80000220:	02812623          	sw	s0,44(sp)
80000224:	03010413          	addi	s0,sp,48
80000228:	fca42e23          	sw	a0,-36(s0)
8000022c:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000230:	fdc42783          	lw	a5,-36(s0)
80000234:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:50
    
    while(p_zero <= end)
80000238:	0180006f          	j	80000250 <zero_section+0x34>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:52
    {
        *p_zero = 0;
8000023c:	fec42783          	lw	a5,-20(s0)
80000240:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:53
        ++p_zero;
80000244:	fec42783          	lw	a5,-20(s0)
80000248:	00478793          	addi	a5,a5,4
8000024c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:50
    while(p_zero <= end)
80000250:	fec42703          	lw	a4,-20(s0)
80000254:	fd842783          	lw	a5,-40(s0)
80000258:	fee7f2e3          	bleu	a4,a5,8000023c <zero_section+0x20>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:55
    }
}
8000025c:	00000013          	nop
80000260:	02c12403          	lw	s0,44(sp)
80000264:	03010113          	addi	sp,sp,48
80000268:	00008067          	ret
8000026c:	0000                	unimp
	...

80000270 <_init>:
_init():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:58

void _init(void)
{
80000270:	fe010113          	addi	sp,sp,-32
80000274:	00112e23          	sw	ra,28(sp)
80000278:	00812c23          	sw	s0,24(sp)
8000027c:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
80000280:	8000d7b7          	lui	a5,0x8000d
80000284:	e6078793          	addi	a5,a5,-416 # 8000ce60 <__stack_top+0xfffce860>
80000288:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
8000028c:	fec42783          	lw	a5,-20(s0)
80000290:	fef42023          	sw	a5,-32(s0)
80000294:	fe042223          	sw	zero,-28(s0)
80000298:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:63

    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
8000029c:	81018613          	addi	a2,gp,-2032 # 8000db40 <__data_load>
800002a0:	8000e7b7          	lui	a5,0x8000e
800002a4:	b3078593          	addi	a1,a5,-1232 # 8000db30 <__stack_top+0xfffcf530>
800002a8:	8000e7b7          	lui	a5,0x8000e
800002ac:	b3078513          	addi	a0,a5,-1232 # 8000db30 <__stack_top+0xfffcf530>
800002b0:	f09ff0ef          	jal	ra,800001b8 <copy_section>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:64
    copy_section(&__data_load, &__data_start, &__data_end);
800002b4:	9d018613          	addi	a2,gp,-1584 # 8000dd00 <__data_end>
800002b8:	81018593          	addi	a1,gp,-2032 # 8000db40 <__data_load>
800002bc:	81018513          	addi	a0,gp,-2032 # 8000db40 <__data_load>
800002c0:	ef9ff0ef          	jal	ra,800001b8 <copy_section>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:65
    zero_section(&__sbss_start, &__sbss_end);
800002c4:	e1018593          	addi	a1,gp,-496 # 8000e140 <__sbss_end>
800002c8:	dd018513          	addi	a0,gp,-560 # 8000e100 <__sbss_start>
800002cc:	f51ff0ef          	jal	ra,8000021c <zero_section>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:66
    zero_section(&__bss_start, &__bss_end);
800002d0:	8001e7b7          	lui	a5,0x8001e
800002d4:	60078593          	addi	a1,a5,1536 # 8001e600 <__stack_top+0xfffe0000>
800002d8:	e1018513          	addi	a0,gp,-496 # 8000e140 <__sbss_end>
800002dc:	f41ff0ef          	jal	ra,8000021c <zero_section>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:68
    
    main(1, argv);
800002e0:	fe040793          	addi	a5,s0,-32
800002e4:	00078593          	mv	a1,a5
800002e8:	00100513          	li	a0,1
800002ec:	e75ff0ef          	jal	ra,80000160 <main>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:69
}
800002f0:	00000013          	nop
800002f4:	01c12083          	lw	ra,28(sp)
800002f8:	01812403          	lw	s0,24(sp)
800002fc:	02010113          	addi	sp,sp,32
80000300:	00008067          	ret
80000304:	0000                	unimp
	...

80000308 <_fini>:
_fini():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:74

/* Function called after main() finishes */
void
_fini()
{
80000308:	ff010113          	addi	sp,sp,-16
8000030c:	00812623          	sw	s0,12(sp)
80000310:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/init.c:75
}
80000314:	00000013          	nop
80000318:	00c12403          	lw	s0,12(sp)
8000031c:	01010113          	addi	sp,sp,16
80000320:	00008067          	ret
80000324:	0000                	unimp
	...

80000328 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:82
 */
void __disable_irq(void)
{
    clear_csr(mstatus, MSTATUS_MPIE);
    clear_csr(mstatus, MSTATUS_MIE);
}
80000328:	fd010113          	addi	sp,sp,-48
8000032c:	02812623          	sw	s0,44(sp)
80000330:	03010413          	addi	s0,sp,48
80000334:	fca42e23          	sw	a0,-36(s0)
80000338:	f14027f3          	csrr	a5,mhartid
8000033c:	fef42623          	sw	a5,-20(s0)
80000340:	fec42783          	lw	a5,-20(s0)
80000344:	fef42423          	sw	a5,-24(s0)
80000348:	40000737          	lui	a4,0x40000
8000034c:	fdc42783          	lw	a5,-36(s0)
80000350:	0057d793          	srli	a5,a5,0x5
80000354:	fe842683          	lw	a3,-24(s0)
80000358:	00569693          	slli	a3,a3,0x5
8000035c:	00f686b3          	add	a3,a3,a5
80000360:	000017b7          	lui	a5,0x1
80000364:	80078793          	addi	a5,a5,-2048 # 800 <OS_TASK_STATUS_NOT_RUNNING+0x711>
80000368:	00f687b3          	add	a5,a3,a5
8000036c:	00279793          	slli	a5,a5,0x2
80000370:	00f707b3          	add	a5,a4,a5
80000374:	0007a783          	lw	a5,0(a5)
80000378:	fef42223          	sw	a5,-28(s0)
8000037c:	fdc42783          	lw	a5,-36(s0)
80000380:	01f7f793          	andi	a5,a5,31
80000384:	00100713          	li	a4,1
80000388:	00f717b3          	sll	a5,a4,a5
8000038c:	fff7c793          	not	a5,a5
80000390:	fe442703          	lw	a4,-28(s0)
80000394:	00f777b3          	and	a5,a4,a5
80000398:	fef42223          	sw	a5,-28(s0)
8000039c:	40000737          	lui	a4,0x40000
800003a0:	fdc42783          	lw	a5,-36(s0)
800003a4:	0057d793          	srli	a5,a5,0x5
800003a8:	fe842683          	lw	a3,-24(s0)
800003ac:	00569693          	slli	a3,a3,0x5
800003b0:	00f686b3          	add	a3,a3,a5
800003b4:	000017b7          	lui	a5,0x1
800003b8:	80078793          	addi	a5,a5,-2048 # 800 <OS_TASK_STATUS_NOT_RUNNING+0x711>
800003bc:	00f687b3          	add	a5,a3,a5
800003c0:	00279793          	slli	a5,a5,0x2
800003c4:	00f707b3          	add	a5,a4,a5
800003c8:	fe442703          	lw	a4,-28(s0)
800003cc:	00e7a023          	sw	a4,0(a5)
800003d0:	00000013          	nop
800003d4:	02c12403          	lw	s0,44(sp)
800003d8:	03010113          	addi	sp,sp,48
800003dc:	00008067          	ret
800003e0:	0000                	unimp
	...

800003e4 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
800003e4:	fe010113          	addi	sp,sp,-32
800003e8:	00812e23          	sw	s0,28(sp)
800003ec:	02010413          	addi	s0,sp,32
800003f0:	f14027f3          	csrr	a5,mhartid
800003f4:	fef42623          	sw	a5,-20(s0)
800003f8:	fec42783          	lw	a5,-20(s0)
800003fc:	fef42423          	sw	a5,-24(s0)
80000400:	40000737          	lui	a4,0x40000
80000404:	fe842783          	lw	a5,-24(s0)
80000408:	20078793          	addi	a5,a5,512
8000040c:	00c79793          	slli	a5,a5,0xc
80000410:	00f707b3          	add	a5,a4,a5
80000414:	0047a783          	lw	a5,4(a5)
80000418:	00078513          	mv	a0,a5
8000041c:	01c12403          	lw	s0,28(sp)
80000420:	02010113          	addi	sp,sp,32
80000424:	00008067          	ret
80000428:	0000                	unimp
	...

8000042c <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
8000042c:	fd010113          	addi	sp,sp,-48
80000430:	02812623          	sw	s0,44(sp)
80000434:	03010413          	addi	s0,sp,48
80000438:	fca42e23          	sw	a0,-36(s0)
8000043c:	f14027f3          	csrr	a5,mhartid
80000440:	fef42623          	sw	a5,-20(s0)
80000444:	fec42783          	lw	a5,-20(s0)
80000448:	fef42423          	sw	a5,-24(s0)
8000044c:	40000737          	lui	a4,0x40000
80000450:	fe842783          	lw	a5,-24(s0)
80000454:	20078793          	addi	a5,a5,512
80000458:	00c79793          	slli	a5,a5,0xc
8000045c:	00f707b3          	add	a5,a4,a5
80000460:	fdc42703          	lw	a4,-36(s0)
80000464:	00e7a223          	sw	a4,4(a5)
80000468:	00000013          	nop
8000046c:	02c12403          	lw	s0,44(sp)
80000470:	03010113          	addi	sp,sp,48
80000474:	00008067          	ret
80000478:	0000                	unimp
	...

8000047c <__enable_irq>:
__enable_irq():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:88

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
8000047c:	fe010113          	addi	sp,sp,-32
80000480:	00812e23          	sw	s0,28(sp)
80000484:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:89
    set_csr(mstatus, MSTATUS_MIE);
80000488:	300467f3          	csrrsi	a5,mstatus,8
8000048c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:90
}
80000490:	00000013          	nop
80000494:	01c12403          	lw	s0,28(sp)
80000498:	02010113          	addi	sp,sp,32
8000049c:	00008067          	ret
800004a0:	0000                	unimp
	...

800004a4 <SysTick_Config>:
SysTick_Config():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Configure the machine timer to generate an interrupt.
 */
uint32_t SysTick_Config(uint32_t ticks)
{
800004a4:	fd010113          	addi	sp,sp,-48
800004a8:	02112623          	sw	ra,44(sp)
800004ac:	02812423          	sw	s0,40(sp)
800004b0:	03010413          	addi	s0,sp,48
800004b4:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:97
    uint32_t ret_val = ERROR;
800004b8:	00100713          	li	a4,1
800004bc:	fee42623          	sw	a4,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:99
    
    g_systick_increment = ticks / RTC_PRESCALER;
800004c0:	fdc42683          	lw	a3,-36(s0)
800004c4:	06400713          	li	a4,100
800004c8:	02e6d733          	divu	a4,a3,a4
800004cc:	00070793          	mv	a5,a4
800004d0:	00000813          	li	a6,0
800004d4:	dd018713          	addi	a4,gp,-560 # 8000e100 <__sbss_start>
800004d8:	00f72023          	sw	a5,0(a4) # 40000000 <RAM_SIZE+0x3ff80000>
800004dc:	01072223          	sw	a6,4(a4)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:101

    if (g_systick_increment > 0)
800004e0:	dd018793          	addi	a5,gp,-560 # 8000e100 <__sbss_start>
800004e4:	0007a683          	lw	a3,0(a5)
800004e8:	0047a703          	lw	a4,4(a5)
800004ec:	00068793          	mv	a5,a3
800004f0:	00e7e7b3          	or	a5,a5,a4
800004f4:	08078663          	beqz	a5,80000580 <SysTick_Config+0xdc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:103
    {
        uint32_t mhart_id = read_csr(mhartid);
800004f8:	f14027f3          	csrr	a5,mhartid
800004fc:	fef42423          	sw	a5,-24(s0)
80000500:	fe842783          	lw	a5,-24(s0)
80000504:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:104
        PRCI->MTIMECMP[mhart_id] = PRCI->MTIME + g_systick_increment;
80000508:	44000737          	lui	a4,0x44000
8000050c:	0000c7b7          	lui	a5,0xc
80000510:	00f707b3          	add	a5,a4,a5
80000514:	ffc7a803          	lw	a6,-4(a5) # bffc <OS_TASK_STATUS_NOT_RUNNING+0xbf0d>
80000518:	ff87a783          	lw	a5,-8(a5)
8000051c:	dd018713          	addi	a4,gp,-560 # 8000e100 <__sbss_start>
80000520:	00072583          	lw	a1,0(a4) # 44000000 <RAM_SIZE+0x43f80000>
80000524:	00472603          	lw	a2,4(a4)
80000528:	44000537          	lui	a0,0x44000
8000052c:	00b786b3          	add	a3,a5,a1
80000530:	00068893          	mv	a7,a3
80000534:	00f8b8b3          	sltu	a7,a7,a5
80000538:	00c80733          	add	a4,a6,a2
8000053c:	00e887b3          	add	a5,a7,a4
80000540:	00078713          	mv	a4,a5
80000544:	00068793          	mv	a5,a3
80000548:	00070813          	mv	a6,a4
8000054c:	fe442683          	lw	a3,-28(s0)
80000550:	00001737          	lui	a4,0x1
80000554:	80070713          	addi	a4,a4,-2048 # 800 <OS_TASK_STATUS_NOT_RUNNING+0x711>
80000558:	00e68733          	add	a4,a3,a4
8000055c:	00371713          	slli	a4,a4,0x3
80000560:	00e50733          	add	a4,a0,a4
80000564:	00f72023          	sw	a5,0(a4)
80000568:	01072223          	sw	a6,4(a4)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:106

        set_csr(mie, MIP_MTIP);
8000056c:	08000793          	li	a5,128
80000570:	3047a7f3          	csrrs	a5,mie,a5
80000574:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:108

        __enable_irq();
80000578:	f05ff0ef          	jal	ra,8000047c <__enable_irq>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:110

        ret_val = SUCCESS;
8000057c:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:113
    }
    
    return ret_val;
80000580:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:114
}
80000584:	00078513          	mv	a0,a5
80000588:	02c12083          	lw	ra,44(sp)
8000058c:	02812403          	lw	s0,40(sp)
80000590:	03010113          	addi	sp,sp,48
80000594:	00008067          	ret
80000598:	0000                	unimp
	...

8000059c <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:120

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
8000059c:	fe010113          	addi	sp,sp,-32
800005a0:	00112e23          	sw	ra,28(sp)
800005a4:	00812c23          	sw	s0,24(sp)
800005a8:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:121
    clear_csr(mie, MIP_MTIP);
800005ac:	08000793          	li	a5,128
800005b0:	3047b7f3          	csrrc	a5,mie,a5
800005b4:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:123

    SysTick_Handler();
800005b8:	1d0010ef          	jal	ra,80001788 <SysTick_Handler>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:125

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800005bc:	44000737          	lui	a4,0x44000
800005c0:	0000c7b7          	lui	a5,0xc
800005c4:	00f707b3          	add	a5,a4,a5
800005c8:	ffc7a803          	lw	a6,-4(a5) # bffc <OS_TASK_STATUS_NOT_RUNNING+0xbf0d>
800005cc:	ff87a783          	lw	a5,-8(a5)
800005d0:	dd018713          	addi	a4,gp,-560 # 8000e100 <__sbss_start>
800005d4:	00072583          	lw	a1,0(a4) # 44000000 <RAM_SIZE+0x43f80000>
800005d8:	00472603          	lw	a2,4(a4)
800005dc:	44000537          	lui	a0,0x44000
800005e0:	f1402773          	csrr	a4,mhartid
800005e4:	fee42423          	sw	a4,-24(s0)
800005e8:	fe842883          	lw	a7,-24(s0)
800005ec:	00b786b3          	add	a3,a5,a1
800005f0:	00068313          	mv	t1,a3
800005f4:	00f33333          	sltu	t1,t1,a5
800005f8:	00c80733          	add	a4,a6,a2
800005fc:	00e307b3          	add	a5,t1,a4
80000600:	00078713          	mv	a4,a5
80000604:	00068793          	mv	a5,a3
80000608:	00070813          	mv	a6,a4
8000060c:	00001737          	lui	a4,0x1
80000610:	80070713          	addi	a4,a4,-2048 # 800 <OS_TASK_STATUS_NOT_RUNNING+0x711>
80000614:	00e88733          	add	a4,a7,a4
80000618:	00371713          	slli	a4,a4,0x3
8000061c:	00e50733          	add	a4,a0,a4
80000620:	00f72023          	sw	a5,0(a4)
80000624:	01072223          	sw	a6,4(a4)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:127

    set_csr(mie, MIP_MTIP);
80000628:	08000793          	li	a5,128
8000062c:	3047a7f3          	csrrs	a5,mie,a5
80000630:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:128
}
80000634:	00000013          	nop
80000638:	01c12083          	lw	ra,28(sp)
8000063c:	01812403          	lw	s0,24(sp)
80000640:	02010113          	addi	sp,sp,32
80000644:	00008067          	ret
80000648:	0000                	unimp
	...

8000064c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:173

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000064c:	fe010113          	addi	sp,sp,-32
80000650:	00112e23          	sw	ra,28(sp)
80000654:	00812c23          	sw	s0,24(sp)
80000658:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:174
    uint32_t int_num  = PLIC_ClaimIRQ();
8000065c:	d89ff0ef          	jal	ra,800003e4 <PLIC_ClaimIRQ>
80000660:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:175
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000664:	fe0405a3          	sb	zero,-21(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:177

    disable = ext_irq_handler_table[int_num]();
80000668:	8000e7b7          	lui	a5,0x8000e
8000066c:	fec42703          	lw	a4,-20(s0)
80000670:	00271713          	slli	a4,a4,0x2
80000674:	b4078793          	addi	a5,a5,-1216 # 8000db40 <__stack_top+0xfffcf540>
80000678:	00f707b3          	add	a5,a4,a5
8000067c:	0007a783          	lw	a5,0(a5)
80000680:	000780e7          	jalr	a5
80000684:	00050793          	mv	a5,a0
80000688:	fef405a3          	sb	a5,-21(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:179

    PLIC_CompleteIRQ(int_num);
8000068c:	fec42503          	lw	a0,-20(s0)
80000690:	d9dff0ef          	jal	ra,8000042c <PLIC_CompleteIRQ>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:181

    if(EXT_IRQ_DISABLE == disable)
80000694:	feb44703          	lbu	a4,-21(s0)
80000698:	00100793          	li	a5,1
8000069c:	00f71663          	bne	a4,a5,800006a8 <handle_m_ext_interrupt+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:183
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800006a0:	fec42503          	lw	a0,-20(s0)
800006a4:	c85ff0ef          	jal	ra,80000328 <PLIC_DisableIRQ>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:185
    }
}
800006a8:	00000013          	nop
800006ac:	01c12083          	lw	ra,28(sp)
800006b0:	01812403          	lw	s0,24(sp)
800006b4:	02010113          	addi	sp,sp,32
800006b8:	00008067          	ret
800006bc:	0000                	unimp
	...

800006c0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:188

void handle_m_soft_interrupt()
{
800006c0:	ff010113          	addi	sp,sp,-16
800006c4:	00112623          	sw	ra,12(sp)
800006c8:	00812423          	sw	s0,8(sp)
800006cc:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:190
    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800006d0:	440007b7          	lui	a5,0x44000
800006d4:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:192

    Software_IRQHandler();
800006d8:	560010ef          	jal	ra,80001c38 <Software_IRQHandler>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:193
}
800006dc:	00000013          	nop
800006e0:	00c12083          	lw	ra,12(sp)
800006e4:	00812403          	lw	s0,8(sp)
800006e8:	01010113          	addi	sp,sp,16
800006ec:	00008067          	ret
800006f0:	0000                	unimp
	...

800006f4 <handle_trap>:
handle_trap():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:198
/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800006f4:	fe010113          	addi	sp,sp,-32
800006f8:	00112e23          	sw	ra,28(sp)
800006fc:	00812c23          	sw	s0,24(sp)
80000700:	02010413          	addi	s0,sp,32
80000704:	fea42623          	sw	a0,-20(s0)
80000708:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:199
    if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
8000070c:	fec42783          	lw	a5,-20(s0)
80000710:	0207d263          	bgez	a5,80000734 <handle_trap+0x40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:199 (discriminator 1)
80000714:	fec42703          	lw	a4,-20(s0)
80000718:	800007b7          	lui	a5,0x80000
8000071c:	fff7c793          	not	a5,a5
80000720:	00f77733          	and	a4,a4,a5
80000724:	00b00793          	li	a5,11
80000728:	00f71663          	bne	a4,a5,80000734 <handle_trap+0x40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:201
    {
        handle_m_ext_interrupt();
8000072c:	f21ff0ef          	jal	ra,8000064c <handle_m_ext_interrupt>
80000730:	0780006f          	j	800007a8 <handle_trap+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:203
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
80000734:	fec42783          	lw	a5,-20(s0)
80000738:	0207d263          	bgez	a5,8000075c <handle_trap+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:203 (discriminator 1)
8000073c:	fec42703          	lw	a4,-20(s0)
80000740:	800007b7          	lui	a5,0x80000
80000744:	fff7c793          	not	a5,a5
80000748:	00f77733          	and	a4,a4,a5
8000074c:	00700793          	li	a5,7
80000750:	00f71663          	bne	a4,a5,8000075c <handle_trap+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:205
    {
        handle_m_timer_interrupt();
80000754:	e49ff0ef          	jal	ra,8000059c <handle_m_timer_interrupt>
80000758:	0500006f          	j	800007a8 <handle_trap+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:207
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
8000075c:	fec42783          	lw	a5,-20(s0)
80000760:	0207d263          	bgez	a5,80000784 <handle_trap+0x90>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:207 (discriminator 1)
80000764:	fec42703          	lw	a4,-20(s0)
80000768:	800007b7          	lui	a5,0x80000
8000076c:	fff7c793          	not	a5,a5
80000770:	00f77733          	and	a4,a4,a5
80000774:	00300793          	li	a5,3
80000778:	00f71663          	bne	a4,a5,80000784 <handle_trap+0x90>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:209
    {
        handle_m_soft_interrupt();
8000077c:	f45ff0ef          	jal	ra,800006c0 <handle_m_soft_interrupt>
80000780:	0280006f          	j	800007a8 <handle_trap+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:213
    }
    else
    {
        write(1, "trap\n", 5);
80000784:	00500613          	li	a2,5
80000788:	8000d7b7          	lui	a5,0x8000d
8000078c:	e6878593          	addi	a1,a5,-408 # 8000ce68 <__stack_top+0xfffce868>
80000790:	00100513          	li	a0,1
80000794:	59c0a0ef          	jal	ra,8000ad30 <write>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:214
        _exit(1 + mcause);
80000798:	fec42783          	lw	a5,-20(s0)
8000079c:	00178793          	addi	a5,a5,1
800007a0:	00078513          	mv	a0,a5
800007a4:	4a0000ef          	jal	ra,80000c44 <_exit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:216
    }
    return epc;
800007a8:	fe842783          	lw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal.c:217
}
800007ac:	00078513          	mv	a0,a5
800007b0:	01c12083          	lw	ra,28(sp)
800007b4:	01812403          	lw	s0,24(sp)
800007b8:	02010113          	addi	sp,sp,32
800007bc:	00008067          	ret
800007c0:	0000                	unimp
	...

800007c4 <Invalid_IRQHandler>:
Invalid_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
800007c4:	ff010113          	addi	sp,sp,-16
800007c8:	00812623          	sw	s0,12(sp)
800007cc:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:38
    return(0);
800007d0:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:39
}
800007d4:	00078513          	mv	a0,a5
800007d8:	00c12403          	lw	s0,12(sp)
800007dc:	01010113          	addi	sp,sp,16
800007e0:	00008067          	ret
800007e4:	0000                	unimp
	...

800007e8 <External_1_IRQHandler>:
External_1_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
800007e8:	ff010113          	addi	sp,sp,-16
800007ec:	00812623          	sw	s0,12(sp)
800007f0:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:43
    return(0);
800007f4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:44
}
800007f8:	00078513          	mv	a0,a5
800007fc:	00c12403          	lw	s0,12(sp)
80000800:	01010113          	addi	sp,sp,16
80000804:	00008067          	ret
80000808:	0000                	unimp
	...

8000080c <External_2_IRQHandler>:
External_2_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:47

__attribute__((weak))  uint8_t External_2_IRQHandler(void)
{
8000080c:	ff010113          	addi	sp,sp,-16
80000810:	00812623          	sw	s0,12(sp)
80000814:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:48
    return(0);
80000818:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:49
}
8000081c:	00078513          	mv	a0,a5
80000820:	00c12403          	lw	s0,12(sp)
80000824:	01010113          	addi	sp,sp,16
80000828:	00008067          	ret
8000082c:	0000                	unimp
	...

80000830 <External_3_IRQHandler>:
External_3_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:52

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000830:	ff010113          	addi	sp,sp,-16
80000834:	00812623          	sw	s0,12(sp)
80000838:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:53
    return(0);
8000083c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:54
}
80000840:	00078513          	mv	a0,a5
80000844:	00c12403          	lw	s0,12(sp)
80000848:	01010113          	addi	sp,sp,16
8000084c:	00008067          	ret
80000850:	0000                	unimp
	...

80000854 <External_4_IRQHandler>:
External_4_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000854:	ff010113          	addi	sp,sp,-16
80000858:	00812623          	sw	s0,12(sp)
8000085c:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000860:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:59
}
80000864:	00078513          	mv	a0,a5
80000868:	00c12403          	lw	s0,12(sp)
8000086c:	01010113          	addi	sp,sp,16
80000870:	00008067          	ret
80000874:	0000                	unimp
	...

80000878 <External_5_IRQHandler>:
External_5_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000878:	ff010113          	addi	sp,sp,-16
8000087c:	00812623          	sw	s0,12(sp)
80000880:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:63
    return(0);
80000884:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:64
}
80000888:	00078513          	mv	a0,a5
8000088c:	00c12403          	lw	s0,12(sp)
80000890:	01010113          	addi	sp,sp,16
80000894:	00008067          	ret
80000898:	0000                	unimp
	...

8000089c <External_6_IRQHandler>:
External_6_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
8000089c:	ff010113          	addi	sp,sp,-16
800008a0:	00812623          	sw	s0,12(sp)
800008a4:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:68
    return(0);
800008a8:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:69
}
800008ac:	00078513          	mv	a0,a5
800008b0:	00c12403          	lw	s0,12(sp)
800008b4:	01010113          	addi	sp,sp,16
800008b8:	00008067          	ret
800008bc:	0000                	unimp
	...

800008c0 <External_7_IRQHandler>:
External_7_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800008c0:	ff010113          	addi	sp,sp,-16
800008c4:	00812623          	sw	s0,12(sp)
800008c8:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:73
    return(0);
800008cc:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:74
}
800008d0:	00078513          	mv	a0,a5
800008d4:	00c12403          	lw	s0,12(sp)
800008d8:	01010113          	addi	sp,sp,16
800008dc:	00008067          	ret
800008e0:	0000                	unimp
	...

800008e4 <External_8_IRQHandler>:
External_8_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800008e4:	ff010113          	addi	sp,sp,-16
800008e8:	00812623          	sw	s0,12(sp)
800008ec:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:78
    return(0);
800008f0:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:79
}
800008f4:	00078513          	mv	a0,a5
800008f8:	00c12403          	lw	s0,12(sp)
800008fc:	01010113          	addi	sp,sp,16
80000900:	00008067          	ret
80000904:	0000                	unimp
	...

80000908 <External_9_IRQHandler>:
External_9_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000908:	ff010113          	addi	sp,sp,-16
8000090c:	00812623          	sw	s0,12(sp)
80000910:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000914:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:84
}
80000918:	00078513          	mv	a0,a5
8000091c:	00c12403          	lw	s0,12(sp)
80000920:	01010113          	addi	sp,sp,16
80000924:	00008067          	ret
80000928:	0000                	unimp
	...

8000092c <External_10_IRQHandler>:
External_10_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
8000092c:	ff010113          	addi	sp,sp,-16
80000930:	00812623          	sw	s0,12(sp)
80000934:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000938:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:89
}
8000093c:	00078513          	mv	a0,a5
80000940:	00c12403          	lw	s0,12(sp)
80000944:	01010113          	addi	sp,sp,16
80000948:	00008067          	ret
8000094c:	0000                	unimp
	...

80000950 <External_11_IRQHandler>:
External_11_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000950:	ff010113          	addi	sp,sp,-16
80000954:	00812623          	sw	s0,12(sp)
80000958:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:93
    return(0);
8000095c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:94
}
80000960:	00078513          	mv	a0,a5
80000964:	00c12403          	lw	s0,12(sp)
80000968:	01010113          	addi	sp,sp,16
8000096c:	00008067          	ret
80000970:	0000                	unimp
	...

80000974 <External_12_IRQHandler>:
External_12_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000974:	ff010113          	addi	sp,sp,-16
80000978:	00812623          	sw	s0,12(sp)
8000097c:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000980:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:99
}
80000984:	00078513          	mv	a0,a5
80000988:	00c12403          	lw	s0,12(sp)
8000098c:	01010113          	addi	sp,sp,16
80000990:	00008067          	ret
80000994:	0000                	unimp
	...

80000998 <External_13_IRQHandler>:
External_13_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000998:	ff010113          	addi	sp,sp,-16
8000099c:	00812623          	sw	s0,12(sp)
800009a0:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:103
    return(0);
800009a4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:104
}
800009a8:	00078513          	mv	a0,a5
800009ac:	00c12403          	lw	s0,12(sp)
800009b0:	01010113          	addi	sp,sp,16
800009b4:	00008067          	ret
800009b8:	0000                	unimp
	...

800009bc <External_14_IRQHandler>:
External_14_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
800009bc:	ff010113          	addi	sp,sp,-16
800009c0:	00812623          	sw	s0,12(sp)
800009c4:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:108
    return(0);
800009c8:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:109
}
800009cc:	00078513          	mv	a0,a5
800009d0:	00c12403          	lw	s0,12(sp)
800009d4:	01010113          	addi	sp,sp,16
800009d8:	00008067          	ret
800009dc:	0000                	unimp
	...

800009e0 <External_15_IRQHandler>:
External_15_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
800009e0:	ff010113          	addi	sp,sp,-16
800009e4:	00812623          	sw	s0,12(sp)
800009e8:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:113
    return(0);
800009ec:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:114
}
800009f0:	00078513          	mv	a0,a5
800009f4:	00c12403          	lw	s0,12(sp)
800009f8:	01010113          	addi	sp,sp,16
800009fc:	00008067          	ret
80000a00:	0000                	unimp
	...

80000a04 <External_16_IRQHandler>:
External_16_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000a04:	ff010113          	addi	sp,sp,-16
80000a08:	00812623          	sw	s0,12(sp)
80000a0c:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000a10:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:119
}
80000a14:	00078513          	mv	a0,a5
80000a18:	00c12403          	lw	s0,12(sp)
80000a1c:	01010113          	addi	sp,sp,16
80000a20:	00008067          	ret
80000a24:	0000                	unimp
	...

80000a28 <External_17_IRQHandler>:
External_17_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000a28:	ff010113          	addi	sp,sp,-16
80000a2c:	00812623          	sw	s0,12(sp)
80000a30:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000a34:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:124
}
80000a38:	00078513          	mv	a0,a5
80000a3c:	00c12403          	lw	s0,12(sp)
80000a40:	01010113          	addi	sp,sp,16
80000a44:	00008067          	ret
80000a48:	0000                	unimp
	...

80000a4c <External_18_IRQHandler>:
External_18_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000a4c:	ff010113          	addi	sp,sp,-16
80000a50:	00812623          	sw	s0,12(sp)
80000a54:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000a58:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:129
}
80000a5c:	00078513          	mv	a0,a5
80000a60:	00c12403          	lw	s0,12(sp)
80000a64:	01010113          	addi	sp,sp,16
80000a68:	00008067          	ret
80000a6c:	0000                	unimp
	...

80000a70 <External_19_IRQHandler>:
External_19_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000a70:	ff010113          	addi	sp,sp,-16
80000a74:	00812623          	sw	s0,12(sp)
80000a78:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000a7c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:134
}
80000a80:	00078513          	mv	a0,a5
80000a84:	00c12403          	lw	s0,12(sp)
80000a88:	01010113          	addi	sp,sp,16
80000a8c:	00008067          	ret
80000a90:	0000                	unimp
	...

80000a94 <External_20_IRQHandler>:
External_20_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000a94:	ff010113          	addi	sp,sp,-16
80000a98:	00812623          	sw	s0,12(sp)
80000a9c:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000aa0:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:139
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	00c12403          	lw	s0,12(sp)
80000aac:	01010113          	addi	sp,sp,16
80000ab0:	00008067          	ret
80000ab4:	0000                	unimp
	...

80000ab8 <External_21_IRQHandler>:
External_21_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000ab8:	ff010113          	addi	sp,sp,-16
80000abc:	00812623          	sw	s0,12(sp)
80000ac0:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000ac4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:144
}
80000ac8:	00078513          	mv	a0,a5
80000acc:	00c12403          	lw	s0,12(sp)
80000ad0:	01010113          	addi	sp,sp,16
80000ad4:	00008067          	ret
80000ad8:	0000                	unimp
	...

80000adc <External_22_IRQHandler>:
External_22_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000adc:	ff010113          	addi	sp,sp,-16
80000ae0:	00812623          	sw	s0,12(sp)
80000ae4:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000ae8:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:149
}
80000aec:	00078513          	mv	a0,a5
80000af0:	00c12403          	lw	s0,12(sp)
80000af4:	01010113          	addi	sp,sp,16
80000af8:	00008067          	ret
80000afc:	0000                	unimp
	...

80000b00 <External_23_IRQHandler>:
External_23_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000b00:	ff010113          	addi	sp,sp,-16
80000b04:	00812623          	sw	s0,12(sp)
80000b08:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000b0c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:154
}
80000b10:	00078513          	mv	a0,a5
80000b14:	00c12403          	lw	s0,12(sp)
80000b18:	01010113          	addi	sp,sp,16
80000b1c:	00008067          	ret
80000b20:	0000                	unimp
	...

80000b24 <External_24_IRQHandler>:
External_24_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000b24:	ff010113          	addi	sp,sp,-16
80000b28:	00812623          	sw	s0,12(sp)
80000b2c:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000b30:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:159
}
80000b34:	00078513          	mv	a0,a5
80000b38:	00c12403          	lw	s0,12(sp)
80000b3c:	01010113          	addi	sp,sp,16
80000b40:	00008067          	ret
80000b44:	0000                	unimp
	...

80000b48 <External_25_IRQHandler>:
External_25_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000b48:	ff010113          	addi	sp,sp,-16
80000b4c:	00812623          	sw	s0,12(sp)
80000b50:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000b54:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:164
}
80000b58:	00078513          	mv	a0,a5
80000b5c:	00c12403          	lw	s0,12(sp)
80000b60:	01010113          	addi	sp,sp,16
80000b64:	00008067          	ret
80000b68:	0000                	unimp
	...

80000b6c <External_26_IRQHandler>:
External_26_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000b6c:	ff010113          	addi	sp,sp,-16
80000b70:	00812623          	sw	s0,12(sp)
80000b74:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000b78:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:169
}
80000b7c:	00078513          	mv	a0,a5
80000b80:	00c12403          	lw	s0,12(sp)
80000b84:	01010113          	addi	sp,sp,16
80000b88:	00008067          	ret
80000b8c:	0000                	unimp
	...

80000b90 <External_27_IRQHandler>:
External_27_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000b90:	ff010113          	addi	sp,sp,-16
80000b94:	00812623          	sw	s0,12(sp)
80000b98:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000b9c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:174
}
80000ba0:	00078513          	mv	a0,a5
80000ba4:	00c12403          	lw	s0,12(sp)
80000ba8:	01010113          	addi	sp,sp,16
80000bac:	00008067          	ret
80000bb0:	0000                	unimp
	...

80000bb4 <External_28_IRQHandler>:
External_28_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000bb4:	ff010113          	addi	sp,sp,-16
80000bb8:	00812623          	sw	s0,12(sp)
80000bbc:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000bc0:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:179
}
80000bc4:	00078513          	mv	a0,a5
80000bc8:	00c12403          	lw	s0,12(sp)
80000bcc:	01010113          	addi	sp,sp,16
80000bd0:	00008067          	ret
80000bd4:	0000                	unimp
	...

80000bd8 <External_29_IRQHandler>:
External_29_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000bd8:	ff010113          	addi	sp,sp,-16
80000bdc:	00812623          	sw	s0,12(sp)
80000be0:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000be4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:184
}
80000be8:	00078513          	mv	a0,a5
80000bec:	00c12403          	lw	s0,12(sp)
80000bf0:	01010113          	addi	sp,sp,16
80000bf4:	00008067          	ret
80000bf8:	0000                	unimp
	...

80000bfc <External_30_IRQHandler>:
External_30_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000bfc:	ff010113          	addi	sp,sp,-16
80000c00:	00812623          	sw	s0,12(sp)
80000c04:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c08:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:189
}
80000c0c:	00078513          	mv	a0,a5
80000c10:	00c12403          	lw	s0,12(sp)
80000c14:	01010113          	addi	sp,sp,16
80000c18:	00008067          	ret
80000c1c:	0000                	unimp
	...

80000c20 <External_31_IRQHandler>:
External_31_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000c20:	ff010113          	addi	sp,sp,-16
80000c24:	00812623          	sw	s0,12(sp)
80000c28:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000c2c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/riscv_hal_stubs.c:194
}
80000c30:	00078513          	mv	a0,a5
80000c34:	00c12403          	lw	s0,12(sp)
80000c38:	01010113          	addi	sp,sp,16
80000c3c:	00008067          	ret
80000c40:	0000                	unimp
	...

80000c44 <_exit>:
_exit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/syscall.c:223
}

int _wait(int* status)
{
    return stub(ECHILD);
}
80000c44:	fe010113          	addi	sp,sp,-32
80000c48:	00812e23          	sw	s0,28(sp)
80000c4c:	02010413          	addi	s0,sp,32
80000c50:	fea42623          	sw	a0,-20(s0)
80000c54:	0000006f          	j	80000c54 <_exit+0x10>
80000c58:	0000                	unimp
	...

80000c5c <_sbrk>:
_sbrk():
80000c5c:	fe010113          	addi	sp,sp,-32
80000c60:	00812e23          	sw	s0,28(sp)
80000c64:	02010413          	addi	s0,sp,32
80000c68:	fea42623          	sw	a0,-20(s0)
80000c6c:	8000e7b7          	lui	a5,0x8000e
80000c70:	b307a703          	lw	a4,-1232(a5) # 8000db30 <__stack_top+0xfffcf530>
80000c74:	fec42783          	lw	a5,-20(s0)
80000c78:	00f70733          	add	a4,a4,a5
80000c7c:	8001e7b7          	lui	a5,0x8001e
80000c80:	60078793          	addi	a5,a5,1536 # 8001e600 <__stack_top+0xfffe0000>
80000c84:	02f76063          	bltu	a4,a5,80000ca4 <_sbrk+0x48>
80000c88:	8000e7b7          	lui	a5,0x8000e
80000c8c:	b307a703          	lw	a4,-1232(a5) # 8000db30 <__stack_top+0xfffcf530>
80000c90:	fec42783          	lw	a5,-20(s0)
80000c94:	00f70733          	add	a4,a4,a5
80000c98:	8002e7b7          	lui	a5,0x8002e
80000c9c:	60078793          	addi	a5,a5,1536 # 8002e600 <__stack_top+0xffff0000>
80000ca0:	00e7f663          	bleu	a4,a5,80000cac <_sbrk+0x50>
80000ca4:	fff00793          	li	a5,-1
80000ca8:	0300006f          	j	80000cd8 <_sbrk+0x7c>
80000cac:	8000e7b7          	lui	a5,0x8000e
80000cb0:	b307a703          	lw	a4,-1232(a5) # 8000db30 <__stack_top+0xfffcf530>
80000cb4:	fec42783          	lw	a5,-20(s0)
80000cb8:	00f70733          	add	a4,a4,a5
80000cbc:	8000e7b7          	lui	a5,0x8000e
80000cc0:	b2e7a823          	sw	a4,-1232(a5) # 8000db30 <__stack_top+0xfffcf530>
80000cc4:	8000e7b7          	lui	a5,0x8000e
80000cc8:	b307a703          	lw	a4,-1232(a5) # 8000db30 <__stack_top+0xfffcf530>
80000ccc:	fec42783          	lw	a5,-20(s0)
80000cd0:	40f007b3          	neg	a5,a5
80000cd4:	00f707b3          	add	a5,a4,a5
80000cd8:	00078513          	mv	a0,a5
80000cdc:	01c12403          	lw	s0,28(sp)
80000ce0:	02010113          	addi	sp,sp,32
80000ce4:	00008067          	ret
80000ce8:	0000                	unimp
	...

80000cec <_isatty>:
_isatty():
80000cec:	fe010113          	addi	sp,sp,-32
80000cf0:	00812e23          	sw	s0,28(sp)
80000cf4:	02010413          	addi	s0,sp,32
80000cf8:	fea42623          	sw	a0,-20(s0)
80000cfc:	fec42703          	lw	a4,-20(s0)
80000d00:	00100793          	li	a5,1
80000d04:	00f70863          	beq	a4,a5,80000d14 <_isatty+0x28>
80000d08:	fec42703          	lw	a4,-20(s0)
80000d0c:	00200793          	li	a5,2
80000d10:	00f71663          	bne	a4,a5,80000d1c <_isatty+0x30>
80000d14:	00100793          	li	a5,1
80000d18:	0100006f          	j	80000d28 <_isatty+0x3c>
80000d1c:	00900713          	li	a4,9
80000d20:	e8e1a823          	sw	a4,-368(gp) # 8000e1c0 <errno>
80000d24:	00000793          	li	a5,0
80000d28:	00078513          	mv	a0,a5
80000d2c:	01c12403          	lw	s0,28(sp)
80000d30:	02010113          	addi	sp,sp,32
80000d34:	00008067          	ret
80000d38:	0000                	unimp
	...

80000d3c <stub>:
stub():
80000d3c:	fe010113          	addi	sp,sp,-32
80000d40:	00812e23          	sw	s0,28(sp)
80000d44:	02010413          	addi	s0,sp,32
80000d48:	fea42623          	sw	a0,-20(s0)
80000d4c:	fec42703          	lw	a4,-20(s0)
80000d50:	e8e1a823          	sw	a4,-368(gp) # 8000e1c0 <errno>
80000d54:	fff00793          	li	a5,-1
80000d58:	00078513          	mv	a0,a5
80000d5c:	01c12403          	lw	s0,28(sp)
80000d60:	02010113          	addi	sp,sp,32
80000d64:	00008067          	ret
80000d68:	0000                	unimp
	...

80000d6c <_close>:
_close():
80000d6c:	fe010113          	addi	sp,sp,-32
80000d70:	00112e23          	sw	ra,28(sp)
80000d74:	00812c23          	sw	s0,24(sp)
80000d78:	02010413          	addi	s0,sp,32
80000d7c:	fea42623          	sw	a0,-20(s0)
80000d80:	00900513          	li	a0,9
80000d84:	fb9ff0ef          	jal	ra,80000d3c <stub>
80000d88:	00050793          	mv	a5,a0
80000d8c:	00078513          	mv	a0,a5
80000d90:	01c12083          	lw	ra,28(sp)
80000d94:	01812403          	lw	s0,24(sp)
80000d98:	02010113          	addi	sp,sp,32
80000d9c:	00008067          	ret
80000da0:	0000                	unimp
	...

80000da4 <_fstat>:
_fstat():
80000da4:	fe010113          	addi	sp,sp,-32
80000da8:	00112e23          	sw	ra,28(sp)
80000dac:	00812c23          	sw	s0,24(sp)
80000db0:	02010413          	addi	s0,sp,32
80000db4:	fea42623          	sw	a0,-20(s0)
80000db8:	feb42423          	sw	a1,-24(s0)
80000dbc:	fec42503          	lw	a0,-20(s0)
80000dc0:	769090ef          	jal	ra,8000ad28 <isatty>
80000dc4:	00050793          	mv	a5,a0
80000dc8:	00078c63          	beqz	a5,80000de0 <_fstat+0x3c>
80000dcc:	fe842783          	lw	a5,-24(s0)
80000dd0:	00002737          	lui	a4,0x2
80000dd4:	00e7a223          	sw	a4,4(a5)
80000dd8:	00000793          	li	a5,0
80000ddc:	0100006f          	j	80000dec <_fstat+0x48>
80000de0:	00900513          	li	a0,9
80000de4:	f59ff0ef          	jal	ra,80000d3c <stub>
80000de8:	00050793          	mv	a5,a0
80000dec:	00078513          	mv	a0,a5
80000df0:	01c12083          	lw	ra,28(sp)
80000df4:	01812403          	lw	s0,24(sp)
80000df8:	02010113          	addi	sp,sp,32
80000dfc:	00008067          	ret
80000e00:	0000                	unimp
	...

80000e04 <_lseek>:
_lseek():
80000e04:	fe010113          	addi	sp,sp,-32
80000e08:	00112e23          	sw	ra,28(sp)
80000e0c:	00812c23          	sw	s0,24(sp)
80000e10:	02010413          	addi	s0,sp,32
80000e14:	fea42623          	sw	a0,-20(s0)
80000e18:	feb42423          	sw	a1,-24(s0)
80000e1c:	fec42223          	sw	a2,-28(s0)
80000e20:	fec42503          	lw	a0,-20(s0)
80000e24:	ec9ff0ef          	jal	ra,80000cec <_isatty>
80000e28:	00050793          	mv	a5,a0
80000e2c:	00078663          	beqz	a5,80000e38 <_lseek+0x34>
80000e30:	00000793          	li	a5,0
80000e34:	0100006f          	j	80000e44 <_lseek+0x40>
80000e38:	00900513          	li	a0,9
80000e3c:	f01ff0ef          	jal	ra,80000d3c <stub>
80000e40:	00050793          	mv	a5,a0
80000e44:	00078513          	mv	a0,a5
80000e48:	01c12083          	lw	ra,28(sp)
80000e4c:	01812403          	lw	s0,24(sp)
80000e50:	02010113          	addi	sp,sp,32
80000e54:	00008067          	ret
80000e58:	0000                	unimp
	...

80000e5c <_read>:
_read():
80000e5c:	fe010113          	addi	sp,sp,-32
80000e60:	00112e23          	sw	ra,28(sp)
80000e64:	00812c23          	sw	s0,24(sp)
80000e68:	02010413          	addi	s0,sp,32
80000e6c:	fea42623          	sw	a0,-20(s0)
80000e70:	feb42423          	sw	a1,-24(s0)
80000e74:	fec42223          	sw	a2,-28(s0)
80000e78:	00900513          	li	a0,9
80000e7c:	ec1ff0ef          	jal	ra,80000d3c <stub>
80000e80:	00050793          	mv	a5,a0
80000e84:	00078513          	mv	a0,a5
80000e88:	01c12083          	lw	ra,28(sp)
80000e8c:	01812403          	lw	s0,24(sp)
80000e90:	02010113          	addi	sp,sp,32
80000e94:	00008067          	ret
80000e98:	0000                	unimp
	...

80000e9c <_write>:
_write():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/syscall.c:226

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e9c:	fe010113          	addi	sp,sp,-32
80000ea0:	00112e23          	sw	ra,28(sp)
80000ea4:	00812c23          	sw	s0,24(sp)
80000ea8:	02010413          	addi	s0,sp,32
80000eac:	fea42623          	sw	a0,-20(s0)
80000eb0:	feb42423          	sw	a1,-24(s0)
80000eb4:	fec42223          	sw	a2,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/syscall.c:261
    }
    return len;
  }
#endif

  return stub(EBADF);
80000eb8:	00900513          	li	a0,9
80000ebc:	e81ff0ef          	jal	ra,80000d3c <stub>
80000ec0:	00050793          	mv	a5,a0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/riscv_hal/syscall.c:262
}
80000ec4:	00078513          	mv	a0,a5
80000ec8:	01c12083          	lw	ra,28(sp)
80000ecc:	01812403          	lw	s0,24(sp)
80000ed0:	02010113          	addi	sp,sp,32
80000ed4:	00008067          	ret
80000ed8:	0000                	unimp
	...

80000edc <HW_set_32bit_reg>:
HW_set_32bit_reg():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000edc:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:37
    ret
80000ee0:	00008067          	ret

80000ee4 <HW_get_32bit_reg>:
HW_get_32bit_reg():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000ee4:	00052503          	lw	a0,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:48
    ret
80000ee8:	00008067          	ret

80000eec <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000eec:	00068e13          	mv	t3,a3
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:61
    sll t3, t3, a1
80000ef0:	00be1e33          	sll	t3,t3,a1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:62
    and  t3, t3, a2
80000ef4:	00ce7e33          	and	t3,t3,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000ef8:	00052303          	lw	t1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:64
    mv t2, a2
80000efc:	00060393          	mv	t2,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:65
    not t2, t2
80000f00:	fff3c393          	not	t2,t2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:66
    and t1, t1, t2
80000f04:	00737333          	and	t1,t1,t2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:67
    or t1, t1, t3
80000f08:	01c36333          	or	t1,t1,t3
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000f0c:	00652023          	sw	t1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:69
    ret
80000f10:	00008067          	ret

80000f14 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000f14:	00052503          	lw	a0,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:84
    and a0, a0, a2
80000f18:	00c57533          	and	a0,a0,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:85
    srl a0, a0, a1
80000f1c:	00b55533          	srl	a0,a0,a1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:86
    ret
80000f20:	00008067          	ret

80000f24 <HW_set_16bit_reg>:
HW_set_16bit_reg():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000f24:	00b51023          	sh	a1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:97
    ret
80000f28:	00008067          	ret

80000f2c <HW_get_16bit_reg>:
HW_get_16bit_reg():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000f2c:	00051503          	lh	a0,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:108
    ret
80000f30:	00008067          	ret

80000f34 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000f34:	00068e13          	mv	t3,a3
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:122
    sll t3, t3, a1
80000f38:	00be1e33          	sll	t3,t3,a1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:123
    and  t3, t3, a2
80000f3c:	00ce7e33          	and	t3,t3,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000f40:	00051303          	lh	t1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:125
    mv t2, a2
80000f44:	00060393          	mv	t2,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:126
    not t2, t2
80000f48:	fff3c393          	not	t2,t2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:127
    and t1, t1, t2
80000f4c:	00737333          	and	t1,t1,t2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:128
    or t1, t1, t3
80000f50:	01c36333          	or	t1,t1,t3
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000f54:	00651023          	sh	t1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:130
    ret
80000f58:	00008067          	ret

80000f5c <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000f5c:	00051503          	lh	a0,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:145
    and a0, a0, a2
80000f60:	00c57533          	and	a0,a0,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:146
    srl a0, a0, a1
80000f64:	00b55533          	srl	a0,a0,a1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:147
    ret
80000f68:	00008067          	ret

80000f6c <HW_set_8bit_reg>:
HW_set_8bit_reg():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000f6c:	00b50023          	sb	a1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:158
    ret
80000f70:	00008067          	ret

80000f74 <HW_get_8bit_reg>:
HW_get_8bit_reg():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000f74:	00050503          	lb	a0,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:169
    ret
80000f78:	00008067          	ret

80000f7c <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000f7c:	00068e13          	mv	t3,a3
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:182
    sll t3, t3, a1
80000f80:	00be1e33          	sll	t3,t3,a1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:183
    and  t3, t3, a2
80000f84:	00ce7e33          	and	t3,t3,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000f88:	00050303          	lb	t1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:185
    mv t2, a2
80000f8c:	00060393          	mv	t2,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:186
    not t2, t2
80000f90:	fff3c393          	not	t2,t2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:187
    and t1, t1, t2
80000f94:	00737333          	and	t1,t1,t2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:188
    or t1, t1, t3
80000f98:	01c36333          	or	t1,t1,t3
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000f9c:	00650023          	sb	t1,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:190
    ret
80000fa0:	00008067          	ret

80000fa4 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000fa4:	00050503          	lb	a0,0(a0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:205
    and a0, a0, a2
80000fa8:	00c57533          	and	a0,a0,a2
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:206
    srl a0, a0, a1
80000fac:	00b55533          	srl	a0,a0,a1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/hal/hw_reg_access.S:207
    ret
80000fb0:	00008067          	ret

80000fb4 <UART_init>:
UART_init():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:45
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80000fb4:	fd010113          	addi	sp,sp,-48
80000fb8:	02112623          	sw	ra,44(sp)
80000fbc:	02812423          	sw	s0,40(sp)
80000fc0:	03010413          	addi	s0,sp,48
80000fc4:	fca42e23          	sw	a0,-36(s0)
80000fc8:	fcb42c23          	sw	a1,-40(s0)
80000fcc:	00060793          	mv	a5,a2
80000fd0:	00068713          	mv	a4,a3
80000fd4:	fcf41b23          	sh	a5,-42(s0)
80000fd8:	00070793          	mv	a5,a4
80000fdc:	fcf40aa3          	sb	a5,-43(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:52
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80000fe0:	fdc42783          	lw	a5,-36(s0)
80000fe4:	0c078a63          	beqz	a5,800010b8 <UART_init+0x104>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:52 (discriminator 1)
80000fe8:	fd544703          	lbu	a4,-43(s0)
80000fec:	00700793          	li	a5,7
80000ff0:	0ce7e463          	bltu	a5,a4,800010b8 <UART_init+0x104>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:53
        ( line_config <= MAX_LINE_CONFIG ) &&
80000ff4:	fd645703          	lhu	a4,-42(s0)
80000ff8:	000027b7          	lui	a5,0x2
80000ffc:	0af77e63          	bleu	a5,a4,800010b8 <UART_init+0x104>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:59
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001000:	fd842783          	lw	a5,-40(s0)
80001004:	00878713          	addi	a4,a5,8 # 2008 <OS_TASK_STATUS_NOT_RUNNING+0x1f19>
80001008:	fd645783          	lhu	a5,-42(s0)
8000100c:	0ff7f793          	andi	a5,a5,255
80001010:	00078593          	mv	a1,a5
80001014:	00070513          	mv	a0,a4
80001018:	f55ff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:66
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
8000101c:	fd842783          	lw	a5,-40(s0)
80001020:	00c78693          	addi	a3,a5,12
80001024:	fd544703          	lbu	a4,-43(s0)
80001028:	fd645783          	lhu	a5,-42(s0)
8000102c:	4057d793          	srai	a5,a5,0x5
80001030:	7f87f793          	andi	a5,a5,2040
80001034:	00f767b3          	or	a5,a4,a5
80001038:	00078593          	mv	a1,a5
8000103c:	00068513          	mv	a0,a3
80001040:	f2dff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:70
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80001044:	fdc42783          	lw	a5,-36(s0)
80001048:	fd842703          	lw	a4,-40(s0)
8000104c:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:93
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001050:	fdc42783          	lw	a5,-36(s0)
80001054:	0007a783          	lw	a5,0(a5)
80001058:	01078793          	addi	a5,a5,16
8000105c:	00078513          	mv	a0,a5
80001060:	f15ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
80001064:	00050793          	mv	a5,a0
80001068:	0027f793          	andi	a5,a5,2
8000106c:	fef407a3          	sb	a5,-17(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:95
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001070:	0380006f          	j	800010a8 <UART_init+0xf4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:97
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80001074:	fdc42783          	lw	a5,-36(s0)
80001078:	0007a783          	lw	a5,0(a5)
8000107c:	00478793          	addi	a5,a5,4
80001080:	00078513          	mv	a0,a5
80001084:	ef1ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:98
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001088:	fdc42783          	lw	a5,-36(s0)
8000108c:	0007a783          	lw	a5,0(a5)
80001090:	01078793          	addi	a5,a5,16
80001094:	00078513          	mv	a0,a5
80001098:	eddff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
8000109c:	00050793          	mv	a5,a0
800010a0:	0027f793          	andi	a5,a5,2
800010a4:	fef407a3          	sb	a5,-17(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:95
        while ( rx_full )
800010a8:	fef44783          	lbu	a5,-17(s0)
800010ac:	fc0794e3          	bnez	a5,80001074 <UART_init+0xc0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:105
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
800010b0:	fdc42783          	lw	a5,-36(s0)
800010b4:	00078223          	sb	zero,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:107
    }
}
800010b8:	00000013          	nop
800010bc:	02c12083          	lw	ra,44(sp)
800010c0:	02812403          	lw	s0,40(sp)
800010c4:	03010113          	addi	sp,sp,48
800010c8:	00008067          	ret
800010cc:	0000                	unimp
	...

800010d0 <UART_send>:
UART_send():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:120
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
800010d0:	fd010113          	addi	sp,sp,-48
800010d4:	02112623          	sw	ra,44(sp)
800010d8:	02812423          	sw	s0,40(sp)
800010dc:	03010413          	addi	s0,sp,48
800010e0:	fca42e23          	sw	a0,-36(s0)
800010e4:	fcb42c23          	sw	a1,-40(s0)
800010e8:	fcc42a23          	sw	a2,-44(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:128

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
800010ec:	fdc42783          	lw	a5,-36(s0)
800010f0:	08078063          	beqz	a5,80001170 <UART_send+0xa0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:128 (discriminator 1)
800010f4:	fd842783          	lw	a5,-40(s0)
800010f8:	06078c63          	beqz	a5,80001170 <UART_send+0xa0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:129
        (tx_buffer != NULL_BUFFER)   &&
800010fc:	fd442783          	lw	a5,-44(s0)
80001100:	06078863          	beqz	a5,80001170 <UART_send+0xa0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:132
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001104:	fe042623          	sw	zero,-20(s0)
80001108:	05c0006f          	j	80001164 <UART_send+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:136 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000110c:	fdc42783          	lw	a5,-36(s0)
80001110:	0007a783          	lw	a5,0(a5)
80001114:	01078793          	addi	a5,a5,16
80001118:	00078513          	mv	a0,a5
8000111c:	e59ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
80001120:	00050793          	mv	a5,a0
80001124:	0017f793          	andi	a5,a5,1
80001128:	fef405a3          	sb	a5,-21(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:138 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
8000112c:	feb44783          	lbu	a5,-21(s0)
80001130:	fc078ee3          	beqz	a5,8000110c <UART_send+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:140 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001134:	fdc42783          	lw	a5,-36(s0)
80001138:	0007a683          	lw	a3,0(a5)
8000113c:	fd842703          	lw	a4,-40(s0)
80001140:	fec42783          	lw	a5,-20(s0)
80001144:	00f707b3          	add	a5,a4,a5
80001148:	0007c783          	lbu	a5,0(a5)
8000114c:	00078593          	mv	a1,a5
80001150:	00068513          	mv	a0,a3
80001154:	e19ff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:132 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001158:	fec42783          	lw	a5,-20(s0)
8000115c:	00178793          	addi	a5,a5,1
80001160:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:132 (discriminator 1)
80001164:	fec42703          	lw	a4,-20(s0)
80001168:	fd442783          	lw	a5,-44(s0)
8000116c:	faf760e3          	bltu	a4,a5,8000110c <UART_send+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreUARTapb/core_uart_apb.c:144
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001170:	00000013          	nop
80001174:	02c12083          	lw	ra,44(sp)
80001178:	02812403          	lw	s0,40(sp)
8000117c:	03010113          	addi	sp,sp,48
80001180:	00008067          	ret
80001184:	0000                	unimp
	...

80001188 <GPIO_init>:
GPIO_init():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:220
            HAL_ASSERT(0);
            break;
    }
    
    return gpio_out;
}
80001188:	fd010113          	addi	sp,sp,-48
8000118c:	02112623          	sw	ra,44(sp)
80001190:	02812423          	sw	s0,40(sp)
80001194:	03010413          	addi	s0,sp,48
80001198:	fca42e23          	sw	a0,-36(s0)
8000119c:	fcb42c23          	sw	a1,-40(s0)
800011a0:	fcc42a23          	sw	a2,-44(s0)
800011a4:	fe0407a3          	sb	zero,-17(s0)
800011a8:	fd842783          	lw	a5,-40(s0)
800011ac:	fef42423          	sw	a5,-24(s0)
800011b0:	fdc42783          	lw	a5,-36(s0)
800011b4:	fd842703          	lw	a4,-40(s0)
800011b8:	00e7a023          	sw	a4,0(a5)
800011bc:	fdc42783          	lw	a5,-36(s0)
800011c0:	fd442703          	lw	a4,-44(s0)
800011c4:	00e7a223          	sw	a4,4(a5)
800011c8:	fe0407a3          	sb	zero,-17(s0)
800011cc:	fd842783          	lw	a5,-40(s0)
800011d0:	fef42423          	sw	a5,-24(s0)
800011d4:	0280006f          	j	800011fc <GPIO_init+0x74>
800011d8:	00000593          	li	a1,0
800011dc:	fe842503          	lw	a0,-24(s0)
800011e0:	d8dff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
800011e4:	fe842783          	lw	a5,-24(s0)
800011e8:	00478793          	addi	a5,a5,4
800011ec:	fef42423          	sw	a5,-24(s0)
800011f0:	fef44783          	lbu	a5,-17(s0)
800011f4:	00178793          	addi	a5,a5,1
800011f8:	fef407a3          	sb	a5,-17(s0)
800011fc:	fef44703          	lbu	a4,-17(s0)
80001200:	01f00793          	li	a5,31
80001204:	fce7fae3          	bleu	a4,a5,800011d8 <GPIO_init+0x50>
80001208:	fdc42783          	lw	a5,-36(s0)
8000120c:	0047a783          	lw	a5,4(a5)
80001210:	00100713          	li	a4,1
80001214:	02e78a63          	beq	a5,a4,80001248 <GPIO_init+0xc0>
80001218:	00100713          	li	a4,1
8000121c:	06e7e463          	bltu	a5,a4,80001284 <GPIO_init+0xfc>
80001220:	00200713          	li	a4,2
80001224:	00e78463          	beq	a5,a4,8000122c <GPIO_init+0xa4>
80001228:	0c00006f          	j	800012e8 <GPIO_init+0x160>
8000122c:	fdc42783          	lw	a5,-36(s0)
80001230:	0007a783          	lw	a5,0(a5)
80001234:	08078793          	addi	a5,a5,128
80001238:	fff00593          	li	a1,-1
8000123c:	00078513          	mv	a0,a5
80001240:	c9dff0ef          	jal	ra,80000edc <HW_set_32bit_reg>
80001244:	0a40006f          	j	800012e8 <GPIO_init+0x160>
80001248:	fdc42783          	lw	a5,-36(s0)
8000124c:	0007a783          	lw	a5,0(a5)
80001250:	08078713          	addi	a4,a5,128
80001254:	000107b7          	lui	a5,0x10
80001258:	fff78593          	addi	a1,a5,-1 # ffff <OS_TASK_STATUS_NOT_RUNNING+0xff10>
8000125c:	00070513          	mv	a0,a4
80001260:	cc5ff0ef          	jal	ra,80000f24 <HW_set_16bit_reg>
80001264:	fdc42783          	lw	a5,-36(s0)
80001268:	0007a783          	lw	a5,0(a5)
8000126c:	08478713          	addi	a4,a5,132
80001270:	000107b7          	lui	a5,0x10
80001274:	fff78593          	addi	a1,a5,-1 # ffff <OS_TASK_STATUS_NOT_RUNNING+0xff10>
80001278:	00070513          	mv	a0,a4
8000127c:	ca9ff0ef          	jal	ra,80000f24 <HW_set_16bit_reg>
80001280:	0680006f          	j	800012e8 <GPIO_init+0x160>
80001284:	fdc42783          	lw	a5,-36(s0)
80001288:	0007a783          	lw	a5,0(a5)
8000128c:	08078793          	addi	a5,a5,128
80001290:	0ff00593          	li	a1,255
80001294:	00078513          	mv	a0,a5
80001298:	cd5ff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
8000129c:	fdc42783          	lw	a5,-36(s0)
800012a0:	0007a783          	lw	a5,0(a5)
800012a4:	08478793          	addi	a5,a5,132
800012a8:	0ff00593          	li	a1,255
800012ac:	00078513          	mv	a0,a5
800012b0:	cbdff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
800012b4:	fdc42783          	lw	a5,-36(s0)
800012b8:	0007a783          	lw	a5,0(a5)
800012bc:	08878793          	addi	a5,a5,136
800012c0:	0ff00593          	li	a1,255
800012c4:	00078513          	mv	a0,a5
800012c8:	ca5ff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
800012cc:	fdc42783          	lw	a5,-36(s0)
800012d0:	0007a783          	lw	a5,0(a5)
800012d4:	08c78793          	addi	a5,a5,140
800012d8:	0ff00593          	li	a1,255
800012dc:	00078513          	mv	a0,a5
800012e0:	c8dff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
800012e4:	00000013          	nop
800012e8:	00000013          	nop
800012ec:	02c12083          	lw	ra,44(sp)
800012f0:	02812403          	lw	s0,40(sp)
800012f4:	03010113          	addi	sp,sp,48
800012f8:	00008067          	ret
800012fc:	0000                	unimp
	...

80001300 <GPIO_config>:
GPIO_config():
80001300:	fd010113          	addi	sp,sp,-48
80001304:	02112623          	sw	ra,44(sp)
80001308:	02812423          	sw	s0,40(sp)
8000130c:	03010413          	addi	s0,sp,48
80001310:	fca42e23          	sw	a0,-36(s0)
80001314:	fcb42c23          	sw	a1,-40(s0)
80001318:	fcc42a23          	sw	a2,-44(s0)
8000131c:	fd842703          	lw	a4,-40(s0)
80001320:	01f00793          	li	a5,31
80001324:	02e7e863          	bltu	a5,a4,80001354 <GPIO_config+0x54>
80001328:	fdc42783          	lw	a5,-36(s0)
8000132c:	0007a783          	lw	a5,0(a5)
80001330:	fef42623          	sw	a5,-20(s0)
80001334:	fd842783          	lw	a5,-40(s0)
80001338:	00279793          	slli	a5,a5,0x2
8000133c:	fec42703          	lw	a4,-20(s0)
80001340:	00f707b3          	add	a5,a4,a5
80001344:	fef42623          	sw	a5,-20(s0)
80001348:	fd442583          	lw	a1,-44(s0)
8000134c:	fec42503          	lw	a0,-20(s0)
80001350:	b8dff0ef          	jal	ra,80000edc <HW_set_32bit_reg>
80001354:	00000013          	nop
80001358:	02c12083          	lw	ra,44(sp)
8000135c:	02812403          	lw	s0,40(sp)
80001360:	03010113          	addi	sp,sp,48
80001364:	00008067          	ret
80001368:	0000                	unimp
	...

8000136c <GPIO_get_inputs>:
GPIO_get_inputs():
8000136c:	fd010113          	addi	sp,sp,-48
80001370:	02112623          	sw	ra,44(sp)
80001374:	02812423          	sw	s0,40(sp)
80001378:	03010413          	addi	s0,sp,48
8000137c:	fca42e23          	sw	a0,-36(s0)
80001380:	fe042623          	sw	zero,-20(s0)
80001384:	fdc42783          	lw	a5,-36(s0)
80001388:	0047a783          	lw	a5,4(a5)
8000138c:	00100713          	li	a4,1
80001390:	02e78a63          	beq	a5,a4,800013c4 <GPIO_get_inputs+0x58>
80001394:	00100713          	li	a4,1
80001398:	08e7e263          	bltu	a5,a4,8000141c <GPIO_get_inputs+0xb0>
8000139c:	00200713          	li	a4,2
800013a0:	00e78463          	beq	a5,a4,800013a8 <GPIO_get_inputs+0x3c>
800013a4:	1280006f          	j	800014cc <GPIO_get_inputs+0x160>
800013a8:	fdc42783          	lw	a5,-36(s0)
800013ac:	0007a783          	lw	a5,0(a5)
800013b0:	09078793          	addi	a5,a5,144
800013b4:	00078513          	mv	a0,a5
800013b8:	b2dff0ef          	jal	ra,80000ee4 <HW_get_32bit_reg>
800013bc:	fea42623          	sw	a0,-20(s0)
800013c0:	10c0006f          	j	800014cc <GPIO_get_inputs+0x160>
800013c4:	fdc42783          	lw	a5,-36(s0)
800013c8:	0007a783          	lw	a5,0(a5)
800013cc:	09078793          	addi	a5,a5,144
800013d0:	00078513          	mv	a0,a5
800013d4:	b59ff0ef          	jal	ra,80000f2c <HW_get_16bit_reg>
800013d8:	00050793          	mv	a5,a0
800013dc:	00078713          	mv	a4,a5
800013e0:	fec42783          	lw	a5,-20(s0)
800013e4:	00e7e7b3          	or	a5,a5,a4
800013e8:	fef42623          	sw	a5,-20(s0)
800013ec:	fdc42783          	lw	a5,-36(s0)
800013f0:	0007a783          	lw	a5,0(a5)
800013f4:	09478793          	addi	a5,a5,148
800013f8:	00078513          	mv	a0,a5
800013fc:	b31ff0ef          	jal	ra,80000f2c <HW_get_16bit_reg>
80001400:	00050793          	mv	a5,a0
80001404:	01079793          	slli	a5,a5,0x10
80001408:	00078713          	mv	a4,a5
8000140c:	fec42783          	lw	a5,-20(s0)
80001410:	00e7e7b3          	or	a5,a5,a4
80001414:	fef42623          	sw	a5,-20(s0)
80001418:	0b40006f          	j	800014cc <GPIO_get_inputs+0x160>
8000141c:	fdc42783          	lw	a5,-36(s0)
80001420:	0007a783          	lw	a5,0(a5)
80001424:	09078793          	addi	a5,a5,144
80001428:	00078513          	mv	a0,a5
8000142c:	b49ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
80001430:	00050793          	mv	a5,a0
80001434:	00078713          	mv	a4,a5
80001438:	fec42783          	lw	a5,-20(s0)
8000143c:	00e7e7b3          	or	a5,a5,a4
80001440:	fef42623          	sw	a5,-20(s0)
80001444:	fdc42783          	lw	a5,-36(s0)
80001448:	0007a783          	lw	a5,0(a5)
8000144c:	09478793          	addi	a5,a5,148
80001450:	00078513          	mv	a0,a5
80001454:	b21ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
80001458:	00050793          	mv	a5,a0
8000145c:	00879793          	slli	a5,a5,0x8
80001460:	00078713          	mv	a4,a5
80001464:	fec42783          	lw	a5,-20(s0)
80001468:	00e7e7b3          	or	a5,a5,a4
8000146c:	fef42623          	sw	a5,-20(s0)
80001470:	fdc42783          	lw	a5,-36(s0)
80001474:	0007a783          	lw	a5,0(a5)
80001478:	09878793          	addi	a5,a5,152
8000147c:	00078513          	mv	a0,a5
80001480:	af5ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
80001484:	00050793          	mv	a5,a0
80001488:	01079793          	slli	a5,a5,0x10
8000148c:	00078713          	mv	a4,a5
80001490:	fec42783          	lw	a5,-20(s0)
80001494:	00e7e7b3          	or	a5,a5,a4
80001498:	fef42623          	sw	a5,-20(s0)
8000149c:	fdc42783          	lw	a5,-36(s0)
800014a0:	0007a783          	lw	a5,0(a5)
800014a4:	09c78793          	addi	a5,a5,156
800014a8:	00078513          	mv	a0,a5
800014ac:	ac9ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
800014b0:	00050793          	mv	a5,a0
800014b4:	01879793          	slli	a5,a5,0x18
800014b8:	00078713          	mv	a4,a5
800014bc:	fec42783          	lw	a5,-20(s0)
800014c0:	00e7e7b3          	or	a5,a5,a4
800014c4:	fef42623          	sw	a5,-20(s0)
800014c8:	00000013          	nop
800014cc:	fec42783          	lw	a5,-20(s0)
800014d0:	00078513          	mv	a0,a5
800014d4:	02c12083          	lw	ra,44(sp)
800014d8:	02812403          	lw	s0,40(sp)
800014dc:	03010113          	addi	sp,sp,48
800014e0:	00008067          	ret
800014e4:	0000                	unimp
	...

800014e8 <GPIO_set_output>:
GPIO_set_output():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:232
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint8_t             value
)
{
800014e8:	fd010113          	addi	sp,sp,-48
800014ec:	02112623          	sw	ra,44(sp)
800014f0:	02812423          	sw	s0,40(sp)
800014f4:	03010413          	addi	s0,sp,48
800014f8:	fca42e23          	sw	a0,-36(s0)
800014fc:	fcb42c23          	sw	a1,-40(s0)
80001500:	00060793          	mv	a5,a2
80001504:	fcf40ba3          	sb	a5,-41(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:236
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
            
    switch( this_gpio->apb_bus_width )
80001508:	fdc42783          	lw	a5,-36(s0)
8000150c:	0047a783          	lw	a5,4(a5)
80001510:	00100713          	li	a4,1
80001514:	08e78a63          	beq	a5,a4,800015a8 <GPIO_set_output+0xc0>
80001518:	00100713          	li	a4,1
8000151c:	14e7e063          	bltu	a5,a4,8000165c <GPIO_set_output+0x174>
80001520:	00200713          	li	a4,2
80001524:	00e78463          	beq	a5,a4,8000152c <GPIO_set_output+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:320
            }
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80001528:	1e80006f          	j	80001710 <GPIO_set_output+0x228>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:242
                outputs_state = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
8000152c:	fdc42783          	lw	a5,-36(s0)
80001530:	0007a783          	lw	a5,0(a5)
80001534:	0a078793          	addi	a5,a5,160
80001538:	00078513          	mv	a0,a5
8000153c:	9a9ff0ef          	jal	ra,80000ee4 <HW_get_32bit_reg>
80001540:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:243
                if ( 0 == value )
80001544:	fd744783          	lbu	a5,-41(s0)
80001548:	02079463          	bnez	a5,80001570 <GPIO_set_output+0x88>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:245
                    outputs_state &= ~(1 << port_id);
8000154c:	00100713          	li	a4,1
80001550:	fd842783          	lw	a5,-40(s0)
80001554:	00f717b3          	sll	a5,a4,a5
80001558:	fff7c793          	not	a5,a5
8000155c:	00078713          	mv	a4,a5
80001560:	fec42783          	lw	a5,-20(s0)
80001564:	00e7f7b3          	and	a5,a5,a4
80001568:	fef42623          	sw	a5,-20(s0)
8000156c:	0200006f          	j	8000158c <GPIO_set_output+0xa4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:249
                    outputs_state |= 1 << port_id;
80001570:	00100713          	li	a4,1
80001574:	fd842783          	lw	a5,-40(s0)
80001578:	00f717b3          	sll	a5,a4,a5
8000157c:	00078713          	mv	a4,a5
80001580:	fec42783          	lw	a5,-20(s0)
80001584:	00e7e7b3          	or	a5,a5,a4
80001588:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:251
                HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, outputs_state );
8000158c:	fdc42783          	lw	a5,-36(s0)
80001590:	0007a783          	lw	a5,0(a5)
80001594:	0a078793          	addi	a5,a5,160
80001598:	fec42583          	lw	a1,-20(s0)
8000159c:	00078513          	mv	a0,a5
800015a0:	93dff0ef          	jal	ra,80000edc <HW_set_32bit_reg>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:262
            break;
800015a4:	16c0006f          	j	80001710 <GPIO_set_output+0x228>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:267
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 4) * 4);
800015a8:	fdc42783          	lw	a5,-36(s0)
800015ac:	0007a703          	lw	a4,0(a5)
800015b0:	fd842783          	lw	a5,-40(s0)
800015b4:	0047d793          	srli	a5,a5,0x4
800015b8:	00279793          	slli	a5,a5,0x2
800015bc:	00f707b3          	add	a5,a4,a5
800015c0:	0a078793          	addi	a5,a5,160
800015c4:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:269
                outputs_state = HW_get_16bit_reg( gpio_out_reg_addr );
800015c8:	fe442503          	lw	a0,-28(s0)
800015cc:	961ff0ef          	jal	ra,80000f2c <HW_get_16bit_reg>
800015d0:	00050793          	mv	a5,a0
800015d4:	fef41523          	sh	a5,-22(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:270
                if ( 0 == value )
800015d8:	fd744783          	lbu	a5,-41(s0)
800015dc:	04079063          	bnez	a5,8000161c <GPIO_set_output+0x134>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:272
                    outputs_state &= ~(1 << (port_id & 0x0F));
800015e0:	fd842783          	lw	a5,-40(s0)
800015e4:	00f7f793          	andi	a5,a5,15
800015e8:	00100713          	li	a4,1
800015ec:	00f717b3          	sll	a5,a4,a5
800015f0:	01079793          	slli	a5,a5,0x10
800015f4:	4107d793          	srai	a5,a5,0x10
800015f8:	fff7c793          	not	a5,a5
800015fc:	01079713          	slli	a4,a5,0x10
80001600:	41075713          	srai	a4,a4,0x10
80001604:	fea41783          	lh	a5,-22(s0)
80001608:	00f777b3          	and	a5,a4,a5
8000160c:	01079793          	slli	a5,a5,0x10
80001610:	4107d793          	srai	a5,a5,0x10
80001614:	fef41523          	sh	a5,-22(s0)
80001618:	0300006f          	j	80001648 <GPIO_set_output+0x160>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:276
                    outputs_state |= 1 << (port_id & 0x0F);
8000161c:	fd842783          	lw	a5,-40(s0)
80001620:	00f7f793          	andi	a5,a5,15
80001624:	00100713          	li	a4,1
80001628:	00f717b3          	sll	a5,a4,a5
8000162c:	01079713          	slli	a4,a5,0x10
80001630:	41075713          	srai	a4,a4,0x10
80001634:	fea41783          	lh	a5,-22(s0)
80001638:	00f767b3          	or	a5,a4,a5
8000163c:	01079793          	slli	a5,a5,0x10
80001640:	4107d793          	srai	a5,a5,0x10
80001644:	fef41523          	sh	a5,-22(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:278
                HW_set_16bit_reg( gpio_out_reg_addr, outputs_state );
80001648:	fea45783          	lhu	a5,-22(s0)
8000164c:	00078593          	mv	a1,a5
80001650:	fe442503          	lw	a0,-28(s0)
80001654:	8d1ff0ef          	jal	ra,80000f24 <HW_set_16bit_reg>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:289
            break;
80001658:	0b80006f          	j	80001710 <GPIO_set_output+0x228>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:294
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 3) * 4);
8000165c:	fdc42783          	lw	a5,-36(s0)
80001660:	0007a703          	lw	a4,0(a5)
80001664:	fd842783          	lw	a5,-40(s0)
80001668:	0037d793          	srli	a5,a5,0x3
8000166c:	00279793          	slli	a5,a5,0x2
80001670:	00f707b3          	add	a5,a4,a5
80001674:	0a078793          	addi	a5,a5,160
80001678:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:296
                outputs_state = HW_get_8bit_reg( gpio_out_reg_addr );
8000167c:	fe042503          	lw	a0,-32(s0)
80001680:	8f5ff0ef          	jal	ra,80000f74 <HW_get_8bit_reg>
80001684:	00050793          	mv	a5,a0
80001688:	fef404a3          	sb	a5,-23(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:297
                if ( 0 == value )
8000168c:	fd744783          	lbu	a5,-41(s0)
80001690:	04079063          	bnez	a5,800016d0 <GPIO_set_output+0x1e8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:299
                    outputs_state &= ~(1 << (port_id & 0x07));
80001694:	fd842783          	lw	a5,-40(s0)
80001698:	0077f793          	andi	a5,a5,7
8000169c:	00100713          	li	a4,1
800016a0:	00f717b3          	sll	a5,a4,a5
800016a4:	01879793          	slli	a5,a5,0x18
800016a8:	4187d793          	srai	a5,a5,0x18
800016ac:	fff7c793          	not	a5,a5
800016b0:	01879713          	slli	a4,a5,0x18
800016b4:	41875713          	srai	a4,a4,0x18
800016b8:	fe940783          	lb	a5,-23(s0)
800016bc:	00f777b3          	and	a5,a4,a5
800016c0:	01879793          	slli	a5,a5,0x18
800016c4:	4187d793          	srai	a5,a5,0x18
800016c8:	fef404a3          	sb	a5,-23(s0)
800016cc:	0300006f          	j	800016fc <GPIO_set_output+0x214>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:303
                    outputs_state |= 1 << (port_id & 0x07);
800016d0:	fd842783          	lw	a5,-40(s0)
800016d4:	0077f793          	andi	a5,a5,7
800016d8:	00100713          	li	a4,1
800016dc:	00f717b3          	sll	a5,a4,a5
800016e0:	01879713          	slli	a4,a5,0x18
800016e4:	41875713          	srai	a4,a4,0x18
800016e8:	fe940783          	lb	a5,-23(s0)
800016ec:	00f767b3          	or	a5,a4,a5
800016f0:	01879793          	slli	a5,a5,0x18
800016f4:	4187d793          	srai	a5,a5,0x18
800016f8:	fef404a3          	sb	a5,-23(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:305
                HW_set_8bit_reg( gpio_out_reg_addr, outputs_state );
800016fc:	fe944783          	lbu	a5,-23(s0)
80001700:	00078593          	mv	a1,a5
80001704:	fe042503          	lw	a0,-32(s0)
80001708:	865ff0ef          	jal	ra,80000f6c <HW_set_8bit_reg>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:316
            break;
8000170c:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/CoreGPIO/core_gpio.c:322
    }
}
80001710:	00000013          	nop
80001714:	02c12083          	lw	ra,44(sp)
80001718:	02812403          	lw	s0,40(sp)
8000171c:	03010113          	addi	sp,sp,48
80001720:	00008067          	ret
80001724:	0000                	unimp
	...

80001728 <osTickStart>:
osTickStart():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_adapter.c:182
 Return      : None
 *****************************************************************************/
void LosAdapIrqDisable(unsigned int irqnum)
{
    PLIC_DisableIRQ((IRQn_Type) irqnum);
}
80001728:	fe010113          	addi	sp,sp,-32
8000172c:	00112e23          	sw	ra,28(sp)
80001730:	00812c23          	sw	s0,24(sp)
80001734:	02010413          	addi	s0,sp,32
80001738:	fe042623          	sw	zero,-20(s0)
8000173c:	04f287b7          	lui	a5,0x4f28
80001740:	ac078713          	addi	a4,a5,-1344 # 4f27ac0 <RAM_SIZE+0x4ea7ac0>
80001744:	3e800793          	li	a5,1000
80001748:	02f75733          	divu	a4,a4,a5
8000174c:	dce1ac23          	sw	a4,-552(gp) # 8000e108 <g_ucycle_per_tick>
80001750:	dd81a783          	lw	a5,-552(gp) # 8000e108 <g_ucycle_per_tick>
80001754:	00078513          	mv	a0,a5
80001758:	185000ef          	jal	ra,800020dc <LOS_SetTickSycle>
8000175c:	dd81a783          	lw	a5,-552(gp) # 8000e108 <g_ucycle_per_tick>
80001760:	00078513          	mv	a0,a5
80001764:	d41fe0ef          	jal	ra,800004a4 <SysTick_Config>
80001768:	fea42623          	sw	a0,-20(s0)
8000176c:	fec42783          	lw	a5,-20(s0)
80001770:	00078513          	mv	a0,a5
80001774:	01c12083          	lw	ra,28(sp)
80001778:	01812403          	lw	s0,24(sp)
8000177c:	02010113          	addi	sp,sp,32
80001780:	00008067          	ret
80001784:	0000                	unimp
	...

80001788 <SysTick_Handler>:
SysTick_Handler():
80001788:	ff010113          	addi	sp,sp,-16
8000178c:	00112623          	sw	ra,12(sp)
80001790:	00812423          	sw	s0,8(sp)
80001794:	01010413          	addi	s0,sp,16
80001798:	0e1000ef          	jal	ra,80002078 <LOS_TickHandler>
8000179c:	00000013          	nop
800017a0:	00c12083          	lw	ra,12(sp)
800017a4:	00812403          	lw	s0,8(sp)
800017a8:	01010113          	addi	sp,sp,16
800017ac:	00008067          	ret
800017b0:	0000                	unimp
	...

800017b4 <LosAdapIntInit>:
LosAdapIntInit():
800017b4:	ff010113          	addi	sp,sp,-16
800017b8:	00812623          	sw	s0,12(sp)
800017bc:	01010413          	addi	s0,sp,16
800017c0:	00000013          	nop
800017c4:	00c12403          	lw	s0,12(sp)
800017c8:	01010113          	addi	sp,sp,16
800017cc:	00008067          	ret
800017d0:	0000                	unimp
	...

800017d4 <LOS_EvbSetup>:
LOS_EvbSetup():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_adapter.c:192
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
void LOS_EvbSetup(void)
{
800017d4:	ff010113          	addi	sp,sp,-16
800017d8:	00112623          	sw	ra,12(sp)
800017dc:	00812423          	sw	s0,8(sp)
800017e0:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_adapter.c:193
    LOS_EvbUartInit();
800017e4:	200000ef          	jal	ra,800019e4 <LOS_EvbUartInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_adapter.c:194
    LOS_EvbLedInit();
800017e8:	0f8000ef          	jal	ra,800018e0 <LOS_EvbLedInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_adapter.c:195
    LOS_EvbKeyInit();
800017ec:	01c000ef          	jal	ra,80001808 <LOS_EvbKeyInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_adapter.c:196
    return;
800017f0:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_adapter.c:197
}
800017f4:	00c12083          	lw	ra,12(sp)
800017f8:	00812403          	lw	s0,8(sp)
800017fc:	01010113          	addi	sp,sp,16
80001800:	00008067          	ret
80001804:	0000                	unimp
	...

80001808 <LOS_EvbKeyInit>:
LOS_EvbKeyInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:13
gpio_instance_t g_gpio_in;

#endif

void LOS_EvbKeyInit(void)
{
80001808:	ff010113          	addi	sp,sp,-16
8000180c:	00112623          	sw	ra,12(sp)
80001810:	00812423          	sw	s0,8(sp)
80001814:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:17

#ifdef LOS_M2S150_RV32

	GPIO_init( &g_gpio_in, COREGPIO_IN_BASE_ADDR, GPIO_APB_32_BITS_BUS );
80001818:	00200613          	li	a2,2
8000181c:	700025b7          	lui	a1,0x70002
80001820:	e9418513          	addi	a0,gp,-364 # 8000e1c4 <g_gpio_in>
80001824:	965ff0ef          	jal	ra,80001188 <GPIO_init>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:19

	GPIO_config( &g_gpio_in, GPIO_0, GPIO_INPUT_MODE );
80001828:	00200613          	li	a2,2
8000182c:	00000593          	li	a1,0
80001830:	e9418513          	addi	a0,gp,-364 # 8000e1c4 <g_gpio_in>
80001834:	acdff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:20
	GPIO_config( &g_gpio_in, GPIO_1, GPIO_INPUT_MODE );
80001838:	00200613          	li	a2,2
8000183c:	00100593          	li	a1,1
80001840:	e9418513          	addi	a0,gp,-364 # 8000e1c4 <g_gpio_in>
80001844:	abdff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:21
	GPIO_config( &g_gpio_in, GPIO_2, GPIO_INPUT_MODE );
80001848:	00200613          	li	a2,2
8000184c:	00200593          	li	a1,2
80001850:	e9418513          	addi	a0,gp,-364 # 8000e1c4 <g_gpio_in>
80001854:	aadff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:22
	GPIO_config( &g_gpio_in, GPIO_3, GPIO_INPUT_MODE );
80001858:	00200613          	li	a2,2
8000185c:	00300593          	li	a1,3
80001860:	e9418513          	addi	a0,gp,-364 # 8000e1c4 <g_gpio_in>
80001864:	a9dff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:26

#endif

    return;
80001868:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:27
}
8000186c:	00c12083          	lw	ra,12(sp)
80001870:	00812403          	lw	s0,8(sp)
80001874:	01010113          	addi	sp,sp,16
80001878:	00008067          	ret
8000187c:	0000                	unimp
	...

80001880 <LOS_EvbGetKeyVal>:
LOS_EvbGetKeyVal():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:37
 Input       : int KeyNum
 Output      : None
 Return      : KeyVal
 *****************************************************************************/
unsigned int LOS_EvbGetKeyVal(int KeyNum)
{
80001880:	fd010113          	addi	sp,sp,-48
80001884:	02112623          	sw	ra,44(sp)
80001888:	02812423          	sw	s0,40(sp)
8000188c:	03010413          	addi	s0,sp,48
80001890:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:38
    unsigned int KeyVal = LOS_GPIO_ERR; 
80001894:	0ff00793          	li	a5,255
80001898:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:40
#ifdef LOS_M2S150_RV32
    KeyVal = GPIO_get_inputs(&g_gpio_in);
8000189c:	e9418513          	addi	a0,gp,-364 # 8000e1c4 <g_gpio_in>
800018a0:	acdff0ef          	jal	ra,8000136c <GPIO_get_inputs>
800018a4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:41
    KeyVal >>= KeyNum;
800018a8:	fec42703          	lw	a4,-20(s0)
800018ac:	fdc42783          	lw	a5,-36(s0)
800018b0:	00f757b3          	srl	a5,a4,a5
800018b4:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:42
    KeyVal &= 0x000000001;
800018b8:	fec42783          	lw	a5,-20(s0)
800018bc:	0017f793          	andi	a5,a5,1
800018c0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:44
#endif
    return KeyVal;
800018c4:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_key.c:45
}
800018c8:	00078513          	mv	a0,a5
800018cc:	02c12083          	lw	ra,44(sp)
800018d0:	02812403          	lw	s0,40(sp)
800018d4:	03010113          	addi	sp,sp,48
800018d8:	00008067          	ret
800018dc:	0000                	unimp
	...

800018e0 <LOS_EvbLedInit>:
LOS_EvbLedInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:12
gpio_instance_t g_gpio_out;

#endif

void LOS_EvbLedInit(void)
{
800018e0:	ff010113          	addi	sp,sp,-16
800018e4:	00112623          	sw	ra,12(sp)
800018e8:	00812423          	sw	s0,8(sp)
800018ec:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:15

#ifdef LOS_M2S150_RV32
	GPIO_init( &g_gpio_out, COREGPIO_OUT_BASE_ADDR, GPIO_APB_32_BITS_BUS );
800018f0:	00200613          	li	a2,2
800018f4:	700055b7          	lui	a1,0x70005
800018f8:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
800018fc:	88dff0ef          	jal	ra,80001188 <GPIO_init>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:17

	GPIO_config( &g_gpio_out, GPIO_0, GPIO_OUTPUT_MODE );
80001900:	00500613          	li	a2,5
80001904:	00000593          	li	a1,0
80001908:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000190c:	9f5ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:18
	GPIO_config( &g_gpio_out, GPIO_1, GPIO_OUTPUT_MODE );
80001910:	00500613          	li	a2,5
80001914:	00100593          	li	a1,1
80001918:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000191c:	9e5ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:19
	GPIO_config( &g_gpio_out, GPIO_2, GPIO_OUTPUT_MODE );
80001920:	00500613          	li	a2,5
80001924:	00200593          	li	a1,2
80001928:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000192c:	9d5ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:20
	GPIO_config( &g_gpio_out, GPIO_3, GPIO_OUTPUT_MODE );
80001930:	00500613          	li	a2,5
80001934:	00300593          	li	a1,3
80001938:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000193c:	9c5ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:21
	GPIO_config( &g_gpio_out, GPIO_4, GPIO_OUTPUT_MODE );
80001940:	00500613          	li	a2,5
80001944:	00400593          	li	a1,4
80001948:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000194c:	9b5ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:22
	GPIO_config( &g_gpio_out, GPIO_5, GPIO_OUTPUT_MODE );
80001950:	00500613          	li	a2,5
80001954:	00500593          	li	a1,5
80001958:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000195c:	9a5ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:23
	GPIO_config( &g_gpio_out, GPIO_6, GPIO_OUTPUT_MODE );
80001960:	00500613          	li	a2,5
80001964:	00600593          	li	a1,6
80001968:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000196c:	995ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:24
	GPIO_config( &g_gpio_out, GPIO_7, GPIO_OUTPUT_MODE );
80001970:	00500613          	li	a2,5
80001974:	00700593          	li	a1,7
80001978:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
8000197c:	985ff0ef          	jal	ra,80001300 <GPIO_config>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:27

#endif
}
80001980:	00000013          	nop
80001984:	00c12083          	lw	ra,12(sp)
80001988:	00812403          	lw	s0,8(sp)
8000198c:	01010113          	addi	sp,sp,16
80001990:	00008067          	ret
80001994:	0000                	unimp
	...

80001998 <LOS_EvbLedControl>:
LOS_EvbLedControl():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:37
 *        (2) cmd   Led on or off                                                                *
 *  return : None                                                                                *
 *  discription:                                                                                 *
**************************************************************************************************/
void LOS_EvbLedControl(int index, int cmd)
{
80001998:	fe010113          	addi	sp,sp,-32
8000199c:	00112e23          	sw	ra,28(sp)
800019a0:	00812c23          	sw	s0,24(sp)
800019a4:	02010413          	addi	s0,sp,32
800019a8:	fea42623          	sw	a0,-20(s0)
800019ac:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:39
#ifdef LOS_M2S150_RV32
	GPIO_set_output( &g_gpio_out, index, cmd );
800019b0:	fec42783          	lw	a5,-20(s0)
800019b4:	fe842703          	lw	a4,-24(s0)
800019b8:	0ff77713          	andi	a4,a4,255
800019bc:	00070613          	mv	a2,a4
800019c0:	00078593          	mv	a1,a5
800019c4:	e9c18513          	addi	a0,gp,-356 # 8000e1cc <g_gpio_out>
800019c8:	b21ff0ef          	jal	ra,800014e8 <GPIO_set_output>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_led.c:42

#endif
}
800019cc:	00000013          	nop
800019d0:	01c12083          	lw	ra,28(sp)
800019d4:	01812403          	lw	s0,24(sp)
800019d8:	02010113          	addi	sp,sp,32
800019dc:	00008067          	ret
800019e0:	0000                	unimp
	...

800019e4 <LOS_EvbUartInit>:
LOS_EvbUartInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:75

	UART_get_rx( &g_uart, (uint8_t *)c, 1 );

#endif

}
800019e4:	ff010113          	addi	sp,sp,-16
800019e8:	00112623          	sw	ra,12(sp)
800019ec:	00812423          	sw	s0,8(sp)
800019f0:	01010413          	addi	s0,sp,16
800019f4:	00100693          	li	a3,1
800019f8:	02c00613          	li	a2,44
800019fc:	700015b7          	lui	a1,0x70001
80001a00:	ea418513          	addi	a0,gp,-348 # 8000e1d4 <g_uart>
80001a04:	db0ff0ef          	jal	ra,80000fb4 <UART_init>
80001a08:	00000013          	nop
80001a0c:	00c12083          	lw	ra,12(sp)
80001a10:	00812403          	lw	s0,8(sp)
80001a14:	01010113          	addi	sp,sp,16
80001a18:	00008067          	ret
80001a1c:	0000                	unimp
	...

80001a20 <LOS_EvbUartWriteByte>:
LOS_EvbUartWriteByte():
80001a20:	fe010113          	addi	sp,sp,-32
80001a24:	00112e23          	sw	ra,28(sp)
80001a28:	00812c23          	sw	s0,24(sp)
80001a2c:	02010413          	addi	s0,sp,32
80001a30:	00050793          	mv	a5,a0
80001a34:	fef407a3          	sb	a5,-17(s0)
80001a38:	fef40793          	addi	a5,s0,-17
80001a3c:	00100613          	li	a2,1
80001a40:	00078593          	mv	a1,a5
80001a44:	ea418513          	addi	a0,gp,-348 # 8000e1d4 <g_uart>
80001a48:	e88ff0ef          	jal	ra,800010d0 <UART_send>
80001a4c:	00000013          	nop
80001a50:	01c12083          	lw	ra,28(sp)
80001a54:	01812403          	lw	s0,24(sp)
80001a58:	02010113          	addi	sp,sp,32
80001a5c:	00008067          	ret
80001a60:	0000                	unimp
	...

80001a64 <LOS_EvbUartPrintf>:
LOS_EvbUartPrintf():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:83

static char _buffer[128];

#endif
void LOS_EvbUartPrintf(char* fmt, ...)
{
80001a64:	fb010113          	addi	sp,sp,-80
80001a68:	02112623          	sw	ra,44(sp)
80001a6c:	02812423          	sw	s0,40(sp)
80001a70:	03010413          	addi	s0,sp,48
80001a74:	fca42e23          	sw	a0,-36(s0)
80001a78:	00b42223          	sw	a1,4(s0)
80001a7c:	00c42423          	sw	a2,8(s0)
80001a80:	00d42623          	sw	a3,12(s0)
80001a84:	00e42823          	sw	a4,16(s0)
80001a88:	00f42a23          	sw	a5,20(s0)
80001a8c:	01042c23          	sw	a6,24(s0)
80001a90:	01142e23          	sw	a7,28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:88
#ifdef LOS_M2S150_RV32

    int i;
    va_list ap;
    va_start(ap, fmt);
80001a94:	02040793          	addi	a5,s0,32
80001a98:	fe478793          	addi	a5,a5,-28
80001a9c:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:89
    vsprintf(_buffer, fmt, ap);
80001aa0:	fe842783          	lw	a5,-24(s0)
80001aa4:	00078613          	mv	a2,a5
80001aa8:	fdc42583          	lw	a1,-36(s0)
80001aac:	e1018513          	addi	a0,gp,-496 # 8000e140 <__sbss_end>
80001ab0:	2ec090ef          	jal	ra,8000ad9c <vsiprintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:92
    va_end(ap);

    for (i = 0; _buffer[i] != '\0'; i++)
80001ab4:	fe042623          	sw	zero,-20(s0)
80001ab8:	0280006f          	j	80001ae0 <LOS_EvbUartPrintf+0x7c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:94 (discriminator 3)
    {
        LOS_EvbUartWriteByte(_buffer[i]);
80001abc:	e1018713          	addi	a4,gp,-496 # 8000e140 <__sbss_end>
80001ac0:	fec42783          	lw	a5,-20(s0)
80001ac4:	00f707b3          	add	a5,a4,a5
80001ac8:	00078783          	lb	a5,0(a5)
80001acc:	00078513          	mv	a0,a5
80001ad0:	f51ff0ef          	jal	ra,80001a20 <LOS_EvbUartWriteByte>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:92 (discriminator 3)
    for (i = 0; _buffer[i] != '\0'; i++)
80001ad4:	fec42783          	lw	a5,-20(s0)
80001ad8:	00178793          	addi	a5,a5,1
80001adc:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:92 (discriminator 1)
80001ae0:	e1018713          	addi	a4,gp,-496 # 8000e140 <__sbss_end>
80001ae4:	fec42783          	lw	a5,-20(s0)
80001ae8:	00f707b3          	add	a5,a4,a5
80001aec:	00078783          	lb	a5,0(a5)
80001af0:	fc0796e3          	bnez	a5,80001abc <LOS_EvbUartPrintf+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../platform/M2S150_RV32/los_bsp_uart.c:99
    }

#endif

}
80001af4:	00000013          	nop
80001af8:	02c12083          	lw	ra,44(sp)
80001afc:	02812403          	lw	s0,40(sp)
80001b00:	05010113          	addi	sp,sp,80
80001b04:	00008067          	ret
80001b08:	0000                	unimp
	...

80001b0c <LOS_StartToRun>:
LOS_StartToRun():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:58

.section .text

LOS_StartToRun:
//disable interrupts
    li      t0, 0x08
80001b0c:	00800293          	li	t0,8
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:59
    csrrc   zero, mstatus, t0
80001b10:	3002b073          	csrc	mstatus,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:62

//indicate that sheduler is ON by setting g_bTaskScheduled=1
    la      t0, g_bTaskScheduled
80001b14:	0001d297          	auipc	t0,0x1d
80001b18:	83c28293          	addi	t0,t0,-1988 # 8001e350 <g_bTaskScheduled>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:63
    li      t1, 0x1
80001b1c:	00100313          	li	t1,1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:64
    sw      t1, 0x0(t0)
80001b20:	0062a023          	sw	t1,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:69

//no user mode. we are always in machine mode.

//copy pstNewTask into pstRunTask
    la      t0, g_stLosTask
80001b24:	0001d297          	auipc	t0,0x1d
80001b28:	82428293          	addi	t0,t0,-2012 # 8001e348 <g_stLosTask>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:70
    lw      t1, 4(t0)
80001b2c:	0042a303          	lw	t1,4(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:71
    sw      t1, 0(t0)
80001b30:	0062a023          	sw	t1,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:74

// set the task running bit=1
    la      t0, g_stLosTask
80001b34:	0001d297          	auipc	t0,0x1d
80001b38:	81428293          	addi	t0,t0,-2028 # 8001e348 <g_stLosTask>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:75
    lw      t1, (t0)
80001b3c:	0002a303          	lw	t1,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:76
    lh      t2, 0x4(t1)
80001b40:	00431383          	lh	t2,4(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:77
    ori     t2, t2,  OS_TASK_STATUS_RUNNING
80001b44:	0103e393          	ori	t2,t2,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:78
    sh      t2, 0x4(t1)
80001b48:	00731223          	sh	t2,4(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:81

//retrieve stack pointer
    lw      sp, 0x0(t1)
80001b4c:	00032103          	lw	sp,0(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:84

//retrieve the location where to jump
    lw      t0, 31 * 4(sp)
80001b50:	07c12283          	lw	t0,124(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:85
    csrw    mepc, t0
80001b54:	34129073          	csrw	mepc,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:88

//retrieve the registers
    lw      ra, 0 * 4(sp)
80001b58:	00012083          	lw	ra,0(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:90

    lw      t0, 4 * 4(sp)
80001b5c:	01012283          	lw	t0,16(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:91
    lw      t1, 5 * 4(sp)
80001b60:	01412303          	lw	t1,20(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:92
    lw      t2, 6 * 4(sp)
80001b64:	01812383          	lw	t2,24(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:93
    lw      s0, 7 * 4(sp)
80001b68:	01c12403          	lw	s0,28(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:94
    lw      s1, 8 * 4(sp)
80001b6c:	02012483          	lw	s1,32(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:95
    lw      a0, 9 * 4(sp)
80001b70:	02412503          	lw	a0,36(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:96
    lw      a1, 10 * 4(sp)
80001b74:	02812583          	lw	a1,40(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:97
    lw      a2, 11 * 4(sp)
80001b78:	02c12603          	lw	a2,44(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:98
    lw      a3, 12 * 4(sp)
80001b7c:	03012683          	lw	a3,48(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:99
    lw      a4, 13 * 4(sp)
80001b80:	03412703          	lw	a4,52(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:100
    lw      a5, 14 * 4(sp)
80001b84:	03812783          	lw	a5,56(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:101
    lw      a6, 15 * 4(sp)
80001b88:	03c12803          	lw	a6,60(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:102
    lw      a7, 16 * 4(sp)
80001b8c:	04012883          	lw	a7,64(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:103
    lw      s2, 17 * 4(sp)
80001b90:	04412903          	lw	s2,68(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:104
    lw      s3, 18 * 4(sp)
80001b94:	04812983          	lw	s3,72(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:105
    lw      s4, 19 * 4(sp)
80001b98:	04c12a03          	lw	s4,76(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:106
    lw      s5, 20 * 4(sp)
80001b9c:	05012a83          	lw	s5,80(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:107
    lw      s6, 21 * 4(sp)
80001ba0:	05412b03          	lw	s6,84(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:108
    lw      s7, 22 * 4(sp)
80001ba4:	05812b83          	lw	s7,88(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:109
    lw      s8, 23 * 4(sp)
80001ba8:	05c12c03          	lw	s8,92(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:110
    lw      s9, 24 * 4(sp)
80001bac:	06012c83          	lw	s9,96(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:111
    lw      s10, 25 * 4(sp)
80001bb0:	06412d03          	lw	s10,100(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:112
    lw      s11, 26 * 4(sp)
80001bb4:	06812d83          	lw	s11,104(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:113
    lw      t3, 27 * 4(sp)
80001bb8:	06c12e03          	lw	t3,108(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:114
    lw      t4, 28 * 4(sp)
80001bbc:	07012e83          	lw	t4,112(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:115
    lw      t5, 29 * 4(sp)
80001bc0:	07412f03          	lw	t5,116(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:116
    lw      t6, 30 * 4(sp)
80001bc4:	07812f83          	lw	t6,120(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:119

//compensate for the stack pointer
    addi    sp, sp, 32*4
80001bc8:	08010113          	addi	sp,sp,128
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:122

//use register t6 to jump to OS start
    csrr    t6, mepc
80001bcc:	34102ff3          	csrr	t6,mepc
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:125

//enable global interrupts
    li      t0, 0x08
80001bd0:	00800293          	li	t0,8
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:126
    csrrs   zero, mstatus, t0
80001bd4:	3002a073          	csrs	mstatus,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:129

//jump to osTaskEntry function.
    jalr    x0, t6, 0
80001bd8:	000f8067          	jr	t6

80001bdc <LOS_IntNumGet>:
LOS_IntNumGet():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:132

LOS_IntNumGet:
    li  t0, PLIC_CLAIM_REG
80001bdc:	402002b7          	lui	t0,0x40200
80001be0:	00428293          	addi	t0,t0,4 # 40200004 <RAM_SIZE+0x40180004>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:133
    lw  t0, 0x0(t0)
80001be4:	0002a283          	lw	t0,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:134
    ret
80001be8:	00008067          	ret

80001bec <osDisableIRQ>:
osDisableIRQ():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:137

osDisableIRQ:
    li      t0, 0x88              //mpie|mie
80001bec:	08800293          	li	t0,136
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:138
    csrrc   zero, mstatus, t0
80001bf0:	3002b073          	csrc	mstatus,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:139
    ret
80001bf4:	00008067          	ret

80001bf8 <LOS_IntLock>:
LOS_IntLock():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:142

LOS_IntLock:
    csrr    a0, mstatus           //return value
80001bf8:	30002573          	csrr	a0,mstatus
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:143
    li      t0, 0x08              //mie
80001bfc:	00800293          	li	t0,8
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:144
    csrrc   zero, mstatus, t0
80001c00:	3002b073          	csrc	mstatus,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:145
    ret
80001c04:	00008067          	ret

80001c08 <LOS_IntUnLock>:
LOS_IntUnLock():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:148

LOS_IntUnLock:
    csrr    a0, mstatus           //return value
80001c08:	30002573          	csrr	a0,mstatus
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:149
    li      t0, 0x08              //mie
80001c0c:	00800293          	li	t0,8
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:150
    csrrs   zero, mstatus, t0
80001c10:	3002a073          	csrs	mstatus,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:151
    ret
80001c14:	00008067          	ret

80001c18 <LOS_IntRestore>:
LOS_IntRestore():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:154

LOS_IntRestore:
    csrw mstatus, a0
80001c18:	30051073          	csrw	mstatus,a0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:155
    ret
80001c1c:	00008067          	ret

80001c20 <osTaskSchedule>:
osTaskSchedule():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:159

osTaskSchedule:
//MIP_MSIE -- enable software interrupt bit
    li      t0, MIP_MSIP
80001c20:	00800293          	li	t0,8
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:160
    csrrs   zero, mie, t0
80001c24:	3042a073          	csrs	mie,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:163

//this will cause the software interrupt
    li      t0, PRCI_BASE_ADDR
80001c28:	440002b7          	lui	t0,0x44000
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:164
    li      t1, 0x1
80001c2c:	00100313          	li	t1,1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:165
    sw      t1, 0x0(t0)
80001c30:	0062a023          	sw	t1,0(t0) # 44000000 <RAM_SIZE+0x43f80000>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:166
    ret
80001c34:	00008067          	ret

80001c38 <Software_IRQHandler>:
Software_IRQHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:170

Software_IRQHandler:
//disable interrupts globaly
    li      t0, 0x08                                //mie
80001c38:	00800293          	li	t0,8
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:171
    csrrc   zero, mstatus, t0
80001c3c:	3002b073          	csrc	mstatus,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:173

    la     t0, g_pfnTskSwitchHook                   //this is not defined. We are not jumping on this function as of now.
80001c40:	0000c297          	auipc	t0,0xc
80001c44:	4d428293          	addi	t0,t0,1236 # 8000e114 <g_pfnTskSwitchHook>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:174
    lw     t1, 0x0(t0)
80001c48:	0002a303          	lw	t1,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:175
    beqz   t1, TaskSwitch                           //Branch if = zero
80001c4c:	00030263          	beqz	t1,80001c50 <TaskSwitch>

80001c50 <TaskSwitch>:
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:179

TaskSwitch:
//stack pointer was passed by entry.s in register a2. store it in pstRunTask structure
    la      t0, g_stLosTask
80001c50:	0001c297          	auipc	t0,0x1c
TaskSwitch():
80001c54:	6f828293          	addi	t0,t0,1784 # 8001e348 <g_stLosTask>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:180
    lw      t1, 0(t0)
80001c58:	0002a303          	lw	t1,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:181
    sw      a2, 0(t1)
80001c5c:	00c32023          	sw	a2,0(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:184

//Clear the task running bit of pstRunTask.
    la      t0, g_stLosTask
80001c60:	0001c297          	auipc	t0,0x1c
80001c64:	6e828293          	addi	t0,t0,1768 # 8001e348 <g_stLosTask>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:185
    lw      t1, (t0)
80001c68:	0002a303          	lw	t1,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:186
    lb      t2, 0x4(t1)
80001c6c:	00430383          	lb	t2,4(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:187
    andi    t2, t2, OS_TASK_STATUS_NOT_RUNNING
80001c70:	0ef3f393          	andi	t2,t2,239
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:188
    sb      t2, 0x4(t1)
80001c74:	00730223          	sb	t2,4(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:191

//copy pstNewTask into pstRunTask
    la      t0, g_stLosTask
80001c78:	0001c297          	auipc	t0,0x1c
80001c7c:	6d028293          	addi	t0,t0,1744 # 8001e348 <g_stLosTask>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:192
    lw      t1, 0x4(t0)
80001c80:	0042a303          	lw	t1,4(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:193
    sw      t1, 0x0(t0)
80001c84:	0062a023          	sw	t1,0(t0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:196

//set the task running bit=1
    lh      t2, 0x4(t1)
80001c88:	00431383          	lh	t2,4(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:197
    ori     t2, t2, OS_TASK_STATUS_RUNNING
80001c8c:	0103e393          	ori	t2,t2,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:198
    sh      t2, 0x4(t1)
80001c90:	00731223          	sh	t2,4(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:201

//retireve stack pointer
    lw      sp, (t1)
80001c94:	00032103          	lw	sp,0(t1)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:204

//retrieve the address at which exception happened
    lw      t0, 31 * 4(sp)
80001c98:	07c12283          	lw	t0,124(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:205
    csrw    mepc, t0
80001c9c:	34129073          	csrw	mepc,t0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:208

//retrieve the registers
    lw      ra, 0 * 4(sp)
80001ca0:	00012083          	lw	ra,0(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:210

    lw      t0, 4 * 4(sp)
80001ca4:	01012283          	lw	t0,16(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:211
    lw      t1, 5 * 4(sp)
80001ca8:	01412303          	lw	t1,20(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:212
    lw      t2, 6 * 4(sp)
80001cac:	01812383          	lw	t2,24(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:213
    lw      s0, 7 * 4(sp)
80001cb0:	01c12403          	lw	s0,28(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:214
    lw      s1, 8 * 4(sp)
80001cb4:	02012483          	lw	s1,32(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:215
    lw      a0, 9 * 4(sp)
80001cb8:	02412503          	lw	a0,36(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:216
    lw      a1, 10 * 4(sp)
80001cbc:	02812583          	lw	a1,40(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:217
    lw      a2, 11 * 4(sp)
80001cc0:	02c12603          	lw	a2,44(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:218
    lw      a3, 12 * 4(sp)
80001cc4:	03012683          	lw	a3,48(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:219
    lw      a4, 13 * 4(sp)
80001cc8:	03412703          	lw	a4,52(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:220
    lw      a5, 14 * 4(sp)
80001ccc:	03812783          	lw	a5,56(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:221
    lw      a6, 15 * 4(sp)
80001cd0:	03c12803          	lw	a6,60(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:222
    lw      a7, 16 * 4(sp)
80001cd4:	04012883          	lw	a7,64(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:223
    lw      s2, 17 * 4(sp)
80001cd8:	04412903          	lw	s2,68(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:224
    lw      s3, 18 * 4(sp)
80001cdc:	04812983          	lw	s3,72(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:225
    lw      s4, 19 * 4(sp)
80001ce0:	04c12a03          	lw	s4,76(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:226
    lw      s5, 20 * 4(sp)
80001ce4:	05012a83          	lw	s5,80(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:227
    lw      s6, 21 * 4(sp)
80001ce8:	05412b03          	lw	s6,84(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:228
    lw      s7, 22 * 4(sp)
80001cec:	05812b83          	lw	s7,88(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:229
    lw      s8, 23 * 4(sp)
80001cf0:	05c12c03          	lw	s8,92(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:230
    lw      s9, 24 * 4(sp)
80001cf4:	06012c83          	lw	s9,96(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:231
    lw      s10, 25 * 4(sp)
80001cf8:	06412d03          	lw	s10,100(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:232
    lw      s11, 26 * 4(sp)
80001cfc:	06812d83          	lw	s11,104(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:233
    lw      t3, 27 * 4(sp)
80001d00:	06c12e03          	lw	t3,108(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:234
    lw      t4, 28 * 4(sp)
80001d04:	07012e83          	lw	t4,112(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:235
    lw      t5, 29 * 4(sp)
80001d08:	07412f03          	lw	t5,116(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:236
    lw      t6, 30 * 4(sp)
80001d0c:	07812f83          	lw	t6,120(sp)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:238

    addi    sp, sp, 4 * 32
80001d10:	08010113          	addi	sp,sp,128
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_dispatch_gcc.S:240

    mret
80001d14:	30200073          	mret

80001d18 <osSchedule>:
osSchedule():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:56
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
VOID osSchedule(VOID)
{
80001d18:	ff010113          	addi	sp,sp,-16
80001d1c:	00112623          	sw	ra,12(sp)
80001d20:	00812423          	sw	s0,8(sp)
80001d24:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:57
    osTaskSchedule();
80001d28:	ef9ff0ef          	jal	ra,80001c20 <osTaskSchedule>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:58
}
80001d2c:	00000013          	nop
80001d30:	00c12083          	lw	ra,12(sp)
80001d34:	00812403          	lw	s0,8(sp)
80001d38:	01010113          	addi	sp,sp,16
80001d3c:	00008067          	ret
80001d40:	0000                	unimp
	...

80001d44 <LOS_Schedule>:
LOS_Schedule():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:68
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
VOID LOS_Schedule(VOID)
{
80001d44:	fe010113          	addi	sp,sp,-32
80001d48:	00112e23          	sw	ra,28(sp)
80001d4c:	00812c23          	sw	s0,24(sp)
80001d50:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:70
    UINTPTR uvIntSave;
    uvIntSave = LOS_IntLock();
80001d54:	ea5ff0ef          	jal	ra,80001bf8 <LOS_IntLock>
80001d58:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:73

    /* Find the highest task */
    g_stLosTask.pstNewTask = LOS_DL_LIST_ENTRY(LOS_PriqueueTop(), LOS_TASK_CB, stPendList);
80001d5c:	684040ef          	jal	ra,800063e0 <LOS_PriqueueTop>
80001d60:	00050793          	mv	a5,a0
80001d64:	fc478713          	addi	a4,a5,-60
80001d68:	8001e7b7          	lui	a5,0x8001e
80001d6c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80001d70:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:76

    /* In case that running is not highest then reschedule */
    if (g_stLosTask.pstRunTask != g_stLosTask.pstNewTask)
80001d74:	8001e7b7          	lui	a5,0x8001e
80001d78:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80001d7c:	0007a703          	lw	a4,0(a5)
80001d80:	8001e7b7          	lui	a5,0x8001e
80001d84:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80001d88:	0047a783          	lw	a5,4(a5)
80001d8c:	02f70063          	beq	a4,a5,80001dac <LOS_Schedule+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:78
    {
        if ((!g_usLosTaskLock))
80001d90:	8001e7b7          	lui	a5,0x8001e
80001d94:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80001d98:	00079a63          	bnez	a5,80001dac <LOS_Schedule+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:80
        {
            (VOID)LOS_IntRestore(uvIntSave);
80001d9c:	fec42503          	lw	a0,-20(s0)
80001da0:	e79ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:82

            osTaskSchedule();
80001da4:	e7dff0ef          	jal	ra,80001c20 <osTaskSchedule>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:84

            return;
80001da8:	00c0006f          	j	80001db4 <LOS_Schedule+0x70>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:88
        }
    }

    (VOID)LOS_IntRestore(uvIntSave);
80001dac:	fec42503          	lw	a0,-20(s0)
80001db0:	e69ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:89
}
80001db4:	01c12083          	lw	ra,28(sp)
80001db8:	01812403          	lw	s0,24(sp)
80001dbc:	02010113          	addi	sp,sp,32
80001dc0:	00008067          	ret
80001dc4:	0000                	unimp
	...

80001dc8 <osTaskExit>:
osTaskExit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:99
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT_MINOR VOID osTaskExit(VOID)
{
80001dc8:	ff010113          	addi	sp,sp,-16
80001dcc:	00112623          	sw	ra,12(sp)
80001dd0:	00812423          	sw	s0,8(sp)
80001dd4:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:100
    osDisableIRQ();
80001dd8:	e15ff0ef          	jal	ra,80001bec <osDisableIRQ>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:101 (discriminator 1)
    while(1);
80001ddc:	0000006f          	j	80001ddc <osTaskExit+0x14>
80001de0:	0000                	unimp
	...

80001de4 <osTskStackInit>:
osTskStackInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:114
               pTopStack    --- Top of task's stack
 Output      : None
 Return      : Context pointer
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT VOID *osTskStackInit(UINT32 uwTaskID, UINT32 uwStackSize, VOID *pTopStack)
{
80001de4:	fd010113          	addi	sp,sp,-48
80001de8:	02812623          	sw	s0,44(sp)
80001dec:	03010413          	addi	s0,sp,48
80001df0:	fca42e23          	sw	a0,-36(s0)
80001df4:	fcb42c23          	sw	a1,-40(s0)
80001df8:	fcc42a23          	sw	a2,-44(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:119
    UINT32 uwIdx;
    TSK_CONTEXT_S  *pstContext;

    /*initialize the task stack, write magic num to stack top*/
    for (uwIdx = 1; uwIdx < (uwStackSize/sizeof(UINT32)); uwIdx++)
80001dfc:	00100793          	li	a5,1
80001e00:	fef42623          	sw	a5,-20(s0)
80001e04:	02c0006f          	j	80001e30 <osTskStackInit+0x4c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:121 (discriminator 3)
    {
        *((UINT32 *)pTopStack + uwIdx) = OS_TASK_STACK_INIT;
80001e08:	fec42783          	lw	a5,-20(s0)
80001e0c:	00279793          	slli	a5,a5,0x2
80001e10:	fd442703          	lw	a4,-44(s0)
80001e14:	00f707b3          	add	a5,a4,a5
80001e18:	cacad737          	lui	a4,0xcacad
80001e1c:	aca70713          	addi	a4,a4,-1334 # cacacaca <__stack_top+0x4ac6e4ca>
80001e20:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:119 (discriminator 3)
    for (uwIdx = 1; uwIdx < (uwStackSize/sizeof(UINT32)); uwIdx++)
80001e24:	fec42783          	lw	a5,-20(s0)
80001e28:	00178793          	addi	a5,a5,1
80001e2c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:119 (discriminator 1)
80001e30:	fd842783          	lw	a5,-40(s0)
80001e34:	0027d793          	srli	a5,a5,0x2
80001e38:	fec42703          	lw	a4,-20(s0)
80001e3c:	fcf766e3          	bltu	a4,a5,80001e08 <osTskStackInit+0x24>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:123
    }
    *((UINT32 *)(pTopStack)) = OS_TASK_MAGIC_WORD;
80001e40:	fd442783          	lw	a5,-44(s0)
80001e44:	ccccd737          	lui	a4,0xccccd
80001e48:	ccc70713          	addi	a4,a4,-820 # cccccccc <__stack_top+0x4cc8e6cc>
80001e4c:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:125

    pstContext    = (TSK_CONTEXT_S *)(((UINT32)pTopStack + uwStackSize) - sizeof(TSK_CONTEXT_S));
80001e50:	fd442703          	lw	a4,-44(s0)
80001e54:	fd842783          	lw	a5,-40(s0)
80001e58:	00f707b3          	add	a5,a4,a5
80001e5c:	f8078793          	addi	a5,a5,-128
80001e60:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:127

    pstContext->ra = (UINT32)osTaskExit;
80001e64:	800027b7          	lui	a5,0x80002
80001e68:	dc878713          	addi	a4,a5,-568 # 80001dc8 <__stack_top+0xfffc37c8>
80001e6c:	fe842783          	lw	a5,-24(s0)
80001e70:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:128
    pstContext->sp = 0x02020202L;
80001e74:	fe842783          	lw	a5,-24(s0)
80001e78:	02020737          	lui	a4,0x2020
80001e7c:	20270713          	addi	a4,a4,514 # 2020202 <RAM_SIZE+0x1fa0202>
80001e80:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:129
    pstContext->gp = 0x03030303L;
80001e84:	fe842783          	lw	a5,-24(s0)
80001e88:	03030737          	lui	a4,0x3030
80001e8c:	30370713          	addi	a4,a4,771 # 3030303 <RAM_SIZE+0x2fb0303>
80001e90:	00e7a423          	sw	a4,8(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:130
    pstContext->tp = 0x04040404L;
80001e94:	fe842783          	lw	a5,-24(s0)
80001e98:	04040737          	lui	a4,0x4040
80001e9c:	40470713          	addi	a4,a4,1028 # 4040404 <RAM_SIZE+0x3fc0404>
80001ea0:	00e7a623          	sw	a4,12(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:131
    pstContext->t0 = 0505050505;
80001ea4:	fe842783          	lw	a5,-24(s0)
80001ea8:	05145737          	lui	a4,0x5145
80001eac:	14570713          	addi	a4,a4,325 # 5145145 <RAM_SIZE+0x50c5145>
80001eb0:	00e7a823          	sw	a4,16(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:132
    pstContext->t1 = 0x06060606L;
80001eb4:	fe842783          	lw	a5,-24(s0)
80001eb8:	06060737          	lui	a4,0x6060
80001ebc:	60670713          	addi	a4,a4,1542 # 6060606 <RAM_SIZE+0x5fe0606>
80001ec0:	00e7aa23          	sw	a4,20(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:133
    pstContext->t2 = 0x07070707L;
80001ec4:	fe842783          	lw	a5,-24(s0)
80001ec8:	07070737          	lui	a4,0x7070
80001ecc:	70770713          	addi	a4,a4,1799 # 7070707 <RAM_SIZE+0x6ff0707>
80001ed0:	00e7ac23          	sw	a4,24(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:134
    pstContext->s0 = 0x08080808L;
80001ed4:	fe842783          	lw	a5,-24(s0)
80001ed8:	08081737          	lui	a4,0x8081
80001edc:	80870713          	addi	a4,a4,-2040 # 8080808 <RAM_SIZE+0x8000808>
80001ee0:	00e7ae23          	sw	a4,28(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:135
    pstContext->s1 = 0x09090909L;
80001ee4:	fe842783          	lw	a5,-24(s0)
80001ee8:	09091737          	lui	a4,0x9091
80001eec:	90970713          	addi	a4,a4,-1783 # 9090909 <RAM_SIZE+0x9010909>
80001ef0:	02e7a023          	sw	a4,32(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:136
    pstContext->a0 = uwTaskID;		//a0 first argument
80001ef4:	fe842783          	lw	a5,-24(s0)
80001ef8:	fdc42703          	lw	a4,-36(s0)
80001efc:	02e7a223          	sw	a4,36(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:137
    pstContext->a1 = 0x11111111L;
80001f00:	fe842783          	lw	a5,-24(s0)
80001f04:	11111737          	lui	a4,0x11111
80001f08:	11170713          	addi	a4,a4,273 # 11111111 <RAM_SIZE+0x11091111>
80001f0c:	02e7a423          	sw	a4,40(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:138
    pstContext->a2 = 0x12121212L;
80001f10:	fe842783          	lw	a5,-24(s0)
80001f14:	12121737          	lui	a4,0x12121
80001f18:	21270713          	addi	a4,a4,530 # 12121212 <RAM_SIZE+0x120a1212>
80001f1c:	02e7a623          	sw	a4,44(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:139
    pstContext->a3 = 0x13131313L;
80001f20:	fe842783          	lw	a5,-24(s0)
80001f24:	13131737          	lui	a4,0x13131
80001f28:	31370713          	addi	a4,a4,787 # 13131313 <RAM_SIZE+0x130b1313>
80001f2c:	02e7a823          	sw	a4,48(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:140
    pstContext->a4 = 0x14141414L;
80001f30:	fe842783          	lw	a5,-24(s0)
80001f34:	14141737          	lui	a4,0x14141
80001f38:	41470713          	addi	a4,a4,1044 # 14141414 <RAM_SIZE+0x140c1414>
80001f3c:	02e7aa23          	sw	a4,52(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:141
    pstContext->a5 = 0x15151515L;
80001f40:	fe842783          	lw	a5,-24(s0)
80001f44:	15151737          	lui	a4,0x15151
80001f48:	51570713          	addi	a4,a4,1301 # 15151515 <RAM_SIZE+0x150d1515>
80001f4c:	02e7ac23          	sw	a4,56(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:142
    pstContext->a6 = 0x16161616L;
80001f50:	fe842783          	lw	a5,-24(s0)
80001f54:	16161737          	lui	a4,0x16161
80001f58:	61670713          	addi	a4,a4,1558 # 16161616 <RAM_SIZE+0x160e1616>
80001f5c:	02e7ae23          	sw	a4,60(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:143
    pstContext->a7 = 0x17171717L;
80001f60:	fe842783          	lw	a5,-24(s0)
80001f64:	17171737          	lui	a4,0x17171
80001f68:	71770713          	addi	a4,a4,1815 # 17171717 <RAM_SIZE+0x170f1717>
80001f6c:	04e7a023          	sw	a4,64(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:144
    pstContext->s2 = 0x18181818L;
80001f70:	fe842783          	lw	a5,-24(s0)
80001f74:	18182737          	lui	a4,0x18182
80001f78:	81870713          	addi	a4,a4,-2024 # 18181818 <RAM_SIZE+0x18101818>
80001f7c:	04e7a223          	sw	a4,68(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:145
    pstContext->s3 = 0x19191919L;
80001f80:	fe842783          	lw	a5,-24(s0)
80001f84:	19192737          	lui	a4,0x19192
80001f88:	91970713          	addi	a4,a4,-1767 # 19191919 <RAM_SIZE+0x19111919>
80001f8c:	04e7a423          	sw	a4,72(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:146
    pstContext->s4 = 0x20202020L;
80001f90:	fe842783          	lw	a5,-24(s0)
80001f94:	20202737          	lui	a4,0x20202
80001f98:	02070713          	addi	a4,a4,32 # 20202020 <RAM_SIZE+0x20182020>
80001f9c:	04e7a623          	sw	a4,76(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:147
    pstContext->s5 = 0x21212121L;
80001fa0:	fe842783          	lw	a5,-24(s0)
80001fa4:	21212737          	lui	a4,0x21212
80001fa8:	12170713          	addi	a4,a4,289 # 21212121 <RAM_SIZE+0x21192121>
80001fac:	04e7a823          	sw	a4,80(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:148
    pstContext->s6 = 0x22222222L;
80001fb0:	fe842783          	lw	a5,-24(s0)
80001fb4:	22222737          	lui	a4,0x22222
80001fb8:	22270713          	addi	a4,a4,546 # 22222222 <RAM_SIZE+0x221a2222>
80001fbc:	04e7aa23          	sw	a4,84(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:149
    pstContext->s7 = 0x23232323L;
80001fc0:	fe842783          	lw	a5,-24(s0)
80001fc4:	23232737          	lui	a4,0x23232
80001fc8:	32370713          	addi	a4,a4,803 # 23232323 <RAM_SIZE+0x231b2323>
80001fcc:	04e7ac23          	sw	a4,88(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:150
    pstContext->s8 = 0x24242424L;
80001fd0:	fe842783          	lw	a5,-24(s0)
80001fd4:	24242737          	lui	a4,0x24242
80001fd8:	42470713          	addi	a4,a4,1060 # 24242424 <RAM_SIZE+0x241c2424>
80001fdc:	04e7ae23          	sw	a4,92(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:151
    pstContext->s9 = 0x25252525L;
80001fe0:	fe842783          	lw	a5,-24(s0)
80001fe4:	25252737          	lui	a4,0x25252
80001fe8:	52570713          	addi	a4,a4,1317 # 25252525 <RAM_SIZE+0x251d2525>
80001fec:	06e7a023          	sw	a4,96(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:152
    pstContext->s10 = 0x26262626L;
80001ff0:	fe842783          	lw	a5,-24(s0)
80001ff4:	26262737          	lui	a4,0x26262
80001ff8:	62670713          	addi	a4,a4,1574 # 26262626 <RAM_SIZE+0x261e2626>
80001ffc:	06e7a223          	sw	a4,100(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:153
    pstContext->s11 = 0x27272727L;
80002000:	fe842783          	lw	a5,-24(s0)
80002004:	27272737          	lui	a4,0x27272
80002008:	72770713          	addi	a4,a4,1831 # 27272727 <RAM_SIZE+0x271f2727>
8000200c:	06e7a423          	sw	a4,104(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:154
    pstContext->t3 = 0x28282828L;
80002010:	fe842783          	lw	a5,-24(s0)
80002014:	28283737          	lui	a4,0x28283
80002018:	82870713          	addi	a4,a4,-2008 # 28282828 <RAM_SIZE+0x28202828>
8000201c:	06e7a623          	sw	a4,108(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:155
    pstContext->t4 = 0x29292929L;
80002020:	fe842783          	lw	a5,-24(s0)
80002024:	29293737          	lui	a4,0x29293
80002028:	92970713          	addi	a4,a4,-1751 # 29292929 <RAM_SIZE+0x29212929>
8000202c:	06e7a823          	sw	a4,112(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:156
    pstContext->t5 = 0x30303030L;
80002030:	fe842783          	lw	a5,-24(s0)
80002034:	30303737          	lui	a4,0x30303
80002038:	03070713          	addi	a4,a4,48 # 30303030 <RAM_SIZE+0x30283030>
8000203c:	06e7aa23          	sw	a4,116(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:157
    pstContext->t6 = 0x31313131L;
80002040:	fe842783          	lw	a5,-24(s0)
80002044:	31313737          	lui	a4,0x31313
80002048:	13170713          	addi	a4,a4,305 # 31313131 <RAM_SIZE+0x31293131>
8000204c:	06e7ac23          	sw	a4,120(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:158
    pstContext->mepc =(UINT32)osTaskEntry;
80002050:	800087b7          	lui	a5,0x80008
80002054:	d2078713          	addi	a4,a5,-736 # 80007d20 <__stack_top+0xfffc9720>
80002058:	fe842783          	lw	a5,-24(s0)
8000205c:	06e7ae23          	sw	a4,124(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:159
    return (VOID *)pstContext;
80002060:	fe842783          	lw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw.c:160
}
80002064:	00078513          	mv	a0,a5
80002068:	02c12403          	lw	s0,44(sp)
8000206c:	03010113          	addi	sp,sp,48
80002070:	00008067          	ret
80002074:	0000                	unimp
	...

80002078 <LOS_TickHandler>:
LOS_TickHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:59
Input   : none
output  : none
return  : none
*****************************************************************************/
void LOS_TickHandler(void)
{
80002078:	fe010113          	addi	sp,sp,-32
8000207c:	00112e23          	sw	ra,28(sp)
80002080:	00812c23          	sw	s0,24(sp)
80002084:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:62
    UINT32 uwIntSave;

    uwIntSave = LOS_IntLock();
80002088:	b71ff0ef          	jal	ra,80001bf8 <LOS_IntLock>
8000208c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:63
    g_vuwIntCount++;
80002090:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
80002094:	00178713          	addi	a4,a5,1
80002098:	dce1ae23          	sw	a4,-548(gp) # 8000e10c <g_vuwIntCount>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:64
    LOS_IntRestore(uwIntSave);
8000209c:	fec42503          	lw	a0,-20(s0)
800020a0:	b79ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:66

    osTickHandler();
800020a4:	485060ef          	jal	ra,80008d28 <osTickHandler>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:68
    
    uwIntSave = LOS_IntLock();
800020a8:	b51ff0ef          	jal	ra,80001bf8 <LOS_IntLock>
800020ac:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:69
    g_vuwIntCount--;
800020b0:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
800020b4:	fff78713          	addi	a4,a5,-1
800020b8:	dce1ae23          	sw	a4,-548(gp) # 8000e10c <g_vuwIntCount>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:70
    LOS_IntRestore(uwIntSave);
800020bc:	fec42503          	lw	a0,-20(s0)
800020c0:	b59ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:72
    
    return ;
800020c4:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:73
}
800020c8:	01c12083          	lw	ra,28(sp)
800020cc:	01812403          	lw	s0,24(sp)
800020d0:	02010113          	addi	sp,sp,32
800020d4:	00008067          	ret
800020d8:	0000                	unimp
	...

800020dc <LOS_SetTickSycle>:
LOS_SetTickSycle():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:83
Input   : ticks, the cpu Sycles per tick
output  : none
return  : none
*****************************************************************************/
void LOS_SetTickSycle(UINT32 ticks)
{
800020dc:	fe010113          	addi	sp,sp,-32
800020e0:	00812e23          	sw	s0,28(sp)
800020e4:	02010413          	addi	s0,sp,32
800020e8:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:84
    g_uwCyclesPerTick = ticks;
800020ec:	fec42703          	lw	a4,-20(s0)
800020f0:	eae1a623          	sw	a4,-340(gp) # 8000e1dc <g_uwCyclesPerTick>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:85
    return ;
800020f4:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hw_tick.c:86
}
800020f8:	01c12403          	lw	s0,28(sp)
800020fc:	02010113          	addi	sp,sp,32
80002100:	00008067          	ret
80002104:	0000                	unimp
	...

80002108 <osIntNumGet>:
osIntNumGet():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:128
 Return      : OS_SUCCESS
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT unsigned int osGetVectorAddr(void)
{
    return (UINT32)m_pstHwiForm;
}
80002108:	fe010113          	addi	sp,sp,-32
8000210c:	00112e23          	sw	ra,28(sp)
80002110:	00812c23          	sw	s0,24(sp)
80002114:	02010413          	addi	s0,sp,32
80002118:	ac5ff0ef          	jal	ra,80001bdc <LOS_IntNumGet>
8000211c:	fea42623          	sw	a0,-20(s0)
80002120:	fec42783          	lw	a5,-20(s0)
80002124:	00078513          	mv	a0,a5
80002128:	01c12083          	lw	ra,28(sp)
8000212c:	01812403          	lw	s0,24(sp)
80002130:	02010113          	addi	sp,sp,32
80002134:	00008067          	ret
80002138:	0000                	unimp
	...

8000213c <osHwiDefaultHandler>:
osHwiDefaultHandler():
8000213c:	fe010113          	addi	sp,sp,-32
80002140:	00112e23          	sw	ra,28(sp)
80002144:	00812c23          	sw	s0,24(sp)
80002148:	02010413          	addi	s0,sp,32
8000214c:	fbdff0ef          	jal	ra,80002108 <osIntNumGet>
80002150:	fea42623          	sw	a0,-20(s0)
80002154:	0000006f          	j	80002154 <osHwiDefaultHandler+0x18>
80002158:	0000                	unimp
	...

8000215c <osHwiInit>:
osHwiInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:138
 Input       : None
 Output      : None
 Return      : OS_SUCCESS
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT VOID osHwiInit()
{
8000215c:	fe010113          	addi	sp,sp,-32
80002160:	00112e23          	sw	ra,28(sp)
80002164:	00812c23          	sw	s0,24(sp)
80002168:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:140
    UINT32 uwIndex;
    for(uwIndex = OS_M4_SYS_VECTOR_CNT; uwIndex < OS_M4_VECTOR_CNT; uwIndex++)
8000216c:	01000793          	li	a5,16
80002170:	fef42623          	sw	a5,-20(s0)
80002174:	0300006f          	j	800021a4 <osHwiInit+0x48>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:142 (discriminator 3)
    {
        m_pstHwiForm[uwIndex] = osHwiDefaultHandler;
80002178:	8000e7b7          	lui	a5,0x8000e
8000217c:	fec42703          	lw	a4,-20(s0)
80002180:	00271713          	slli	a4,a4,0x2
80002184:	d0078793          	addi	a5,a5,-768 # 8000dd00 <__stack_top+0xfffcf700>
80002188:	00f707b3          	add	a5,a4,a5
8000218c:	80002737          	lui	a4,0x80002
80002190:	13c70713          	addi	a4,a4,316 # 8000213c <__stack_top+0xfffc3b3c>
80002194:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:140 (discriminator 3)
    for(uwIndex = OS_M4_SYS_VECTOR_CNT; uwIndex < OS_M4_VECTOR_CNT; uwIndex++)
80002198:	fec42783          	lw	a5,-20(s0)
8000219c:	00178793          	addi	a5,a5,1
800021a0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:140 (discriminator 1)
800021a4:	fec42703          	lw	a4,-20(s0)
800021a8:	0ff00793          	li	a5,255
800021ac:	fce7f6e3          	bleu	a4,a5,80002178 <osHwiInit+0x1c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:144
    }
    LosAdapIntInit();
800021b0:	e04ff0ef          	jal	ra,800017b4 <LosAdapIntInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/cpu/riscv/los_hwi.c:146

}
800021b4:	00000013          	nop
800021b8:	01c12083          	lw	ra,28(sp)
800021bc:	01812403          	lw	s0,24(sp)
800021c0:	02010113          	addi	sp,sp,32
800021c4:	00008067          	ret
800021c8:	0000                	unimp
	...

800021cc <osRegister>:
osRegister():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:76
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT VOID osRegister(VOID)
{
800021cc:	ff010113          	addi	sp,sp,-16
800021d0:	00812623          	sw	s0,12(sp)
800021d4:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:77
    g_uwTskMaxNum = LOSCFG_BASE_CORE_TSK_LIMIT + 1; /* Reserved 1 for IDLE */
800021d8:	8001e7b7          	lui	a5,0x8001e
800021dc:	01000713          	li	a4,16
800021e0:	34e7a023          	sw	a4,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:78
    g_sys_mem_addr_end = (UINT32)g_ucMemStart + OS_SYS_MEM_SIZE;
800021e4:	8000e7b7          	lui	a5,0x8000e
800021e8:	1e478713          	addi	a4,a5,484 # 8000e1e4 <__stack_top+0xfffcfbe4>
800021ec:	000107b7          	lui	a5,0x10
800021f0:	00f70733          	add	a4,a4,a5
800021f4:	dee1a023          	sw	a4,-544(gp) # 8000e110 <g_sys_mem_addr_end>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:79
    return;
800021f8:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:80
}
800021fc:	00c12403          	lw	s0,12(sp)
80002200:	01010113          	addi	sp,sp,16
80002204:	00008067          	ret
80002208:	0000                	unimp
	...

8000220c <LOS_EnableTick>:
LOS_EnableTick():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:90
 Input       : None
 Output      : None
 Return      : LOS_OK
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 LOS_EnableTick(void)
{
8000220c:	fe010113          	addi	sp,sp,-32
80002210:	00112e23          	sw	ra,28(sp)
80002214:	00812c23          	sw	s0,24(sp)
80002218:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:93
    UINT32 uwRet;

    uwRet = osTickStart();
8000221c:	d0cff0ef          	jal	ra,80001728 <osTickStart>
80002220:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:95

    if (uwRet != LOS_OK)
80002224:	fec42783          	lw	a5,-20(s0)
80002228:	00078663          	beqz	a5,80002234 <LOS_EnableTick+0x28>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:98
    {
        PRINT_ERR("osTickStart error\n");
        return uwRet;
8000222c:	fec42783          	lw	a5,-20(s0)
80002230:	0080006f          	j	80002238 <LOS_EnableTick+0x2c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:101
    }
		
    return uwRet;
80002234:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:102
}
80002238:	00078513          	mv	a0,a5
8000223c:	01c12083          	lw	ra,28(sp)
80002240:	01812403          	lw	s0,24(sp)
80002244:	02010113          	addi	sp,sp,32
80002248:	00008067          	ret
8000224c:	0000                	unimp
	...

80002250 <LOS_Start>:
LOS_Start():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:111
 Input       : None
 Output      : None
 Return      : LOS_OK
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 LOS_Start(void)
{
80002250:	fe010113          	addi	sp,sp,-32
80002254:	00112e23          	sw	ra,28(sp)
80002258:	00812c23          	sw	s0,24(sp)
8000225c:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:112
    UINT32 uwRet = LOS_OK;
80002260:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:114

    LOS_StartToRun();
80002264:	8a9ff0ef          	jal	ra,80001b0c <LOS_StartToRun>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:116

    return uwRet;
80002268:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:117
}
8000226c:	00078513          	mv	a0,a5
80002270:	01c12083          	lw	ra,28(sp)
80002274:	01812403          	lw	s0,24(sp)
80002278:	02010113          	addi	sp,sp,32
8000227c:	00008067          	ret
80002280:	0000                	unimp
	...

80002284 <osMain>:
osMain():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:127
 Input       : None
 Output      : None
 Return      : LOS_OK
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT int osMain(void)
{
80002284:	fe010113          	addi	sp,sp,-32
80002288:	00112e23          	sw	ra,28(sp)
8000228c:	00812c23          	sw	s0,24(sp)
80002290:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:130
    UINT32 uwRet;

    osRegister();
80002294:	f39ff0ef          	jal	ra,800021cc <osRegister>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:132

    uwRet = osMemSystemInit();
80002298:	6a0000ef          	jal	ra,80002938 <osMemSystemInit>
8000229c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:133
    if (uwRet != LOS_OK)
800022a0:	fec42783          	lw	a5,-20(s0)
800022a4:	00078663          	beqz	a5,800022b0 <osMain+0x2c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:136
    {
        PRINT_ERR("osMemSystemInit error %d\n", uwRet);
        return uwRet;
800022a8:	fec42783          	lw	a5,-20(s0)
800022ac:	0ac0006f          	j	80002358 <osMain+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:141
    }

#if (LOSCFG_PLATFORM_HWI == YES)
    {
        if (g_use_ram_vect)
800022b0:	8000e7b7          	lui	a5,0x8000e
800022b4:	b347c783          	lbu	a5,-1228(a5) # 8000db34 <__stack_top+0xfffcf534>
800022b8:	00078463          	beqz	a5,800022c0 <osMain+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:143
        {
            osHwiInit();
800022bc:	ea1ff0ef          	jal	ra,8000215c <osHwiInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:148
        }
    }
#endif

    uwRet =osTaskInit();
800022c0:	530050ef          	jal	ra,800077f0 <osTaskInit>
800022c4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:149
    if (uwRet != LOS_OK)
800022c8:	fec42783          	lw	a5,-20(s0)
800022cc:	00078663          	beqz	a5,800022d8 <osMain+0x54>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:152
    {
        PRINT_ERR("osTaskInit error\n");
        return uwRet;
800022d0:	fec42783          	lw	a5,-20(s0)
800022d4:	0840006f          	j	80002358 <osMain+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:157
    }

#if (LOSCFG_BASE_IPC_SEM == YES)
    {
        uwRet = osSemInit();
800022d8:	7d0030ef          	jal	ra,80005aa8 <osSemInit>
800022dc:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:158
        if (uwRet != LOS_OK)
800022e0:	fec42783          	lw	a5,-20(s0)
800022e4:	00078663          	beqz	a5,800022f0 <osMain+0x6c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:160
        {
            return uwRet;
800022e8:	fec42783          	lw	a5,-20(s0)
800022ec:	06c0006f          	j	80002358 <osMain+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:167
    }
#endif

#if (LOSCFG_BASE_IPC_MUX == YES)
    {
        uwRet = osMuxInit();
800022f0:	0fc020ef          	jal	ra,800043ec <osMuxInit>
800022f4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:168
        if (uwRet != LOS_OK)
800022f8:	fec42783          	lw	a5,-20(s0)
800022fc:	00078663          	beqz	a5,80002308 <osMain+0x84>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:170
        {
            return uwRet;
80002300:	fec42783          	lw	a5,-20(s0)
80002304:	0540006f          	j	80002358 <osMain+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:177
    }
#endif

#if (LOSCFG_BASE_IPC_QUEUE == YES)
    {
        uwRet = osQueueInit();
80002308:	261020ef          	jal	ra,80004d68 <osQueueInit>
8000230c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:178
        if (uwRet != LOS_OK)
80002310:	fec42783          	lw	a5,-20(s0)
80002314:	00078663          	beqz	a5,80002320 <osMain+0x9c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:181
        {
            PRINT_ERR("osQueueInit error\n");
            return uwRet;
80002318:	fec42783          	lw	a5,-20(s0)
8000231c:	03c0006f          	j	80002358 <osMain+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:188
    }
#endif

#if (LOSCFG_BASE_CORE_SWTMR == YES)
    {
        uwRet = osSwTmrInit();
80002320:	2ec040ef          	jal	ra,8000660c <osSwTmrInit>
80002324:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:189
        if (uwRet != LOS_OK)
80002328:	fec42783          	lw	a5,-20(s0)
8000232c:	00078663          	beqz	a5,80002338 <osMain+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:192
        {
            PRINT_ERR("osSwTmrInit error\n");
            return uwRet;
80002330:	fec42783          	lw	a5,-20(s0)
80002334:	0240006f          	j	80002358 <osMain+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:198
        }
    }
#endif

    #if(LOSCFG_BASE_CORE_TIMESLICE == YES)
    osTimesliceInit();
80002338:	26d060ef          	jal	ra,80008da4 <osTimesliceInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:201
    #endif

    uwRet = osIdleTaskCreate();
8000233c:	700050ef          	jal	ra,80007a3c <osIdleTaskCreate>
80002340:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:202
    if (uwRet != LOS_OK) {
80002344:	fec42783          	lw	a5,-20(s0)
80002348:	00078663          	beqz	a5,80002354 <osMain+0xd0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:203
        return uwRet;
8000234c:	fec42783          	lw	a5,-20(s0)
80002350:	0080006f          	j	80002358 <osMain+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:206
    }

    return LOS_OK;
80002354:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:207
}
80002358:	00078513          	mv	a0,a5
8000235c:	01c12083          	lw	ra,28(sp)
80002360:	01812403          	lw	s0,24(sp)
80002364:	02010113          	addi	sp,sp,32
80002368:	00008067          	ret
8000236c:	0000                	unimp
	...

80002370 <LOS_KernelInit>:
LOS_KernelInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:210

LITE_OS_SEC_TEXT_INIT int LOS_KernelInit(void)
{
80002370:	fe010113          	addi	sp,sp,-32
80002374:	00112e23          	sw	ra,28(sp)
80002378:	00812c23          	sw	s0,24(sp)
8000237c:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:212
    UINT32 uwRet;
    uwRet = osMain();
80002380:	f05ff0ef          	jal	ra,80002284 <osMain>
80002384:	00050793          	mv	a5,a0
80002388:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:213
    if (uwRet != LOS_OK) {
8000238c:	fec42783          	lw	a5,-20(s0)
80002390:	00078663          	beqz	a5,8000239c <LOS_KernelInit+0x2c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:214
        return LOS_NOK;
80002394:	00100793          	li	a5,1
80002398:	0080006f          	j	800023a0 <LOS_KernelInit+0x30>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:216
    }
		return LOS_OK;
8000239c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/config/los_config.c:217
}
800023a0:	00078513          	mv	a0,a5
800023a4:	01c12083          	lw	ra,28(sp)
800023a8:	01812403          	lw	s0,24(sp)
800023ac:	02010113          	addi	sp,sp,32
800023b0:	00008067          	ret
800023b4:	0000                	unimp
	...

800023b8 <LOS_Align>:
LOS_Align():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/misc/los_misc.c:42
#include "los_task.ph"

#include "los_hwi.h"

LITE_OS_SEC_TEXT UINT32 LOS_Align(UINT32 uwAddr, UINT32 uwBoundary)
{
800023b8:	fe010113          	addi	sp,sp,-32
800023bc:	00812e23          	sw	s0,28(sp)
800023c0:	02010413          	addi	s0,sp,32
800023c4:	fea42623          	sw	a0,-20(s0)
800023c8:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/misc/los_misc.c:43
    if (uwAddr + uwBoundary - 1 > uwAddr) {
800023cc:	fec42703          	lw	a4,-20(s0)
800023d0:	fe842783          	lw	a5,-24(s0)
800023d4:	00f707b3          	add	a5,a4,a5
800023d8:	fff78793          	addi	a5,a5,-1
800023dc:	fec42703          	lw	a4,-20(s0)
800023e0:	02f77263          	bleu	a5,a4,80002404 <LOS_Align+0x4c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/misc/los_misc.c:44
        return (uwAddr + uwBoundary - 1) & ~(uwBoundary - 1);
800023e4:	fec42703          	lw	a4,-20(s0)
800023e8:	fe842783          	lw	a5,-24(s0)
800023ec:	00f707b3          	add	a5,a4,a5
800023f0:	fff78713          	addi	a4,a5,-1
800023f4:	fe842783          	lw	a5,-24(s0)
800023f8:	40f007b3          	neg	a5,a5
800023fc:	00f777b3          	and	a5,a4,a5
80002400:	0140006f          	j	80002414 <LOS_Align+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/misc/los_misc.c:46
    } else {
        return uwAddr & ~(uwBoundary - 1);
80002404:	fe842783          	lw	a5,-24(s0)
80002408:	40f00733          	neg	a4,a5
8000240c:	fec42783          	lw	a5,-20(s0)
80002410:	00f777b3          	and	a5,a4,a5
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/misc/los_misc.c:48
    }
}
80002414:	00078513          	mv	a0,a5
80002418:	01c12403          	lw	s0,28(sp)
8000241c:	02010113          	addi	sp,sp,32
80002420:	00008067          	ret
80002424:	0000                	unimp
	...

80002428 <osCheckBoxMem>:
osCheckBoxMem():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:58
#define OS_MEMBOX_USER_ADDR(addr) ((VOID *)((UINT8 *)(addr) + LOS_MEMBOX_MAGIC_SIZE))
#define OS_MEMBOX_NODE_ADDR(addr) ((LOS_MEMBOX_NODE *)((UINT8 *)(addr) - LOS_MEMBOX_MAGIC_SIZE))


INLINE UINT32 osCheckBoxMem(const LOS_MEMBOX_INFO *pstBoxInfo, const VOID *pNode)
{
80002428:	fd010113          	addi	sp,sp,-48
8000242c:	02812623          	sw	s0,44(sp)
80002430:	03010413          	addi	s0,sp,48
80002434:	fca42e23          	sw	a0,-36(s0)
80002438:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:61
    UINT32 uwOffSet;

    if (pstBoxInfo->uwBlkSize == 0)
8000243c:	fdc42783          	lw	a5,-36(s0)
80002440:	0007a783          	lw	a5,0(a5)
80002444:	00079663          	bnez	a5,80002450 <osCheckBoxMem+0x28>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:63
    {
        return LOS_NOK;
80002448:	00100793          	li	a5,1
8000244c:	0740006f          	j	800024c0 <osCheckBoxMem+0x98>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:66
    }

    uwOffSet = ((UINT32)pNode - (UINT32)(pstBoxInfo + 1));
80002450:	fd842783          	lw	a5,-40(s0)
80002454:	fdc42703          	lw	a4,-36(s0)
80002458:	00c70713          	addi	a4,a4,12
8000245c:	40e787b3          	sub	a5,a5,a4
80002460:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:67
    if ((uwOffSet % pstBoxInfo->uwBlkSize) != 0)
80002464:	fdc42783          	lw	a5,-36(s0)
80002468:	0007a783          	lw	a5,0(a5)
8000246c:	fec42703          	lw	a4,-20(s0)
80002470:	02f777b3          	remu	a5,a4,a5
80002474:	00078663          	beqz	a5,80002480 <osCheckBoxMem+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:69
    {
        return LOS_NOK;
80002478:	00100793          	li	a5,1
8000247c:	0440006f          	j	800024c0 <osCheckBoxMem+0x98>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:72
    }

    if ((uwOffSet / pstBoxInfo->uwBlkSize) >= pstBoxInfo->uwBlkNum)
80002480:	fdc42783          	lw	a5,-36(s0)
80002484:	0007a783          	lw	a5,0(a5)
80002488:	fec42703          	lw	a4,-20(s0)
8000248c:	02f75733          	divu	a4,a4,a5
80002490:	fdc42783          	lw	a5,-36(s0)
80002494:	0047a783          	lw	a5,4(a5)
80002498:	00f76663          	bltu	a4,a5,800024a4 <osCheckBoxMem+0x7c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:74
    {
        return LOS_NOK;
8000249c:	00100793          	li	a5,1
800024a0:	0200006f          	j	800024c0 <osCheckBoxMem+0x98>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:77
    }

    return OS_MEMBOX_CHECK_MAGIC(pNode);
800024a4:	fd842783          	lw	a5,-40(s0)
800024a8:	0007a703          	lw	a4,0(a5)
800024ac:	5aa5a7b7          	lui	a5,0x5aa5a
800024b0:	55b78793          	addi	a5,a5,1371 # 5aa5a55b <RAM_SIZE+0x5a9da55b>
800024b4:	00f707b3          	add	a5,a4,a5
800024b8:	00f037b3          	snez	a5,a5
800024bc:	0ff7f793          	andi	a5,a5,255
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:78
}
800024c0:	00078513          	mv	a0,a5
800024c4:	02c12403          	lw	s0,44(sp)
800024c8:	03010113          	addi	sp,sp,48
800024cc:	00008067          	ret
800024d0:	0000                	unimp
	...

800024d4 <LOS_MemboxInit>:
LOS_MemboxInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:81

LITE_OS_SEC_TEXT_INIT UINT32 LOS_MemboxInit(VOID *pPool, UINT32 uwBoxSize, UINT32 uwBlkSize)
 {
800024d4:	fd010113          	addi	sp,sp,-48
800024d8:	02112623          	sw	ra,44(sp)
800024dc:	02812423          	sw	s0,40(sp)
800024e0:	03010413          	addi	s0,sp,48
800024e4:	fca42e23          	sw	a0,-36(s0)
800024e8:	fcb42c23          	sw	a1,-40(s0)
800024ec:	fcc42a23          	sw	a2,-44(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:82
    LOS_MEMBOX_INFO *pstBoxInfo = (LOS_MEMBOX_INFO *)pPool;
800024f0:	fdc42783          	lw	a5,-36(s0)
800024f4:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:83
    LOS_MEMBOX_NODE *pstNode = (LOS_MEMBOX_NODE *)NULL;
800024f8:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:87
    UINT32 i;
    UINTPTR uvIntSave;

    if (pPool == NULL)
800024fc:	fdc42783          	lw	a5,-36(s0)
80002500:	00079663          	bnez	a5,8000250c <LOS_MemboxInit+0x38>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:89
    {
        return LOS_NOK;
80002504:	00100793          	li	a5,1
80002508:	0f40006f          	j	800025fc <LOS_MemboxInit+0x128>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:92
    }

    if (uwBlkSize == 0)
8000250c:	fd442783          	lw	a5,-44(s0)
80002510:	00079663          	bnez	a5,8000251c <LOS_MemboxInit+0x48>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:94
    {
        return LOS_NOK;
80002514:	00100793          	li	a5,1
80002518:	0e40006f          	j	800025fc <LOS_MemboxInit+0x128>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:97
    }

    if (uwBoxSize < sizeof(LOS_MEMBOX_INFO))
8000251c:	fd842703          	lw	a4,-40(s0)
80002520:	00b00793          	li	a5,11
80002524:	00e7e663          	bltu	a5,a4,80002530 <LOS_MemboxInit+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:99
    {
        return LOS_NOK;
80002528:	00100793          	li	a5,1
8000252c:	0d00006f          	j	800025fc <LOS_MemboxInit+0x128>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:102
    }

    uvIntSave = LOS_IntLock();
80002530:	ec8ff0ef          	jal	ra,80001bf8 <LOS_IntLock>
80002534:	fea42023          	sw	a0,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:103
    pstBoxInfo->uwBlkSize = LOS_MEMBOX_ALLIGNED(uwBlkSize + LOS_MEMBOX_MAGIC_SIZE);
80002538:	fd442783          	lw	a5,-44(s0)
8000253c:	00778793          	addi	a5,a5,7
80002540:	ffc7f713          	andi	a4,a5,-4
80002544:	fe442783          	lw	a5,-28(s0)
80002548:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:104
    pstBoxInfo->uwBlkNum = ((uwBoxSize - sizeof(LOS_MEMBOX_INFO)) /pstBoxInfo->uwBlkSize);
8000254c:	fd842783          	lw	a5,-40(s0)
80002550:	ff478713          	addi	a4,a5,-12
80002554:	fe442783          	lw	a5,-28(s0)
80002558:	0007a783          	lw	a5,0(a5)
8000255c:	02f75733          	divu	a4,a4,a5
80002560:	fe442783          	lw	a5,-28(s0)
80002564:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:106

    if (pstBoxInfo->uwBlkNum == 0)
80002568:	fe442783          	lw	a5,-28(s0)
8000256c:	0047a783          	lw	a5,4(a5)
80002570:	00079a63          	bnez	a5,80002584 <LOS_MemboxInit+0xb0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:108
    {
        LOS_IntRestore(uvIntSave);
80002574:	fe042503          	lw	a0,-32(s0)
80002578:	ea0ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:109
        return LOS_NOK;
8000257c:	00100793          	li	a5,1
80002580:	07c0006f          	j	800025fc <LOS_MemboxInit+0x128>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:112
    }

    pstNode = (LOS_MEMBOX_NODE *)(pstBoxInfo + 1);
80002584:	fe442783          	lw	a5,-28(s0)
80002588:	00c78793          	addi	a5,a5,12
8000258c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:114

    pstBoxInfo->stFreeList.pstNext = pstNode;
80002590:	fe442783          	lw	a5,-28(s0)
80002594:	fec42703          	lw	a4,-20(s0)
80002598:	00e7a423          	sw	a4,8(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:116

    for (i = 0; i < pstBoxInfo->uwBlkNum - 1; ++i)
8000259c:	fe042423          	sw	zero,-24(s0)
800025a0:	0340006f          	j	800025d4 <LOS_MemboxInit+0x100>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:118 (discriminator 3)
    {
        pstNode->pstNext = OS_MEMBOX_NEXT(pstNode, pstBoxInfo->uwBlkSize);
800025a4:	fe442783          	lw	a5,-28(s0)
800025a8:	0007a783          	lw	a5,0(a5)
800025ac:	fec42703          	lw	a4,-20(s0)
800025b0:	00f70733          	add	a4,a4,a5
800025b4:	fec42783          	lw	a5,-20(s0)
800025b8:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:119 (discriminator 3)
        pstNode = pstNode->pstNext;
800025bc:	fec42783          	lw	a5,-20(s0)
800025c0:	0007a783          	lw	a5,0(a5)
800025c4:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:116 (discriminator 3)
    for (i = 0; i < pstBoxInfo->uwBlkNum - 1; ++i)
800025c8:	fe842783          	lw	a5,-24(s0)
800025cc:	00178793          	addi	a5,a5,1
800025d0:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:116 (discriminator 1)
800025d4:	fe442783          	lw	a5,-28(s0)
800025d8:	0047a783          	lw	a5,4(a5)
800025dc:	fff78793          	addi	a5,a5,-1
800025e0:	fe842703          	lw	a4,-24(s0)
800025e4:	fcf760e3          	bltu	a4,a5,800025a4 <LOS_MemboxInit+0xd0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:122
    }

    pstNode->pstNext = (LOS_MEMBOX_NODE *)NULL;
800025e8:	fec42783          	lw	a5,-20(s0)
800025ec:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:124

    LOS_IntRestore(uvIntSave);
800025f0:	fe042503          	lw	a0,-32(s0)
800025f4:	e24ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:126

    return LOS_OK;
800025f8:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:127
}
800025fc:	00078513          	mv	a0,a5
80002600:	02c12083          	lw	ra,44(sp)
80002604:	02812403          	lw	s0,40(sp)
80002608:	03010113          	addi	sp,sp,48
8000260c:	00008067          	ret
80002610:	0000                	unimp
	...

80002614 <LOS_MemboxAlloc>:
LOS_MemboxAlloc():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:130

LITE_OS_SEC_TEXT VOID *LOS_MemboxAlloc(VOID *pPool)
{
80002614:	fd010113          	addi	sp,sp,-48
80002618:	02112623          	sw	ra,44(sp)
8000261c:	02812423          	sw	s0,40(sp)
80002620:	03010413          	addi	s0,sp,48
80002624:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:131
    LOS_MEMBOX_INFO *pstBoxInfo = (LOS_MEMBOX_INFO *)pPool;
80002628:	fdc42783          	lw	a5,-36(s0)
8000262c:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:132
    LOS_MEMBOX_NODE *pstNode = (LOS_MEMBOX_NODE *)NULL;
80002630:	fe042223          	sw	zero,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:133
    LOS_MEMBOX_NODE *pstRet = (LOS_MEMBOX_NODE *)NULL;
80002634:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:136
    UINTPTR uvIntSave;

    if (pPool == NULL)
80002638:	fdc42783          	lw	a5,-36(s0)
8000263c:	00079663          	bnez	a5,80002648 <LOS_MemboxAlloc+0x34>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:138
    {
        return NULL;
80002640:	00000793          	li	a5,0
80002644:	0700006f          	j	800026b4 <LOS_MemboxAlloc+0xa0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:141
    }

    uvIntSave = LOS_IntLock();
80002648:	db0ff0ef          	jal	ra,80001bf8 <LOS_IntLock>
8000264c:	fea42023          	sw	a0,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:142
    pstNode = &(pstBoxInfo->stFreeList);
80002650:	fe842783          	lw	a5,-24(s0)
80002654:	00878793          	addi	a5,a5,8
80002658:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:143
    if (pstNode->pstNext != NULL)
8000265c:	fe442783          	lw	a5,-28(s0)
80002660:	0007a783          	lw	a5,0(a5)
80002664:	02078863          	beqz	a5,80002694 <LOS_MemboxAlloc+0x80>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:145
    {
        pstRet = pstNode->pstNext;
80002668:	fe442783          	lw	a5,-28(s0)
8000266c:	0007a783          	lw	a5,0(a5)
80002670:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:146
        pstNode->pstNext = pstRet->pstNext;
80002674:	fec42783          	lw	a5,-20(s0)
80002678:	0007a703          	lw	a4,0(a5)
8000267c:	fe442783          	lw	a5,-28(s0)
80002680:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:147
        OS_MEMBOX_SET_MAGIC(pstRet);
80002684:	fec42783          	lw	a5,-20(s0)
80002688:	a55a6737          	lui	a4,0xa55a6
8000268c:	aa570713          	addi	a4,a4,-1371 # a55a5aa5 <__stack_top+0x255674a5>
80002690:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:150
    }

    LOS_IntRestore(uvIntSave);
80002694:	fe042503          	lw	a0,-32(s0)
80002698:	d80ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:152

    return pstRet == NULL ?  NULL : OS_MEMBOX_USER_ADDR(pstRet);
8000269c:	fec42783          	lw	a5,-20(s0)
800026a0:	00078863          	beqz	a5,800026b0 <LOS_MemboxAlloc+0x9c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:152 (discriminator 1)
800026a4:	fec42783          	lw	a5,-20(s0)
800026a8:	00478793          	addi	a5,a5,4
800026ac:	0080006f          	j	800026b4 <LOS_MemboxAlloc+0xa0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:152 (discriminator 2)
800026b0:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:153
}
800026b4:	00078513          	mv	a0,a5
800026b8:	02c12083          	lw	ra,44(sp)
800026bc:	02812403          	lw	s0,40(sp)
800026c0:	03010113          	addi	sp,sp,48
800026c4:	00008067          	ret
800026c8:	0000                	unimp
	...

800026cc <LOS_MemboxFree>:
LOS_MemboxFree():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:156

LITE_OS_SEC_TEXT UINT32 LOS_MemboxFree(VOID *pPool, VOID *pBox)
{
800026cc:	fd010113          	addi	sp,sp,-48
800026d0:	02112623          	sw	ra,44(sp)
800026d4:	02812423          	sw	s0,40(sp)
800026d8:	03010413          	addi	s0,sp,48
800026dc:	fca42e23          	sw	a0,-36(s0)
800026e0:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:157
    LOS_MEMBOX_INFO *pstBoxInfo = (LOS_MEMBOX_INFO *)pPool;
800026e4:	fdc42783          	lw	a5,-36(s0)
800026e8:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:158
    UINT32 uwRet = LOS_NOK;
800026ec:	00100793          	li	a5,1
800026f0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:161
    UINTPTR uvIntSave;

    if (pPool == NULL || pBox == NULL)
800026f4:	fdc42783          	lw	a5,-36(s0)
800026f8:	00078663          	beqz	a5,80002704 <LOS_MemboxFree+0x38>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:161 (discriminator 1)
800026fc:	fd842783          	lw	a5,-40(s0)
80002700:	00079663          	bnez	a5,8000270c <LOS_MemboxFree+0x40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:163
    {
        return LOS_NOK;
80002704:	00100793          	li	a5,1
80002708:	0600006f          	j	80002768 <LOS_MemboxFree+0x9c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:166
    }

    uvIntSave = LOS_IntLock();
8000270c:	cecff0ef          	jal	ra,80001bf8 <LOS_IntLock>
80002710:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:169
    do
    {
        LOS_MEMBOX_NODE *pstNode = OS_MEMBOX_NODE_ADDR(pBox);
80002714:	fd842783          	lw	a5,-40(s0)
80002718:	ffc78793          	addi	a5,a5,-4
8000271c:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:171

        if (osCheckBoxMem(pstBoxInfo, pstNode) != LOS_OK)
80002720:	fe042583          	lw	a1,-32(s0)
80002724:	fe842503          	lw	a0,-24(s0)
80002728:	d01ff0ef          	jal	ra,80002428 <osCheckBoxMem>
8000272c:	00050793          	mv	a5,a0
80002730:	02079463          	bnez	a5,80002758 <LOS_MemboxFree+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:176
        {
            break;
        }

        pstNode->pstNext = pstBoxInfo->stFreeList.pstNext;
80002734:	fe842783          	lw	a5,-24(s0)
80002738:	0087a703          	lw	a4,8(a5)
8000273c:	fe042783          	lw	a5,-32(s0)
80002740:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:177
        pstBoxInfo->stFreeList.pstNext = pstNode;
80002744:	fe842783          	lw	a5,-24(s0)
80002748:	fe042703          	lw	a4,-32(s0)
8000274c:	00e7a423          	sw	a4,8(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:178
        uwRet = LOS_OK;
80002750:	fe042623          	sw	zero,-20(s0)
80002754:	0080006f          	j	8000275c <LOS_MemboxFree+0x90>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:173
            break;
80002758:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:181
    } while (0);

    LOS_IntRestore(uvIntSave);
8000275c:	fe442503          	lw	a0,-28(s0)
80002760:	cb8ff0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:183

    return uwRet;
80002764:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:185

}
80002768:	00078513          	mv	a0,a5
8000276c:	02c12083          	lw	ra,44(sp)
80002770:	02812403          	lw	s0,40(sp)
80002774:	03010113          	addi	sp,sp,48
80002778:	00008067          	ret
8000277c:	0000                	unimp
	...

80002780 <LOS_MemboxClr>:
LOS_MemboxClr():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:188

LITE_OS_SEC_TEXT_MINOR VOID LOS_MemboxClr(VOID *pPool, VOID *pBox)
{
80002780:	fd010113          	addi	sp,sp,-48
80002784:	02112623          	sw	ra,44(sp)
80002788:	02812423          	sw	s0,40(sp)
8000278c:	03010413          	addi	s0,sp,48
80002790:	fca42e23          	sw	a0,-36(s0)
80002794:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:189
    LOS_MEMBOX_INFO *pstBoxInfo = (LOS_MEMBOX_INFO *)pPool;
80002798:	fdc42783          	lw	a5,-36(s0)
8000279c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:191

    if (pPool == NULL || pBox == NULL)
800027a0:	fdc42783          	lw	a5,-36(s0)
800027a4:	02078663          	beqz	a5,800027d0 <LOS_MemboxClr+0x50>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:191 (discriminator 1)
800027a8:	fd842783          	lw	a5,-40(s0)
800027ac:	02078263          	beqz	a5,800027d0 <LOS_MemboxClr+0x50>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:196
    {
        return;
    }

    (VOID)memset(pBox, 0, pstBoxInfo->uwBlkSize - LOS_MEMBOX_MAGIC_SIZE);
800027b0:	fec42783          	lw	a5,-20(s0)
800027b4:	0007a783          	lw	a5,0(a5)
800027b8:	ffc78793          	addi	a5,a5,-4
800027bc:	00078613          	mv	a2,a5
800027c0:	00000593          	li	a1,0
800027c4:	fd842503          	lw	a0,-40(s0)
800027c8:	404080ef          	jal	ra,8000abcc <memset>
800027cc:	0080006f          	j	800027d4 <LOS_MemboxClr+0x54>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:193
        return;
800027d0:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_membox.c:197
}
800027d4:	02c12083          	lw	ra,44(sp)
800027d8:	02812403          	lw	s0,40(sp)
800027dc:	03010113          	addi	sp,sp,48
800027e0:	00008067          	ret
800027e4:	0000                	unimp
	...

800027e8 <LOS_ListAdd>:
LOS_ListAdd():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:451
    {
        OS_MEM_REDUCE_USED(pstNode->uwSizeAndFlag - uwAllocSize);
        osMemSpitNode(pPool, pstNode, uwAllocSize);
    }
    OS_MEM_NODE_SET_USED_FLAG(pstNode->uwSizeAndFlag);
}
800027e8:	fe010113          	addi	sp,sp,-32
800027ec:	00812e23          	sw	s0,28(sp)
800027f0:	02010413          	addi	s0,sp,32
800027f4:	fea42623          	sw	a0,-20(s0)
800027f8:	feb42423          	sw	a1,-24(s0)
800027fc:	fec42783          	lw	a5,-20(s0)
80002800:	0047a703          	lw	a4,4(a5)
80002804:	fe842783          	lw	a5,-24(s0)
80002808:	00e7a223          	sw	a4,4(a5)
8000280c:	fe842783          	lw	a5,-24(s0)
80002810:	fec42703          	lw	a4,-20(s0)
80002814:	00e7a023          	sw	a4,0(a5)
80002818:	fec42783          	lw	a5,-20(s0)
8000281c:	0047a783          	lw	a5,4(a5)
80002820:	fe842703          	lw	a4,-24(s0)
80002824:	00e7a023          	sw	a4,0(a5)
80002828:	fec42783          	lw	a5,-20(s0)
8000282c:	fe842703          	lw	a4,-24(s0)
80002830:	00e7a223          	sw	a4,4(a5)
80002834:	00000013          	nop
80002838:	01c12403          	lw	s0,28(sp)
8000283c:	02010113          	addi	sp,sp,32
80002840:	00008067          	ret
80002844:	0000                	unimp
	...

80002848 <LOS_ListTailInsert>:
LOS_ListTailInsert():
80002848:	fe010113          	addi	sp,sp,-32
8000284c:	00112e23          	sw	ra,28(sp)
80002850:	00812c23          	sw	s0,24(sp)
80002854:	02010413          	addi	s0,sp,32
80002858:	fea42623          	sw	a0,-20(s0)
8000285c:	feb42423          	sw	a1,-24(s0)
80002860:	fec42783          	lw	a5,-20(s0)
80002864:	0007a783          	lw	a5,0(a5)
80002868:	fe842583          	lw	a1,-24(s0)
8000286c:	00078513          	mv	a0,a5
80002870:	f79ff0ef          	jal	ra,800027e8 <LOS_ListAdd>
80002874:	00000013          	nop
80002878:	01c12083          	lw	ra,28(sp)
8000287c:	01812403          	lw	s0,24(sp)
80002880:	02010113          	addi	sp,sp,32
80002884:	00008067          	ret
80002888:	0000                	unimp
	...

8000288c <LOS_ListDelete>:
LOS_ListDelete():
8000288c:	fe010113          	addi	sp,sp,-32
80002890:	00812e23          	sw	s0,28(sp)
80002894:	02010413          	addi	s0,sp,32
80002898:	fea42623          	sw	a0,-20(s0)
8000289c:	fec42783          	lw	a5,-20(s0)
800028a0:	0047a783          	lw	a5,4(a5)
800028a4:	fec42703          	lw	a4,-20(s0)
800028a8:	00072703          	lw	a4,0(a4)
800028ac:	00e7a023          	sw	a4,0(a5)
800028b0:	fec42783          	lw	a5,-20(s0)
800028b4:	0007a783          	lw	a5,0(a5)
800028b8:	fec42703          	lw	a4,-20(s0)
800028bc:	00472703          	lw	a4,4(a4)
800028c0:	00e7a223          	sw	a4,4(a5)
800028c4:	fec42783          	lw	a5,-20(s0)
800028c8:	0007a223          	sw	zero,4(a5)
800028cc:	fec42783          	lw	a5,-20(s0)
800028d0:	0007a023          	sw	zero,0(a5)
800028d4:	00000013          	nop
800028d8:	01c12403          	lw	s0,28(sp)
800028dc:	02010113          	addi	sp,sp,32
800028e0:	00008067          	ret
800028e4:	0000                	unimp
	...

800028e8 <LOS_DLnkNextMultiHead>:
LOS_DLnkNextMultiHead():
800028e8:	fd010113          	addi	sp,sp,-48
800028ec:	02812623          	sw	s0,44(sp)
800028f0:	03010413          	addi	s0,sp,48
800028f4:	fca42e23          	sw	a0,-36(s0)
800028f8:	fcb42c23          	sw	a1,-40(s0)
800028fc:	fdc42783          	lw	a5,-36(s0)
80002900:	fef42623          	sw	a5,-20(s0)
80002904:	fec42783          	lw	a5,-20(s0)
80002908:	0d078793          	addi	a5,a5,208
8000290c:	fd842703          	lw	a4,-40(s0)
80002910:	00f70863          	beq	a4,a5,80002920 <LOS_DLnkNextMultiHead+0x38>
80002914:	fd842783          	lw	a5,-40(s0)
80002918:	00878793          	addi	a5,a5,8
8000291c:	0080006f          	j	80002924 <LOS_DLnkNextMultiHead+0x3c>
80002920:	00000793          	li	a5,0
80002924:	00078513          	mv	a0,a5
80002928:	02c12403          	lw	s0,44(sp)
8000292c:	03010113          	addi	sp,sp,48
80002930:	00008067          	ret
80002934:	0000                	unimp
	...

80002938 <osMemSystemInit>:
osMemSystemInit():
80002938:	fe010113          	addi	sp,sp,-32
8000293c:	00112e23          	sw	ra,28(sp)
80002940:	00812c23          	sw	s0,24(sp)
80002944:	02010413          	addi	s0,sp,32
80002948:	8000e737          	lui	a4,0x8000e
8000294c:	1e470713          	addi	a4,a4,484 # 8000e1e4 <__stack_top+0xfffcfbe4>
80002950:	eae1a823          	sw	a4,-336(gp) # 8000e1e0 <m_aucSysMem0>
80002954:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80002958:	000105b7          	lui	a1,0x10
8000295c:	00078513          	mv	a0,a5
80002960:	7e0000ef          	jal	ra,80003140 <LOS_MemInit>
80002964:	fea42623          	sw	a0,-20(s0)
80002968:	fec42783          	lw	a5,-20(s0)
8000296c:	00078513          	mv	a0,a5
80002970:	01c12083          	lw	ra,28(sp)
80002974:	01812403          	lw	s0,24(sp)
80002978:	02010113          	addi	sp,sp,32
8000297c:	00008067          	ret
80002980:	0000                	unimp
	...

80002984 <osMemFindSuitableFreeBlock>:
osMemFindSuitableFreeBlock():
80002984:	fd010113          	addi	sp,sp,-48
80002988:	02112623          	sw	ra,44(sp)
8000298c:	02812423          	sw	s0,40(sp)
80002990:	03010413          	addi	s0,sp,48
80002994:	fca42e23          	sw	a0,-36(s0)
80002998:	fcb42c23          	sw	a1,-40(s0)
8000299c:	fe042623          	sw	zero,-20(s0)
800029a0:	fdc42783          	lw	a5,-36(s0)
800029a4:	00878793          	addi	a5,a5,8
800029a8:	fd842583          	lw	a1,-40(s0)
800029ac:	00078513          	mv	a0,a5
800029b0:	044010ef          	jal	ra,800039f4 <LOS_DLnkMultiHead>
800029b4:	fea42623          	sw	a0,-20(s0)
800029b8:	0600006f          	j	80002a18 <osMemFindSuitableFreeBlock+0x94>
800029bc:	fe042423          	sw	zero,-24(s0)
800029c0:	fec42783          	lw	a5,-20(s0)
800029c4:	0047a783          	lw	a5,4(a5)
800029c8:	fef42423          	sw	a5,-24(s0)
800029cc:	0280006f          	j	800029f4 <osMemFindSuitableFreeBlock+0x70>
800029d0:	fe842783          	lw	a5,-24(s0)
800029d4:	00c7a783          	lw	a5,12(a5)
800029d8:	fd842703          	lw	a4,-40(s0)
800029dc:	00e7e663          	bltu	a5,a4,800029e8 <osMemFindSuitableFreeBlock+0x64>
800029e0:	fe842783          	lw	a5,-24(s0)
800029e4:	0400006f          	j	80002a24 <osMemFindSuitableFreeBlock+0xa0>
800029e8:	fe842783          	lw	a5,-24(s0)
800029ec:	0047a783          	lw	a5,4(a5)
800029f0:	fef42423          	sw	a5,-24(s0)
800029f4:	fe842783          	lw	a5,-24(s0)
800029f8:	fec42703          	lw	a4,-20(s0)
800029fc:	fcf71ae3          	bne	a4,a5,800029d0 <osMemFindSuitableFreeBlock+0x4c>
80002a00:	fdc42783          	lw	a5,-36(s0)
80002a04:	00878793          	addi	a5,a5,8
80002a08:	fec42583          	lw	a1,-20(s0)
80002a0c:	00078513          	mv	a0,a5
80002a10:	ed9ff0ef          	jal	ra,800028e8 <LOS_DLnkNextMultiHead>
80002a14:	fea42623          	sw	a0,-20(s0)
80002a18:	fec42783          	lw	a5,-20(s0)
80002a1c:	fa0790e3          	bnez	a5,800029bc <osMemFindSuitableFreeBlock+0x38>
80002a20:	00000793          	li	a5,0
80002a24:	00078513          	mv	a0,a5
80002a28:	02c12083          	lw	ra,44(sp)
80002a2c:	02812403          	lw	s0,40(sp)
80002a30:	03010113          	addi	sp,sp,48
80002a34:	00008067          	ret
80002a38:	0000                	unimp
	...

80002a3c <osMemClearNode>:
osMemClearNode():
80002a3c:	fe010113          	addi	sp,sp,-32
80002a40:	00812e23          	sw	s0,28(sp)
80002a44:	02010413          	addi	s0,sp,32
80002a48:	fea42623          	sw	a0,-20(s0)
80002a4c:	fec42783          	lw	a5,-20(s0)
80002a50:	0007a023          	sw	zero,0(a5)
80002a54:	fec42783          	lw	a5,-20(s0)
80002a58:	0007a223          	sw	zero,4(a5)
80002a5c:	fec42783          	lw	a5,-20(s0)
80002a60:	0007a423          	sw	zero,8(a5)
80002a64:	00000013          	nop
80002a68:	01c12403          	lw	s0,28(sp)
80002a6c:	02010113          	addi	sp,sp,32
80002a70:	00008067          	ret
80002a74:	0000                	unimp
	...

80002a78 <osMemMergeNode>:
osMemMergeNode():
80002a78:	fd010113          	addi	sp,sp,-48
80002a7c:	02112623          	sw	ra,44(sp)
80002a80:	02812423          	sw	s0,40(sp)
80002a84:	03010413          	addi	s0,sp,48
80002a88:	fca42e23          	sw	a0,-36(s0)
80002a8c:	fe042623          	sw	zero,-20(s0)
80002a90:	fdc42783          	lw	a5,-36(s0)
80002a94:	0087a783          	lw	a5,8(a5)
80002a98:	00c7a683          	lw	a3,12(a5)
80002a9c:	fdc42783          	lw	a5,-36(s0)
80002aa0:	00c7a703          	lw	a4,12(a5)
80002aa4:	fdc42783          	lw	a5,-36(s0)
80002aa8:	0087a783          	lw	a5,8(a5)
80002aac:	00e68733          	add	a4,a3,a4
80002ab0:	00e7a623          	sw	a4,12(a5)
80002ab4:	fdc42783          	lw	a5,-36(s0)
80002ab8:	00c7a703          	lw	a4,12(a5)
80002abc:	fdc42783          	lw	a5,-36(s0)
80002ac0:	00f707b3          	add	a5,a4,a5
80002ac4:	fef42623          	sw	a5,-20(s0)
80002ac8:	fdc42783          	lw	a5,-36(s0)
80002acc:	0087a703          	lw	a4,8(a5)
80002ad0:	fec42783          	lw	a5,-20(s0)
80002ad4:	00e7a423          	sw	a4,8(a5)
80002ad8:	fdc42503          	lw	a0,-36(s0)
80002adc:	f61ff0ef          	jal	ra,80002a3c <osMemClearNode>
80002ae0:	00000013          	nop
80002ae4:	02c12083          	lw	ra,44(sp)
80002ae8:	02812403          	lw	s0,40(sp)
80002aec:	03010113          	addi	sp,sp,48
80002af0:	00008067          	ret
80002af4:	0000                	unimp
	...

80002af8 <osMemSpitNode>:
osMemSpitNode():
80002af8:	fd010113          	addi	sp,sp,-48
80002afc:	02112623          	sw	ra,44(sp)
80002b00:	02812423          	sw	s0,40(sp)
80002b04:	03010413          	addi	s0,sp,48
80002b08:	fca42e23          	sw	a0,-36(s0)
80002b0c:	fcb42c23          	sw	a1,-40(s0)
80002b10:	fcc42a23          	sw	a2,-44(s0)
80002b14:	fe042623          	sw	zero,-20(s0)
80002b18:	fe042423          	sw	zero,-24(s0)
80002b1c:	fe042223          	sw	zero,-28(s0)
80002b20:	fd842703          	lw	a4,-40(s0)
80002b24:	fd442783          	lw	a5,-44(s0)
80002b28:	00f707b3          	add	a5,a4,a5
80002b2c:	fef42623          	sw	a5,-20(s0)
80002b30:	fec42783          	lw	a5,-20(s0)
80002b34:	fd842703          	lw	a4,-40(s0)
80002b38:	00e7a423          	sw	a4,8(a5)
80002b3c:	fd842783          	lw	a5,-40(s0)
80002b40:	00c7a703          	lw	a4,12(a5)
80002b44:	fd442783          	lw	a5,-44(s0)
80002b48:	40f70733          	sub	a4,a4,a5
80002b4c:	fec42783          	lw	a5,-20(s0)
80002b50:	00e7a623          	sw	a4,12(a5)
80002b54:	fd842783          	lw	a5,-40(s0)
80002b58:	fd442703          	lw	a4,-44(s0)
80002b5c:	00e7a623          	sw	a4,12(a5)
80002b60:	fec42783          	lw	a5,-20(s0)
80002b64:	00c7a703          	lw	a4,12(a5)
80002b68:	800007b7          	lui	a5,0x80000
80002b6c:	fff7c793          	not	a5,a5
80002b70:	00f777b3          	and	a5,a4,a5
80002b74:	fec42703          	lw	a4,-20(s0)
80002b78:	00f707b3          	add	a5,a4,a5
80002b7c:	fef42423          	sw	a5,-24(s0)
80002b80:	fe842783          	lw	a5,-24(s0)
80002b84:	fec42703          	lw	a4,-20(s0)
80002b88:	00e7a423          	sw	a4,8(a5) # 80000008 <__stack_top+0xfffc1a08>
80002b8c:	fe842783          	lw	a5,-24(s0)
80002b90:	00c7a783          	lw	a5,12(a5)
80002b94:	0007cc63          	bltz	a5,80002bac <osMemSpitNode+0xb4>
80002b98:	fe842783          	lw	a5,-24(s0)
80002b9c:	00078513          	mv	a0,a5
80002ba0:	cedff0ef          	jal	ra,8000288c <LOS_ListDelete>
80002ba4:	fe842503          	lw	a0,-24(s0)
80002ba8:	ed1ff0ef          	jal	ra,80002a78 <osMemMergeNode>
80002bac:	fdc42783          	lw	a5,-36(s0)
80002bb0:	00878793          	addi	a5,a5,8
80002bb4:	00078713          	mv	a4,a5
80002bb8:	fec42783          	lw	a5,-20(s0)
80002bbc:	00c7a783          	lw	a5,12(a5)
80002bc0:	00078593          	mv	a1,a5
80002bc4:	00070513          	mv	a0,a4
80002bc8:	62d000ef          	jal	ra,800039f4 <LOS_DLnkMultiHead>
80002bcc:	fea42223          	sw	a0,-28(s0)
80002bd0:	fe442783          	lw	a5,-28(s0)
80002bd4:	00078c63          	beqz	a5,80002bec <osMemSpitNode+0xf4>
80002bd8:	fec42783          	lw	a5,-20(s0)
80002bdc:	00078593          	mv	a1,a5
80002be0:	fe442503          	lw	a0,-28(s0)
80002be4:	c05ff0ef          	jal	ra,800027e8 <LOS_ListAdd>
80002be8:	0080006f          	j	80002bf0 <osMemSpitNode+0xf8>
80002bec:	00000013          	nop
80002bf0:	02c12083          	lw	ra,44(sp)
80002bf4:	02812403          	lw	s0,40(sp)
80002bf8:	03010113          	addi	sp,sp,48
80002bfc:	00008067          	ret
80002c00:	0000                	unimp
	...

80002c04 <osMemFreeNode>:
osMemFreeNode():
80002c04:	fd010113          	addi	sp,sp,-48
80002c08:	02112623          	sw	ra,44(sp)
80002c0c:	02812423          	sw	s0,40(sp)
80002c10:	03010413          	addi	s0,sp,48
80002c14:	fca42e23          	sw	a0,-36(s0)
80002c18:	fcb42c23          	sw	a1,-40(s0)
80002c1c:	fe042623          	sw	zero,-20(s0)
80002c20:	fe042423          	sw	zero,-24(s0)
80002c24:	fdc42783          	lw	a5,-36(s0)
80002c28:	00c7a703          	lw	a4,12(a5)
80002c2c:	800007b7          	lui	a5,0x80000
80002c30:	fff7c793          	not	a5,a5
80002c34:	00f777b3          	and	a5,a4,a5
80002c38:	00078513          	mv	a0,a5
80002c3c:	185000ef          	jal	ra,800035c0 <osTaskMemUsedDec>
80002c40:	fdc42783          	lw	a5,-36(s0)
80002c44:	00c7a703          	lw	a4,12(a5) # 8000000c <__stack_top+0xfffc1a0c>
80002c48:	800007b7          	lui	a5,0x80000
80002c4c:	fff7c793          	not	a5,a5
80002c50:	00f77733          	and	a4,a4,a5
80002c54:	fdc42783          	lw	a5,-36(s0)
80002c58:	00e7a623          	sw	a4,12(a5) # 8000000c <__stack_top+0xfffc1a0c>
80002c5c:	fdc42783          	lw	a5,-36(s0)
80002c60:	0087a783          	lw	a5,8(a5)
80002c64:	0a078a63          	beqz	a5,80002d18 <osMemFreeNode+0x114>
80002c68:	fdc42783          	lw	a5,-36(s0)
80002c6c:	0087a783          	lw	a5,8(a5)
80002c70:	00c7a783          	lw	a5,12(a5)
80002c74:	0a07c263          	bltz	a5,80002d18 <osMemFreeNode+0x114>
80002c78:	fdc42783          	lw	a5,-36(s0)
80002c7c:	0087a783          	lw	a5,8(a5)
80002c80:	fef42223          	sw	a5,-28(s0)
80002c84:	fdc42503          	lw	a0,-36(s0)
80002c88:	df1ff0ef          	jal	ra,80002a78 <osMemMergeNode>
80002c8c:	fe442783          	lw	a5,-28(s0)
80002c90:	00c7a703          	lw	a4,12(a5)
80002c94:	800007b7          	lui	a5,0x80000
80002c98:	fff7c793          	not	a5,a5
80002c9c:	00f777b3          	and	a5,a4,a5
80002ca0:	fe442703          	lw	a4,-28(s0)
80002ca4:	00f707b3          	add	a5,a4,a5
80002ca8:	fef42623          	sw	a5,-20(s0)
80002cac:	fec42783          	lw	a5,-20(s0)
80002cb0:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffc1a0c>
80002cb4:	0007cc63          	bltz	a5,80002ccc <osMemFreeNode+0xc8>
80002cb8:	fec42783          	lw	a5,-20(s0)
80002cbc:	00078513          	mv	a0,a5
80002cc0:	bcdff0ef          	jal	ra,8000288c <LOS_ListDelete>
80002cc4:	fec42503          	lw	a0,-20(s0)
80002cc8:	db1ff0ef          	jal	ra,80002a78 <osMemMergeNode>
80002ccc:	fe442783          	lw	a5,-28(s0)
80002cd0:	00078513          	mv	a0,a5
80002cd4:	bb9ff0ef          	jal	ra,8000288c <LOS_ListDelete>
80002cd8:	fd842783          	lw	a5,-40(s0)
80002cdc:	00878793          	addi	a5,a5,8
80002ce0:	00078713          	mv	a4,a5
80002ce4:	fe442783          	lw	a5,-28(s0)
80002ce8:	00c7a783          	lw	a5,12(a5)
80002cec:	00078593          	mv	a1,a5
80002cf0:	00070513          	mv	a0,a4
80002cf4:	501000ef          	jal	ra,800039f4 <LOS_DLnkMultiHead>
80002cf8:	fea42423          	sw	a0,-24(s0)
80002cfc:	fe842783          	lw	a5,-24(s0)
80002d00:	08078c63          	beqz	a5,80002d98 <osMemFreeNode+0x194>
80002d04:	fe442783          	lw	a5,-28(s0)
80002d08:	00078593          	mv	a1,a5
80002d0c:	fe842503          	lw	a0,-24(s0)
80002d10:	ad9ff0ef          	jal	ra,800027e8 <LOS_ListAdd>
80002d14:	0900006f          	j	80002da4 <osMemFreeNode+0x1a0>
80002d18:	fdc42783          	lw	a5,-36(s0)
80002d1c:	00c7a703          	lw	a4,12(a5)
80002d20:	800007b7          	lui	a5,0x80000
80002d24:	fff7c793          	not	a5,a5
80002d28:	00f777b3          	and	a5,a4,a5
80002d2c:	fdc42703          	lw	a4,-36(s0)
80002d30:	00f707b3          	add	a5,a4,a5
80002d34:	fef42623          	sw	a5,-20(s0)
80002d38:	fec42783          	lw	a5,-20(s0)
80002d3c:	00c7a783          	lw	a5,12(a5) # 8000000c <__stack_top+0xfffc1a0c>
80002d40:	0007cc63          	bltz	a5,80002d58 <osMemFreeNode+0x154>
80002d44:	fec42783          	lw	a5,-20(s0)
80002d48:	00078513          	mv	a0,a5
80002d4c:	b41ff0ef          	jal	ra,8000288c <LOS_ListDelete>
80002d50:	fec42503          	lw	a0,-20(s0)
80002d54:	d25ff0ef          	jal	ra,80002a78 <osMemMergeNode>
80002d58:	fd842783          	lw	a5,-40(s0)
80002d5c:	00878793          	addi	a5,a5,8
80002d60:	00078713          	mv	a4,a5
80002d64:	fdc42783          	lw	a5,-36(s0)
80002d68:	00c7a783          	lw	a5,12(a5)
80002d6c:	00078593          	mv	a1,a5
80002d70:	00070513          	mv	a0,a4
80002d74:	481000ef          	jal	ra,800039f4 <LOS_DLnkMultiHead>
80002d78:	fea42423          	sw	a0,-24(s0)
80002d7c:	fe842783          	lw	a5,-24(s0)
80002d80:	02078063          	beqz	a5,80002da0 <osMemFreeNode+0x19c>
80002d84:	fdc42783          	lw	a5,-36(s0)
80002d88:	00078593          	mv	a1,a5
80002d8c:	fe842503          	lw	a0,-24(s0)
80002d90:	a59ff0ef          	jal	ra,800027e8 <LOS_ListAdd>
80002d94:	0100006f          	j	80002da4 <osMemFreeNode+0x1a0>
80002d98:	00000013          	nop
80002d9c:	0080006f          	j	80002da4 <osMemFreeNode+0x1a0>
80002da0:	00000013          	nop
80002da4:	02c12083          	lw	ra,44(sp)
80002da8:	02812403          	lw	s0,40(sp)
80002dac:	03010113          	addi	sp,sp,48
80002db0:	00008067          	ret
80002db4:	0000                	unimp
	...

80002db8 <osMemIsNodeValid>:
osMemIsNodeValid():
80002db8:	fd010113          	addi	sp,sp,-48
80002dbc:	02812623          	sw	s0,44(sp)
80002dc0:	03010413          	addi	s0,sp,48
80002dc4:	fea42623          	sw	a0,-20(s0)
80002dc8:	feb42423          	sw	a1,-24(s0)
80002dcc:	fec42223          	sw	a2,-28(s0)
80002dd0:	fed42023          	sw	a3,-32(s0)
80002dd4:	fce42e23          	sw	a4,-36(s0)
80002dd8:	fe842703          	lw	a4,-24(s0)
80002ddc:	fec42783          	lw	a5,-20(s0)
80002de0:	00e7e863          	bltu	a5,a4,80002df0 <osMemIsNodeValid+0x38>
80002de4:	fec42703          	lw	a4,-20(s0)
80002de8:	fe442783          	lw	a5,-28(s0)
80002dec:	00e7f663          	bleu	a4,a5,80002df8 <osMemIsNodeValid+0x40>
80002df0:	00000793          	li	a5,0
80002df4:	0680006f          	j	80002e5c <osMemIsNodeValid+0xa4>
80002df8:	fec42783          	lw	a5,-20(s0)
80002dfc:	00c7a783          	lw	a5,12(a5)
80002e00:	0207d863          	bgez	a5,80002e30 <osMemIsNodeValid+0x78>
80002e04:	fec42783          	lw	a5,-20(s0)
80002e08:	0007a783          	lw	a5,0(a5)
80002e0c:	00078713          	mv	a4,a5
80002e10:	fec42783          	lw	a5,-20(s0)
80002e14:	00f74733          	xor	a4,a4,a5
80002e18:	fff00793          	li	a5,-1
80002e1c:	00f70663          	beq	a4,a5,80002e28 <osMemIsNodeValid+0x70>
80002e20:	00000793          	li	a5,0
80002e24:	0380006f          	j	80002e5c <osMemIsNodeValid+0xa4>
80002e28:	00100793          	li	a5,1
80002e2c:	0300006f          	j	80002e5c <osMemIsNodeValid+0xa4>
80002e30:	fec42783          	lw	a5,-20(s0)
80002e34:	0007a783          	lw	a5,0(a5)
80002e38:	fe042703          	lw	a4,-32(s0)
80002e3c:	00e7ea63          	bltu	a5,a4,80002e50 <osMemIsNodeValid+0x98>
80002e40:	fec42783          	lw	a5,-20(s0)
80002e44:	0007a783          	lw	a5,0(a5)
80002e48:	fdc42703          	lw	a4,-36(s0)
80002e4c:	00e7e663          	bltu	a5,a4,80002e58 <osMemIsNodeValid+0xa0>
80002e50:	00000793          	li	a5,0
80002e54:	0080006f          	j	80002e5c <osMemIsNodeValid+0xa4>
80002e58:	00100793          	li	a5,1
80002e5c:	00078513          	mv	a0,a5
80002e60:	02c12403          	lw	s0,44(sp)
80002e64:	03010113          	addi	sp,sp,48
80002e68:	00008067          	ret
80002e6c:	0000                	unimp
	...

80002e70 <osMemCheckUsedNode>:
osMemCheckUsedNode():
80002e70:	fc010113          	addi	sp,sp,-64
80002e74:	02112e23          	sw	ra,60(sp)
80002e78:	02812c23          	sw	s0,56(sp)
80002e7c:	04010413          	addi	s0,sp,64
80002e80:	fca42623          	sw	a0,-52(s0)
80002e84:	fcb42423          	sw	a1,-56(s0)
80002e88:	fcc42783          	lw	a5,-52(s0)
80002e8c:	fef42623          	sw	a5,-20(s0)
80002e90:	fcc42783          	lw	a5,-52(s0)
80002e94:	0e078793          	addi	a5,a5,224
80002e98:	fef42423          	sw	a5,-24(s0)
80002e9c:	fec42783          	lw	a5,-20(s0)
80002ea0:	0047a783          	lw	a5,4(a5)
80002ea4:	ff078793          	addi	a5,a5,-16
80002ea8:	fcc42703          	lw	a4,-52(s0)
80002eac:	00f707b3          	add	a5,a4,a5
80002eb0:	fef42223          	sw	a5,-28(s0)
80002eb4:	fec42783          	lw	a5,-20(s0)
80002eb8:	0047a783          	lw	a5,4(a5)
80002ebc:	fcc42703          	lw	a4,-52(s0)
80002ec0:	00f707b3          	add	a5,a4,a5
80002ec4:	fef42023          	sw	a5,-32(s0)
80002ec8:	fc042e23          	sw	zero,-36(s0)
80002ecc:	fe042703          	lw	a4,-32(s0)
80002ed0:	fcc42683          	lw	a3,-52(s0)
80002ed4:	fe442603          	lw	a2,-28(s0)
80002ed8:	fe842583          	lw	a1,-24(s0)
80002edc:	fc842503          	lw	a0,-56(s0)
80002ee0:	ed9ff0ef          	jal	ra,80002db8 <osMemIsNodeValid>
80002ee4:	00050793          	mv	a5,a0
80002ee8:	00079663          	bnez	a5,80002ef4 <osMemCheckUsedNode+0x84>
80002eec:	00100793          	li	a5,1
80002ef0:	0ec0006f          	j	80002fdc <osMemCheckUsedNode+0x16c>
80002ef4:	fc842783          	lw	a5,-56(s0)
80002ef8:	00c7a783          	lw	a5,12(a5)
80002efc:	0007c663          	bltz	a5,80002f08 <osMemCheckUsedNode+0x98>
80002f00:	00100793          	li	a5,1
80002f04:	0d80006f          	j	80002fdc <osMemCheckUsedNode+0x16c>
80002f08:	fc842783          	lw	a5,-56(s0)
80002f0c:	00c7a703          	lw	a4,12(a5)
80002f10:	800007b7          	lui	a5,0x80000
80002f14:	fff7c793          	not	a5,a5
80002f18:	00f777b3          	and	a5,a4,a5
80002f1c:	fc842703          	lw	a4,-56(s0)
80002f20:	00f707b3          	add	a5,a4,a5
80002f24:	fcf42e23          	sw	a5,-36(s0)
80002f28:	fe042703          	lw	a4,-32(s0)
80002f2c:	fcc42683          	lw	a3,-52(s0)
80002f30:	fe442603          	lw	a2,-28(s0)
80002f34:	fe842583          	lw	a1,-24(s0)
80002f38:	fdc42503          	lw	a0,-36(s0)
80002f3c:	e7dff0ef          	jal	ra,80002db8 <osMemIsNodeValid>
80002f40:	00050793          	mv	a5,a0
80002f44:	00079663          	bnez	a5,80002f50 <osMemCheckUsedNode+0xe0>
80002f48:	00100793          	li	a5,1
80002f4c:	0900006f          	j	80002fdc <osMemCheckUsedNode+0x16c>
80002f50:	fdc42783          	lw	a5,-36(s0)
80002f54:	0087a783          	lw	a5,8(a5) # 80000008 <__stack_top+0xfffc1a08>
80002f58:	fc842703          	lw	a4,-56(s0)
80002f5c:	00f70663          	beq	a4,a5,80002f68 <osMemCheckUsedNode+0xf8>
80002f60:	00100793          	li	a5,1
80002f64:	0780006f          	j	80002fdc <osMemCheckUsedNode+0x16c>
80002f68:	fc842703          	lw	a4,-56(s0)
80002f6c:	fe842783          	lw	a5,-24(s0)
80002f70:	06f70463          	beq	a4,a5,80002fd8 <osMemCheckUsedNode+0x168>
80002f74:	fc842783          	lw	a5,-56(s0)
80002f78:	0087a783          	lw	a5,8(a5)
80002f7c:	fe042703          	lw	a4,-32(s0)
80002f80:	fcc42683          	lw	a3,-52(s0)
80002f84:	fe442603          	lw	a2,-28(s0)
80002f88:	fe842583          	lw	a1,-24(s0)
80002f8c:	00078513          	mv	a0,a5
80002f90:	e29ff0ef          	jal	ra,80002db8 <osMemIsNodeValid>
80002f94:	00050793          	mv	a5,a0
80002f98:	00079663          	bnez	a5,80002fa4 <osMemCheckUsedNode+0x134>
80002f9c:	00100793          	li	a5,1
80002fa0:	03c0006f          	j	80002fdc <osMemCheckUsedNode+0x16c>
80002fa4:	fc842783          	lw	a5,-56(s0)
80002fa8:	0087a703          	lw	a4,8(a5)
80002fac:	fc842783          	lw	a5,-56(s0)
80002fb0:	0087a783          	lw	a5,8(a5)
80002fb4:	00c7a683          	lw	a3,12(a5)
80002fb8:	800007b7          	lui	a5,0x80000
80002fbc:	fff7c793          	not	a5,a5
80002fc0:	00f6f7b3          	and	a5,a3,a5
80002fc4:	00f707b3          	add	a5,a4,a5
80002fc8:	fc842703          	lw	a4,-56(s0)
80002fcc:	00f70663          	beq	a4,a5,80002fd8 <osMemCheckUsedNode+0x168>
80002fd0:	00100793          	li	a5,1
80002fd4:	0080006f          	j	80002fdc <osMemCheckUsedNode+0x16c>
80002fd8:	00000793          	li	a5,0
80002fdc:	00078513          	mv	a0,a5
80002fe0:	03c12083          	lw	ra,60(sp)
80002fe4:	03812403          	lw	s0,56(sp)
80002fe8:	04010113          	addi	sp,sp,64
80002fec:	00008067          	ret
80002ff0:	0000                	unimp
	...

80002ff4 <osMemSetMagicNumAndTaskid>:
osMemSetMagicNumAndTaskid():
80002ff4:	fe010113          	addi	sp,sp,-32
80002ff8:	00812e23          	sw	s0,28(sp)
80002ffc:	02010413          	addi	s0,sp,32
80003000:	fea42623          	sw	a0,-20(s0)
80003004:	fec42783          	lw	a5,-20(s0)
80003008:	fff7c793          	not	a5,a5
8000300c:	00078713          	mv	a4,a5
80003010:	fec42783          	lw	a5,-20(s0)
80003014:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack_top+0xfffc1a00>
80003018:	8001e7b7          	lui	a5,0x8001e
8000301c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80003020:	0007a783          	lw	a5,0(a5)
80003024:	02078263          	beqz	a5,80003048 <osMemSetMagicNumAndTaskid+0x54>
80003028:	8001e7b7          	lui	a5,0x8001e
8000302c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80003030:	0007a783          	lw	a5,0(a5)
80003034:	0107a783          	lw	a5,16(a5)
80003038:	00078713          	mv	a4,a5
8000303c:	fec42783          	lw	a5,-20(s0)
80003040:	00e7a223          	sw	a4,4(a5)
80003044:	0100006f          	j	80003054 <osMemSetMagicNumAndTaskid+0x60>
80003048:	fec42783          	lw	a5,-20(s0)
8000304c:	fff00713          	li	a4,-1
80003050:	00e7a223          	sw	a4,4(a5)
80003054:	00000013          	nop
80003058:	01c12403          	lw	s0,28(sp)
8000305c:	02010113          	addi	sp,sp,32
80003060:	00008067          	ret
80003064:	0000                	unimp
	...

80003068 <osMemAllocWithCheck>:
osMemAllocWithCheck():
80003068:	fd010113          	addi	sp,sp,-48
8000306c:	02112623          	sw	ra,44(sp)
80003070:	02812423          	sw	s0,40(sp)
80003074:	03010413          	addi	s0,sp,48
80003078:	fca42e23          	sw	a0,-36(s0)
8000307c:	fcb42c23          	sw	a1,-40(s0)
80003080:	fe042623          	sw	zero,-20(s0)
80003084:	fd842783          	lw	a5,-40(s0)
80003088:	01378793          	addi	a5,a5,19
8000308c:	ffc7f793          	andi	a5,a5,-4
80003090:	fef42423          	sw	a5,-24(s0)
80003094:	fe842583          	lw	a1,-24(s0)
80003098:	fdc42503          	lw	a0,-36(s0)
8000309c:	8e9ff0ef          	jal	ra,80002984 <osMemFindSuitableFreeBlock>
800030a0:	fea42623          	sw	a0,-20(s0)
800030a4:	fec42783          	lw	a5,-20(s0)
800030a8:	00079663          	bnez	a5,800030b4 <osMemAllocWithCheck+0x4c>
800030ac:	00000793          	li	a5,0
800030b0:	0780006f          	j	80003128 <osMemAllocWithCheck+0xc0>
800030b4:	fe842783          	lw	a5,-24(s0)
800030b8:	01478713          	addi	a4,a5,20
800030bc:	fec42783          	lw	a5,-20(s0)
800030c0:	00c7a783          	lw	a5,12(a5)
800030c4:	00e7ea63          	bltu	a5,a4,800030d8 <osMemAllocWithCheck+0x70>
800030c8:	fe842603          	lw	a2,-24(s0)
800030cc:	fec42583          	lw	a1,-20(s0)
800030d0:	fdc42503          	lw	a0,-36(s0)
800030d4:	a25ff0ef          	jal	ra,80002af8 <osMemSpitNode>
800030d8:	fec42783          	lw	a5,-20(s0)
800030dc:	00078513          	mv	a0,a5
800030e0:	facff0ef          	jal	ra,8000288c <LOS_ListDelete>
800030e4:	fec42503          	lw	a0,-20(s0)
800030e8:	f0dff0ef          	jal	ra,80002ff4 <osMemSetMagicNumAndTaskid>
800030ec:	fec42783          	lw	a5,-20(s0)
800030f0:	00c7a703          	lw	a4,12(a5)
800030f4:	800007b7          	lui	a5,0x80000
800030f8:	00f76733          	or	a4,a4,a5
800030fc:	fec42783          	lw	a5,-20(s0)
80003100:	00e7a623          	sw	a4,12(a5) # 8000000c <__stack_top+0xfffc1a0c>
80003104:	fec42783          	lw	a5,-20(s0)
80003108:	00c7a703          	lw	a4,12(a5)
8000310c:	800007b7          	lui	a5,0x80000
80003110:	fff7c793          	not	a5,a5
80003114:	00f777b3          	and	a5,a4,a5
80003118:	00078513          	mv	a0,a5
8000311c:	3fc000ef          	jal	ra,80003518 <osTaskMemUsedInc>
80003120:	fec42783          	lw	a5,-20(s0)
80003124:	01078793          	addi	a5,a5,16 # 80000010 <__stack_top+0xfffc1a10>
80003128:	00078513          	mv	a0,a5
8000312c:	02c12083          	lw	ra,44(sp)
80003130:	02812403          	lw	s0,40(sp)
80003134:	03010113          	addi	sp,sp,48
80003138:	00008067          	ret
8000313c:	0000                	unimp
	...

80003140 <LOS_MemInit>:
LOS_MemInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:462
                 uwSize  --- Size of memory in bytes to allocate
 Output      : None
 Return      : LOS_OK - Ok, OS_ERROR - Error
*****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 LOS_MemInit(VOID *pPool, UINT32  uwSize)
{
80003140:	fc010113          	addi	sp,sp,-64
80003144:	02112e23          	sw	ra,60(sp)
80003148:	02812c23          	sw	s0,56(sp)
8000314c:	04010413          	addi	s0,sp,64
80003150:	fca42623          	sw	a0,-52(s0)
80003154:	fcb42423          	sw	a1,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:463
    LOS_MEM_DYN_NODE *pstNewNode = (LOS_MEM_DYN_NODE *)NULL;
80003158:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:464
    LOS_MEM_DYN_NODE *pstEndNode = (LOS_MEM_DYN_NODE *)NULL;
8000315c:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:465
    LOS_MEM_POOL_INFO *pstPoolInfo = (LOS_MEM_POOL_INFO *)NULL;
80003160:	fe042223          	sw	zero,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:467
    UINTPTR uvIntSave;
    LOS_DL_LIST *pstListHead = (LOS_DL_LIST *)NULL;
80003164:	fe042023          	sw	zero,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:469

    if ((pPool == NULL) || (uwSize < (OS_MEM_MIN_POOL_SIZE)))
80003168:	fcc42783          	lw	a5,-52(s0)
8000316c:	00078863          	beqz	a5,8000317c <LOS_MemInit+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:469 (discriminator 1)
80003170:	fc842703          	lw	a4,-56(s0)
80003174:	0ff00793          	li	a5,255
80003178:	00e7e663          	bltu	a5,a4,80003184 <LOS_MemInit+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:471
    {
        return OS_ERROR;
8000317c:	fff00793          	li	a5,-1
80003180:	1240006f          	j	800032a4 <LOS_MemInit+0x164>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:474
    }

    uvIntSave = LOS_IntLock();
80003184:	a75fe0ef          	jal	ra,80001bf8 <LOS_IntLock>
80003188:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:476

    pstPoolInfo = (LOS_MEM_POOL_INFO *)pPool;
8000318c:	fcc42783          	lw	a5,-52(s0)
80003190:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:477
    pstPoolInfo->pPoolAddr = pPool;
80003194:	fe442783          	lw	a5,-28(s0)
80003198:	fcc42703          	lw	a4,-52(s0)
8000319c:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:478
    pstPoolInfo->uwPoolSize = uwSize;
800031a0:	fe442783          	lw	a5,-28(s0)
800031a4:	fc842703          	lw	a4,-56(s0)
800031a8:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:479
    LOS_DLnkInitMultiHead(OS_MEM_HEAD_ADDR(pPool));
800031ac:	fcc42783          	lw	a5,-52(s0)
800031b0:	00878793          	addi	a5,a5,8
800031b4:	00078513          	mv	a0,a5
800031b8:	7cc000ef          	jal	ra,80003984 <LOS_DLnkInitMultiHead>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:480
    pstNewNode = OS_MEM_FIRST_NODE(pPool);
800031bc:	fcc42783          	lw	a5,-52(s0)
800031c0:	0e078793          	addi	a5,a5,224
800031c4:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:481
    pstNewNode->uwSizeAndFlag = ((uwSize - ((UINT32)pstNewNode - (UINT32)pPool)) - OS_MEM_NODE_HEAD_SIZE);
800031c8:	fcc42703          	lw	a4,-52(s0)
800031cc:	fec42783          	lw	a5,-20(s0)
800031d0:	40f70733          	sub	a4,a4,a5
800031d4:	fc842783          	lw	a5,-56(s0)
800031d8:	00f707b3          	add	a5,a4,a5
800031dc:	ff078713          	addi	a4,a5,-16
800031e0:	fec42783          	lw	a5,-20(s0)
800031e4:	00e7a623          	sw	a4,12(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:482
    pstNewNode->pstPreNode = (LOS_MEM_DYN_NODE *)NULL;
800031e8:	fec42783          	lw	a5,-20(s0)
800031ec:	0007a423          	sw	zero,8(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:483
    pstListHead = OS_MEM_HEAD(pPool, pstNewNode->uwSizeAndFlag);
800031f0:	fcc42783          	lw	a5,-52(s0)
800031f4:	00878793          	addi	a5,a5,8
800031f8:	00078713          	mv	a4,a5
800031fc:	fec42783          	lw	a5,-20(s0)
80003200:	00c7a783          	lw	a5,12(a5)
80003204:	00078593          	mv	a1,a5
80003208:	00070513          	mv	a0,a4
8000320c:	7e8000ef          	jal	ra,800039f4 <LOS_DLnkMultiHead>
80003210:	fea42023          	sw	a0,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:484
    if (NULL == pstListHead)
80003214:	fe042783          	lw	a5,-32(s0)
80003218:	00079a63          	bnez	a5,8000322c <LOS_MemInit+0xec>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:487
    {
        PRINT_ERR("%s %d\n", __FUNCTION__, __LINE__);
        LOS_IntRestore(uvIntSave);
8000321c:	fdc42503          	lw	a0,-36(s0)
80003220:	9f9fe0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:488
        return OS_ERROR;
80003224:	fff00793          	li	a5,-1
80003228:	07c0006f          	j	800032a4 <LOS_MemInit+0x164>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:491
    }

    LOS_ListTailInsert(pstListHead,&(pstNewNode->stFreeNodeInfo));
8000322c:	fec42783          	lw	a5,-20(s0)
80003230:	00078593          	mv	a1,a5
80003234:	fe042503          	lw	a0,-32(s0)
80003238:	e10ff0ef          	jal	ra,80002848 <LOS_ListTailInsert>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:492
    pstEndNode = (LOS_MEM_DYN_NODE *)OS_MEM_END_NODE(pPool, uwSize);
8000323c:	fc842783          	lw	a5,-56(s0)
80003240:	ff078793          	addi	a5,a5,-16
80003244:	fcc42703          	lw	a4,-52(s0)
80003248:	00f707b3          	add	a5,a4,a5
8000324c:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:493
    (VOID)memset(pstEndNode, 0 ,sizeof(*pstEndNode));
80003250:	01000613          	li	a2,16
80003254:	00000593          	li	a1,0
80003258:	fe842503          	lw	a0,-24(s0)
8000325c:	171070ef          	jal	ra,8000abcc <memset>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:494
    pstEndNode->pstPreNode = pstNewNode;
80003260:	fe842783          	lw	a5,-24(s0)
80003264:	fec42703          	lw	a4,-20(s0)
80003268:	00e7a423          	sw	a4,8(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:495
    pstEndNode->uwSizeAndFlag = OS_MEM_NODE_HEAD_SIZE;
8000326c:	fe842783          	lw	a5,-24(s0)
80003270:	01000713          	li	a4,16
80003274:	00e7a623          	sw	a4,12(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:496
    OS_MEM_NODE_SET_USED_FLAG(pstEndNode->uwSizeAndFlag);
80003278:	fe842783          	lw	a5,-24(s0)
8000327c:	00c7a703          	lw	a4,12(a5)
80003280:	800007b7          	lui	a5,0x80000
80003284:	00f76733          	or	a4,a4,a5
80003288:	fe842783          	lw	a5,-24(s0)
8000328c:	00e7a623          	sw	a4,12(a5) # 8000000c <__stack_top+0xfffc1a0c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:497
    osMemSetMagicNumAndTaskid(pstEndNode);
80003290:	fe842503          	lw	a0,-24(s0)
80003294:	d61ff0ef          	jal	ra,80002ff4 <osMemSetMagicNumAndTaskid>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:498
    LOS_IntRestore(uvIntSave);
80003298:	fdc42503          	lw	a0,-36(s0)
8000329c:	97dfe0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:500

    return LOS_OK;
800032a0:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:501
}
800032a4:	00078513          	mv	a0,a5
800032a8:	03c12083          	lw	ra,60(sp)
800032ac:	03812403          	lw	s0,56(sp)
800032b0:	04010113          	addi	sp,sp,64
800032b4:	00008067          	ret
800032b8:	0000                	unimp
	...

800032bc <LOS_MemAlloc>:
LOS_MemAlloc():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:512
                 uwSize  --- Size of memory in bytes to allocate
 Output      : None
 Return      : Pointer to allocated memory node
*****************************************************************************/
LITE_OS_SEC_TEXT VOID *LOS_MemAlloc (VOID *pPool, UINT32  uwSize)
{
800032bc:	fd010113          	addi	sp,sp,-48
800032c0:	02112623          	sw	ra,44(sp)
800032c4:	02812423          	sw	s0,40(sp)
800032c8:	03010413          	addi	s0,sp,48
800032cc:	fca42e23          	sw	a0,-36(s0)
800032d0:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:513
    VOID *pPtr = NULL;
800032d4:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:514
    UINTPTR uvIntSave = LOS_IntLock();
800032d8:	921fe0ef          	jal	ra,80001bf8 <LOS_IntLock>
800032dc:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:518

    do
    {
        if ((pPool == NULL) || (uwSize == 0))
800032e0:	fdc42783          	lw	a5,-36(s0)
800032e4:	02078663          	beqz	a5,80003310 <LOS_MemAlloc+0x54>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:518 (discriminator 1)
800032e8:	fd842783          	lw	a5,-40(s0)
800032ec:	02078263          	beqz	a5,80003310 <LOS_MemAlloc+0x54>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:523
        {
            break;
        }

        if (OS_MEM_NODE_GET_USED_FLAG(uwSize))
800032f0:	fd842783          	lw	a5,-40(s0)
800032f4:	0007cc63          	bltz	a5,8000330c <LOS_MemAlloc+0x50>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:528
        {
            break;
        }

        pPtr = osMemAllocWithCheck(pPool, uwSize);
800032f8:	fd842583          	lw	a1,-40(s0)
800032fc:	fdc42503          	lw	a0,-36(s0)
80003300:	d69ff0ef          	jal	ra,80003068 <osMemAllocWithCheck>
80003304:	fea42623          	sw	a0,-20(s0)
80003308:	0080006f          	j	80003310 <LOS_MemAlloc+0x54>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:525
            break;
8000330c:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:531
    } while (0);

    LOS_IntRestore(uvIntSave);
80003310:	fe842503          	lw	a0,-24(s0)
80003314:	905fe0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:532
    return pPtr;
80003318:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:533
}
8000331c:	00078513          	mv	a0,a5
80003320:	02c12083          	lw	ra,44(sp)
80003324:	02812403          	lw	s0,40(sp)
80003328:	03010113          	addi	sp,sp,48
8000332c:	00008067          	ret
80003330:	0000                	unimp
	...

80003334 <LOS_MemAllocAlign>:
LOS_MemAllocAlign():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:545
                 uwBoundary -- align form
 Output      : None
 Return      : Pointer to allocated memory node
*****************************************************************************/
LITE_OS_SEC_TEXT VOID *LOS_MemAllocAlign(VOID *pPool, UINT32 uwSize, UINT32 uwBoundary)
{
80003334:	fc010113          	addi	sp,sp,-64
80003338:	02112e23          	sw	ra,60(sp)
8000333c:	02812c23          	sw	s0,56(sp)
80003340:	04010413          	addi	s0,sp,64
80003344:	fca42623          	sw	a0,-52(s0)
80003348:	fcb42423          	sw	a1,-56(s0)
8000334c:	fcc42223          	sw	a2,-60(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:546
    UINT32 uwUseSize = 0;
80003350:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:547
    UINT32 uwGapSize = 0;
80003354:	fe042223          	sw	zero,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:548
    VOID *pPtr = NULL;
80003358:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:549
    VOID *pAlignedPtr = NULL;
8000335c:	fe042023          	sw	zero,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:550
    UINTPTR uvIntSave = LOS_IntLock();
80003360:	899fe0ef          	jal	ra,80001bf8 <LOS_IntLock>
80003364:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:554

    do
    {
        if ((pPool == NULL) || (uwSize == 0))
80003368:	fcc42783          	lw	a5,-52(s0)
8000336c:	0a078863          	beqz	a5,8000341c <LOS_MemAllocAlign+0xe8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:554 (discriminator 1)
80003370:	fc842783          	lw	a5,-56(s0)
80003374:	0a078463          	beqz	a5,8000341c <LOS_MemAllocAlign+0xe8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:559
        {
            break;
        }

        uwUseSize = uwSize + uwBoundary + 4; /* 4bytes stores offset between alignedPtr and ptr */
80003378:	fc842703          	lw	a4,-56(s0)
8000337c:	fc442783          	lw	a5,-60(s0)
80003380:	00f707b3          	add	a5,a4,a5
80003384:	00478793          	addi	a5,a5,4
80003388:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:561

        if (OS_MEM_NODE_GET_USED_FLAG(uwUseSize))
8000338c:	fe842783          	lw	a5,-24(s0)
80003390:	0807c063          	bltz	a5,80003410 <LOS_MemAllocAlign+0xdc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:566
        {
            break;
        }

        pPtr = osMemAllocWithCheck(pPool, uwUseSize);
80003394:	fe842583          	lw	a1,-24(s0)
80003398:	fcc42503          	lw	a0,-52(s0)
8000339c:	ccdff0ef          	jal	ra,80003068 <osMemAllocWithCheck>
800033a0:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:568

        pAlignedPtr = (VOID *)OS_MEM_ALIGN(pPtr, uwBoundary);
800033a4:	fec42703          	lw	a4,-20(s0)
800033a8:	fc442783          	lw	a5,-60(s0)
800033ac:	00f707b3          	add	a5,a4,a5
800033b0:	fff78713          	addi	a4,a5,-1
800033b4:	fc442783          	lw	a5,-60(s0)
800033b8:	40f007b3          	neg	a5,a5
800033bc:	00f777b3          	and	a5,a4,a5
800033c0:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:570

        if (pPtr == pAlignedPtr)
800033c4:	fec42703          	lw	a4,-20(s0)
800033c8:	fe042783          	lw	a5,-32(s0)
800033cc:	04f70663          	beq	a4,a5,80003418 <LOS_MemAllocAlign+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:576
        {
            break;
        }

        /* store gapSize in address (ptr -4), it will be checked while free */
        uwGapSize = (UINT32)pAlignedPtr - (UINT32)pPtr;
800033d0:	fe042703          	lw	a4,-32(s0)
800033d4:	fec42783          	lw	a5,-20(s0)
800033d8:	40f707b3          	sub	a5,a4,a5
800033dc:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:577
        OS_MEM_NODE_SET_ALIGNED_FLAG(uwGapSize);
800033e0:	fe442703          	lw	a4,-28(s0)
800033e4:	400007b7          	lui	a5,0x40000
800033e8:	00f767b3          	or	a5,a4,a5
800033ec:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:578
        *((UINT32 *)((UINT32)pAlignedPtr - 4)) = uwGapSize;
800033f0:	fe042783          	lw	a5,-32(s0)
800033f4:	ffc78793          	addi	a5,a5,-4 # 3ffffffc <RAM_SIZE+0x3ff7fffc>
800033f8:	00078713          	mv	a4,a5
800033fc:	fe442783          	lw	a5,-28(s0)
80003400:	00f72023          	sw	a5,0(a4)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:580

        pPtr = pAlignedPtr;
80003404:	fe042783          	lw	a5,-32(s0)
80003408:	fef42623          	sw	a5,-20(s0)
8000340c:	0100006f          	j	8000341c <LOS_MemAllocAlign+0xe8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:563
            break;
80003410:	00000013          	nop
80003414:	0080006f          	j	8000341c <LOS_MemAllocAlign+0xe8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:572
            break;
80003418:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:584

    } while (0);

     LOS_IntRestore(uvIntSave);
8000341c:	fdc42503          	lw	a0,-36(s0)
80003420:	ff8fe0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:586

    return pPtr;
80003424:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:587
}
80003428:	00078513          	mv	a0,a5
8000342c:	03c12083          	lw	ra,60(sp)
80003430:	03812403          	lw	s0,56(sp)
80003434:	04010113          	addi	sp,sp,64
80003438:	00008067          	ret
8000343c:	0000                	unimp
	...

80003440 <LOS_MemFree>:
LOS_MemFree():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:599
                  pMem -- the node which need be freed
 Output      : None
 Return      : LOS_OK -Ok,  LOS_NOK -failed
*****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_MemFree(VOID *pPool, VOID *pMem)
{
80003440:	fd010113          	addi	sp,sp,-48
80003444:	02112623          	sw	ra,44(sp)
80003448:	02812423          	sw	s0,40(sp)
8000344c:	03010413          	addi	s0,sp,48
80003450:	fca42e23          	sw	a0,-36(s0)
80003454:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:600
    UINT32 uwRet = LOS_NOK;
80003458:	00100793          	li	a5,1
8000345c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:601
    UINT32 uwGapSize = 0;
80003460:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:602
    UINTPTR uvIntSave = LOS_IntLock();
80003464:	f94fe0ef          	jal	ra,80001bf8 <LOS_IntLock>
80003468:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:606

    do
    {
        LOS_MEM_DYN_NODE *pstNode = (LOS_MEM_DYN_NODE *)NULL;
8000346c:	fe042023          	sw	zero,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:608

        if ((pPool == NULL) || (pMem == NULL))
80003470:	fdc42783          	lw	a5,-36(s0)
80003474:	08078063          	beqz	a5,800034f4 <LOS_MemFree+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:608 (discriminator 1)
80003478:	fd842783          	lw	a5,-40(s0)
8000347c:	06078c63          	beqz	a5,800034f4 <LOS_MemFree+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:613
        {
            break;
        }

        uwGapSize = *((UINT32 *)((UINT32)pMem - 4));
80003480:	fd842783          	lw	a5,-40(s0)
80003484:	ffc78793          	addi	a5,a5,-4
80003488:	0007a783          	lw	a5,0(a5)
8000348c:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:614
        if (OS_MEM_NODE_GET_ALIGNED_FLAG(uwGapSize))
80003490:	fe842703          	lw	a4,-24(s0)
80003494:	400007b7          	lui	a5,0x40000
80003498:	00f777b3          	and	a5,a4,a5
8000349c:	02078463          	beqz	a5,800034c4 <LOS_MemFree+0x84>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:616
        {
            uwGapSize = OS_MEM_NODE_GET_ALIGNED_GAPSIZE(uwGapSize);
800034a0:	fe842703          	lw	a4,-24(s0)
800034a4:	c00007b7          	lui	a5,0xc0000
800034a8:	fff78793          	addi	a5,a5,-1 # bfffffff <__stack_top+0x3ffc19ff>
800034ac:	00f777b3          	and	a5,a4,a5
800034b0:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:617
            pMem = (VOID *)((UINT32)pMem - uwGapSize);
800034b4:	fd842703          	lw	a4,-40(s0)
800034b8:	fe842783          	lw	a5,-24(s0)
800034bc:	40f707b3          	sub	a5,a4,a5
800034c0:	fcf42c23          	sw	a5,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:620
        }

        pstNode = (LOS_MEM_DYN_NODE *)((UINT32)pMem - OS_MEM_NODE_HEAD_SIZE);
800034c4:	fd842783          	lw	a5,-40(s0)
800034c8:	ff078793          	addi	a5,a5,-16
800034cc:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:621
        uwRet = osMemCheckUsedNode(pPool, pstNode);
800034d0:	fe042583          	lw	a1,-32(s0)
800034d4:	fdc42503          	lw	a0,-36(s0)
800034d8:	999ff0ef          	jal	ra,80002e70 <osMemCheckUsedNode>
800034dc:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:622
        if (uwRet == LOS_OK)
800034e0:	fec42783          	lw	a5,-20(s0)
800034e4:	00079863          	bnez	a5,800034f4 <LOS_MemFree+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:624
        {
            osMemFreeNode(pstNode, pPool);
800034e8:	fdc42583          	lw	a1,-36(s0)
800034ec:	fe042503          	lw	a0,-32(s0)
800034f0:	f14ff0ef          	jal	ra,80002c04 <osMemFreeNode>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:629
        }

    } while(0);

    LOS_IntRestore(uvIntSave);
800034f4:	fe442503          	lw	a0,-28(s0)
800034f8:	f20fe0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:630
    return uwRet;
800034fc:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memory.c:631
}
80003500:	00078513          	mv	a0,a5
80003504:	02c12083          	lw	ra,44(sp)
80003508:	02812403          	lw	s0,40(sp)
8000350c:	03010113          	addi	sp,sp,48
80003510:	00008067          	ret
80003514:	0000                	unimp
	...

80003518 <osTaskMemUsedInc>:
osTaskMemUsedInc():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:48
} TSK_MEM_USED_INFO;

LITE_OS_SEC_BSS_MINOR TSK_MEM_USED_INFO g_TskMemUsedInfo[LOSCFG_BASE_CORE_TSK_LIMIT + 1];

LITE_OS_SEC_TEXT_MINOR VOID osTaskMemUsedInc(UINT32 uwUsedSize)
{
80003518:	fd010113          	addi	sp,sp,-48
8000351c:	02812623          	sw	s0,44(sp)
80003520:	03010413          	addi	s0,sp,48
80003524:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:51
    UINT32 taskId;

    if (NULL == g_stLosTask.pstRunTask)
80003528:	8001e7b7          	lui	a5,0x8001e
8000352c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80003530:	0007a783          	lw	a5,0(a5)
80003534:	06078463          	beqz	a5,8000359c <osTaskMemUsedInc+0x84>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:56
    {
        return;
    }

    if (OS_INT_ACTIVE)
80003538:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
8000353c:	06079463          	bnez	a5,800035a4 <osTaskMemUsedInc+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:61
    {
        return;
    }

    taskId = (UINT32) g_stLosTask.pstRunTask->uwTaskID;
80003540:	8001e7b7          	lui	a5,0x8001e
80003544:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80003548:	0007a783          	lw	a5,0(a5)
8000354c:	0107a783          	lw	a5,16(a5)
80003550:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:63

    if (taskId > LOSCFG_BASE_CORE_TSK_LIMIT)
80003554:	fec42703          	lw	a4,-20(s0)
80003558:	00f00793          	li	a5,15
8000355c:	04e7e863          	bltu	a5,a4,800035ac <osTaskMemUsedInc+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:68
    {
        return;
    }

    g_TskMemUsedInfo[taskId].uwMemUsed += uwUsedSize;
80003560:	8001e7b7          	lui	a5,0x8001e
80003564:	fec42703          	lw	a4,-20(s0)
80003568:	00271713          	slli	a4,a4,0x2
8000356c:	1e478793          	addi	a5,a5,484 # 8001e1e4 <__stack_top+0xfffdfbe4>
80003570:	00f707b3          	add	a5,a4,a5
80003574:	0007a703          	lw	a4,0(a5)
80003578:	fdc42783          	lw	a5,-36(s0)
8000357c:	00f70733          	add	a4,a4,a5
80003580:	8001e7b7          	lui	a5,0x8001e
80003584:	fec42683          	lw	a3,-20(s0)
80003588:	00269693          	slli	a3,a3,0x2
8000358c:	1e478793          	addi	a5,a5,484 # 8001e1e4 <__stack_top+0xfffdfbe4>
80003590:	00f687b3          	add	a5,a3,a5
80003594:	00e7a023          	sw	a4,0(a5)
80003598:	0180006f          	j	800035b0 <osTaskMemUsedInc+0x98>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:53
        return;
8000359c:	00000013          	nop
800035a0:	0100006f          	j	800035b0 <osTaskMemUsedInc+0x98>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:58
        return;
800035a4:	00000013          	nop
800035a8:	0080006f          	j	800035b0 <osTaskMemUsedInc+0x98>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:65
        return;
800035ac:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:69
}
800035b0:	02c12403          	lw	s0,44(sp)
800035b4:	03010113          	addi	sp,sp,48
800035b8:	00008067          	ret
800035bc:	0000                	unimp
	...

800035c0 <osTaskMemUsedDec>:
osTaskMemUsedDec():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:72

LITE_OS_SEC_TEXT_MINOR VOID osTaskMemUsedDec(UINT32 uwUsedSize)
{
800035c0:	fd010113          	addi	sp,sp,-48
800035c4:	02812623          	sw	s0,44(sp)
800035c8:	03010413          	addi	s0,sp,48
800035cc:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:75
    UINT32 taskId;

    taskId = (UINT32) g_stLosTask.pstRunTask->uwTaskID;
800035d0:	8001e7b7          	lui	a5,0x8001e
800035d4:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
800035d8:	0007a783          	lw	a5,0(a5)
800035dc:	0107a783          	lw	a5,16(a5)
800035e0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:77

    if (taskId > LOSCFG_BASE_CORE_TSK_LIMIT)
800035e4:	fec42703          	lw	a4,-20(s0)
800035e8:	00f00793          	li	a5,15
800035ec:	04e7e463          	bltu	a5,a4,80003634 <osTaskMemUsedDec+0x74>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:82
    {
        return;
    }

    if (OS_INT_ACTIVE)
800035f0:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
800035f4:	04079463          	bnez	a5,8000363c <osTaskMemUsedDec+0x7c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:87
    {
        return;
    }

    g_TskMemUsedInfo[taskId].uwMemUsed -= uwUsedSize;
800035f8:	8001e7b7          	lui	a5,0x8001e
800035fc:	fec42703          	lw	a4,-20(s0)
80003600:	00271713          	slli	a4,a4,0x2
80003604:	1e478793          	addi	a5,a5,484 # 8001e1e4 <__stack_top+0xfffdfbe4>
80003608:	00f707b3          	add	a5,a4,a5
8000360c:	0007a703          	lw	a4,0(a5)
80003610:	fdc42783          	lw	a5,-36(s0)
80003614:	40f70733          	sub	a4,a4,a5
80003618:	8001e7b7          	lui	a5,0x8001e
8000361c:	fec42683          	lw	a3,-20(s0)
80003620:	00269693          	slli	a3,a3,0x2
80003624:	1e478793          	addi	a5,a5,484 # 8001e1e4 <__stack_top+0xfffdfbe4>
80003628:	00f687b3          	add	a5,a3,a5
8000362c:	00e7a023          	sw	a4,0(a5)
80003630:	0100006f          	j	80003640 <osTaskMemUsedDec+0x80>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:79
        return;
80003634:	00000013          	nop
80003638:	0080006f          	j	80003640 <osTaskMemUsedDec+0x80>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:84
        return;
8000363c:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_memstat.c:88
}
80003640:	02c12403          	lw	s0,44(sp)
80003644:	03010113          	addi	sp,sp,48
80003648:	00008067          	ret
8000364c:	0000                	unimp
	...

80003650 <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:81
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE INLINE VOID LOS_ListInit(LOS_DL_LIST *pstList)
{
80003650:	fe010113          	addi	sp,sp,-32
80003654:	00812e23          	sw	s0,28(sp)
80003658:	02010413          	addi	s0,sp,32
8000365c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:82
    pstList->pstNext = pstList;
80003660:	fec42783          	lw	a5,-20(s0)
80003664:	fec42703          	lw	a4,-20(s0)
80003668:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:83
    pstList->pstPrev = pstList;
8000366c:	fec42783          	lw	a5,-20(s0)
80003670:	fec42703          	lw	a4,-20(s0)
80003674:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:84
}
80003678:	00000013          	nop
8000367c:	01c12403          	lw	s0,28(sp)
80003680:	02010113          	addi	sp,sp,32
80003684:	00008067          	ret
80003688:	0000                	unimp
	...

8000368c <LOS_Log2>:
LOS_Log2():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:42
#define IF_ELSE(mask, if_do, else_do) if(uwSize & (mask)){if_do}else{else_do}
#define BIT_NUM(num) return num;
#define BIT_NONE BIT_NUM(0xfffffff)

INLINE UINT32 LOS_Log2(UINT32 uwSize)
{
8000368c:	fe010113          	addi	sp,sp,-32
80003690:	00812e23          	sw	s0,28(sp)
80003694:	02010413          	addi	s0,sp,32
80003698:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43
    IF_ELSE(0x80000000, \
8000369c:	fec42783          	lw	a5,-20(s0)
800036a0:	0007d863          	bgez	a5,800036b0 <LOS_Log2+0x24>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 1)
800036a4:	100007b7          	lui	a5,0x10000
800036a8:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
800036ac:	2c40006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 2)
800036b0:	fec42703          	lw	a4,-20(s0)
800036b4:	7fff07b7          	lui	a5,0x7fff0
800036b8:	00f777b3          	and	a5,a4,a5
800036bc:	14078e63          	beqz	a5,80003818 <LOS_Log2+0x18c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 3)
800036c0:	fec42703          	lw	a4,-20(s0)
800036c4:	7f0007b7          	lui	a5,0x7f000
800036c8:	00f777b3          	and	a5,a4,a5
800036cc:	08078e63          	beqz	a5,80003768 <LOS_Log2+0xdc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 5)
800036d0:	fec42703          	lw	a4,-20(s0)
800036d4:	700007b7          	lui	a5,0x70000
800036d8:	00f777b3          	and	a5,a4,a5
800036dc:	02078e63          	beqz	a5,80003718 <LOS_Log2+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 7)
800036e0:	fec42703          	lw	a4,-20(s0)
800036e4:	400007b7          	lui	a5,0x40000
800036e8:	00f777b3          	and	a5,a4,a5
800036ec:	00078663          	beqz	a5,800036f8 <LOS_Log2+0x6c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 9)
800036f0:	01e00793          	li	a5,30
800036f4:	27c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 10)
800036f8:	fec42703          	lw	a4,-20(s0)
800036fc:	200007b7          	lui	a5,0x20000
80003700:	00f777b3          	and	a5,a4,a5
80003704:	00078663          	beqz	a5,80003710 <LOS_Log2+0x84>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 11)
80003708:	01d00793          	li	a5,29
8000370c:	2640006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 12)
80003710:	01c00793          	li	a5,28
80003714:	25c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 8)
80003718:	fec42703          	lw	a4,-20(s0)
8000371c:	0c0007b7          	lui	a5,0xc000
80003720:	00f777b3          	and	a5,a4,a5
80003724:	02078263          	beqz	a5,80003748 <LOS_Log2+0xbc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 13)
80003728:	fec42703          	lw	a4,-20(s0)
8000372c:	080007b7          	lui	a5,0x8000
80003730:	00f777b3          	and	a5,a4,a5
80003734:	00078663          	beqz	a5,80003740 <LOS_Log2+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 15)
80003738:	01b00793          	li	a5,27
8000373c:	2340006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 16)
80003740:	01a00793          	li	a5,26
80003744:	22c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 14)
80003748:	fec42703          	lw	a4,-20(s0)
8000374c:	020007b7          	lui	a5,0x2000
80003750:	00f777b3          	and	a5,a4,a5
80003754:	00078663          	beqz	a5,80003760 <LOS_Log2+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 17)
80003758:	01900793          	li	a5,25
8000375c:	2140006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 18)
80003760:	01800793          	li	a5,24
80003764:	20c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 6)
80003768:	fec42703          	lw	a4,-20(s0)
8000376c:	00f007b7          	lui	a5,0xf00
80003770:	00f777b3          	and	a5,a4,a5
80003774:	04078a63          	beqz	a5,800037c8 <LOS_Log2+0x13c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 19)
80003778:	fec42703          	lw	a4,-20(s0)
8000377c:	00c007b7          	lui	a5,0xc00
80003780:	00f777b3          	and	a5,a4,a5
80003784:	02078263          	beqz	a5,800037a8 <LOS_Log2+0x11c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 21)
80003788:	fec42703          	lw	a4,-20(s0)
8000378c:	008007b7          	lui	a5,0x800
80003790:	00f777b3          	and	a5,a4,a5
80003794:	00078663          	beqz	a5,800037a0 <LOS_Log2+0x114>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 23)
80003798:	01700793          	li	a5,23
8000379c:	1d40006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 24)
800037a0:	01600793          	li	a5,22
800037a4:	1cc0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 22)
800037a8:	fec42703          	lw	a4,-20(s0)
800037ac:	002007b7          	lui	a5,0x200
800037b0:	00f777b3          	and	a5,a4,a5
800037b4:	00078663          	beqz	a5,800037c0 <LOS_Log2+0x134>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 25)
800037b8:	01500793          	li	a5,21
800037bc:	1b40006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 26)
800037c0:	01400793          	li	a5,20
800037c4:	1ac0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 20)
800037c8:	fec42703          	lw	a4,-20(s0)
800037cc:	000c07b7          	lui	a5,0xc0
800037d0:	00f777b3          	and	a5,a4,a5
800037d4:	02078263          	beqz	a5,800037f8 <LOS_Log2+0x16c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 27)
800037d8:	fec42703          	lw	a4,-20(s0)
800037dc:	000807b7          	lui	a5,0x80
800037e0:	00f777b3          	and	a5,a4,a5
800037e4:	00078663          	beqz	a5,800037f0 <LOS_Log2+0x164>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 29)
800037e8:	01300793          	li	a5,19
800037ec:	1840006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 30)
800037f0:	01200793          	li	a5,18
800037f4:	17c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 28)
800037f8:	fec42703          	lw	a4,-20(s0)
800037fc:	000207b7          	lui	a5,0x20
80003800:	00f777b3          	and	a5,a4,a5
80003804:	00078663          	beqz	a5,80003810 <LOS_Log2+0x184>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 31)
80003808:	01100793          	li	a5,17
8000380c:	1640006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 32)
80003810:	01000793          	li	a5,16
80003814:	15c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 4)
80003818:	fec42703          	lw	a4,-20(s0)
8000381c:	000107b7          	lui	a5,0x10
80003820:	f0078793          	addi	a5,a5,-256 # ff00 <OS_TASK_STATUS_NOT_RUNNING+0xfe11>
80003824:	00f777b3          	and	a5,a4,a5
80003828:	0a078c63          	beqz	a5,800038e0 <LOS_Log2+0x254>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 33)
8000382c:	fec42703          	lw	a4,-20(s0)
80003830:	0000f7b7          	lui	a5,0xf
80003834:	00f777b3          	and	a5,a4,a5
80003838:	04078a63          	beqz	a5,8000388c <LOS_Log2+0x200>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 35)
8000383c:	fec42703          	lw	a4,-20(s0)
80003840:	0000c7b7          	lui	a5,0xc
80003844:	00f777b3          	and	a5,a4,a5
80003848:	02078263          	beqz	a5,8000386c <LOS_Log2+0x1e0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 37)
8000384c:	fec42703          	lw	a4,-20(s0)
80003850:	000087b7          	lui	a5,0x8
80003854:	00f777b3          	and	a5,a4,a5
80003858:	00078663          	beqz	a5,80003864 <LOS_Log2+0x1d8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 39)
8000385c:	00f00793          	li	a5,15
80003860:	1100006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 40)
80003864:	00e00793          	li	a5,14
80003868:	1080006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 38)
8000386c:	fec42703          	lw	a4,-20(s0)
80003870:	000027b7          	lui	a5,0x2
80003874:	00f777b3          	and	a5,a4,a5
80003878:	00078663          	beqz	a5,80003884 <LOS_Log2+0x1f8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 41)
8000387c:	00d00793          	li	a5,13
80003880:	0f00006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 42)
80003884:	00c00793          	li	a5,12
80003888:	0e80006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 36)
8000388c:	fec42703          	lw	a4,-20(s0)
80003890:	000017b7          	lui	a5,0x1
80003894:	c0078793          	addi	a5,a5,-1024 # c00 <OS_TASK_STATUS_NOT_RUNNING+0xb11>
80003898:	00f777b3          	and	a5,a4,a5
8000389c:	02078463          	beqz	a5,800038c4 <LOS_Log2+0x238>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 43)
800038a0:	fec42703          	lw	a4,-20(s0)
800038a4:	000017b7          	lui	a5,0x1
800038a8:	80078793          	addi	a5,a5,-2048 # 800 <OS_TASK_STATUS_NOT_RUNNING+0x711>
800038ac:	00f777b3          	and	a5,a4,a5
800038b0:	00078663          	beqz	a5,800038bc <LOS_Log2+0x230>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 45)
800038b4:	00b00793          	li	a5,11
800038b8:	0b80006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 46)
800038bc:	00a00793          	li	a5,10
800038c0:	0b00006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 44)
800038c4:	fec42783          	lw	a5,-20(s0)
800038c8:	2007f793          	andi	a5,a5,512
800038cc:	00078663          	beqz	a5,800038d8 <LOS_Log2+0x24c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 47)
800038d0:	00900793          	li	a5,9
800038d4:	09c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 48)
800038d8:	00800793          	li	a5,8
800038dc:	0940006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 34)
800038e0:	fec42783          	lw	a5,-20(s0)
800038e4:	0f07f793          	andi	a5,a5,240
800038e8:	04078463          	beqz	a5,80003930 <LOS_Log2+0x2a4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 49)
800038ec:	fec42783          	lw	a5,-20(s0)
800038f0:	0c07f793          	andi	a5,a5,192
800038f4:	02078063          	beqz	a5,80003914 <LOS_Log2+0x288>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 51)
800038f8:	fec42783          	lw	a5,-20(s0)
800038fc:	0807f793          	andi	a5,a5,128
80003900:	00078663          	beqz	a5,8000390c <LOS_Log2+0x280>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 53)
80003904:	00700793          	li	a5,7
80003908:	0680006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 54)
8000390c:	00600793          	li	a5,6
80003910:	0600006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 52)
80003914:	fec42783          	lw	a5,-20(s0)
80003918:	0207f793          	andi	a5,a5,32
8000391c:	00078663          	beqz	a5,80003928 <LOS_Log2+0x29c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 55)
80003920:	00500793          	li	a5,5
80003924:	04c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 56)
80003928:	00400793          	li	a5,4
8000392c:	0440006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 50)
80003930:	fec42783          	lw	a5,-20(s0)
80003934:	00c7f793          	andi	a5,a5,12
80003938:	02078063          	beqz	a5,80003958 <LOS_Log2+0x2cc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 57)
8000393c:	fec42783          	lw	a5,-20(s0)
80003940:	0087f793          	andi	a5,a5,8
80003944:	00078663          	beqz	a5,80003950 <LOS_Log2+0x2c4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 59)
80003948:	00300793          	li	a5,3
8000394c:	0240006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 60)
80003950:	00200793          	li	a5,2
80003954:	01c0006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 58)
80003958:	fec42783          	lw	a5,-20(s0)
8000395c:	0027f793          	andi	a5,a5,2
80003960:	00078663          	beqz	a5,8000396c <LOS_Log2+0x2e0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 61)
80003964:	00100793          	li	a5,1
80003968:	0080006f          	j	80003970 <LOS_Log2+0x2e4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:43 (discriminator 62)
8000396c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:77
                                            IF_ELSE(0x00000020, BIT_NUM(5), BIT_NUM(4))), \
                                    IF_ELSE(0x0000000c, \
                                            IF_ELSE(0x00000008, BIT_NUM(3), BIT_NUM(2)), \
                                            IF_ELSE(0x00000002, BIT_NUM(1), BIT_NUM(0)))))))\

}
80003970:	00078513          	mv	a0,a5
80003974:	01c12403          	lw	s0,28(sp)
80003978:	02010113          	addi	sp,sp,32
8000397c:	00008067          	ret
80003980:	0000                	unimp
	...

80003984 <LOS_DLnkInitMultiHead>:
LOS_DLnkInitMultiHead():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:80

LITE_OS_SEC_TEXT_INIT VOID LOS_DLnkInitMultiHead(VOID *pHeadAddr)
{
80003984:	fd010113          	addi	sp,sp,-48
80003988:	02112623          	sw	ra,44(sp)
8000398c:	02812423          	sw	s0,40(sp)
80003990:	03010413          	addi	s0,sp,48
80003994:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:81
    LOS_MULTIPLE_DLNK_HEAD *head = (LOS_MULTIPLE_DLNK_HEAD *)pHeadAddr;
80003998:	fdc42783          	lw	a5,-36(s0)
8000399c:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:82
    LOS_DL_LIST *pstListHead = head->stListHead;
800039a0:	fe442783          	lw	a5,-28(s0)
800039a4:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:85
    UINT32 i;

    for (i = 0; i < OS_MULTI_DLNK_NUM; ++i, ++pstListHead)
800039a8:	fe042423          	sw	zero,-24(s0)
800039ac:	0240006f          	j	800039d0 <LOS_DLnkInitMultiHead+0x4c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:87 (discriminator 3)
    {
        LOS_ListInit(pstListHead);
800039b0:	fec42503          	lw	a0,-20(s0)
800039b4:	c9dff0ef          	jal	ra,80003650 <LOS_ListInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:85 (discriminator 3)
    for (i = 0; i < OS_MULTI_DLNK_NUM; ++i, ++pstListHead)
800039b8:	fe842783          	lw	a5,-24(s0)
800039bc:	00178793          	addi	a5,a5,1
800039c0:	fef42423          	sw	a5,-24(s0)
800039c4:	fec42783          	lw	a5,-20(s0)
800039c8:	00878793          	addi	a5,a5,8
800039cc:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:85 (discriminator 1)
800039d0:	fe842703          	lw	a4,-24(s0)
800039d4:	01a00793          	li	a5,26
800039d8:	fce7fce3          	bleu	a4,a5,800039b0 <LOS_DLnkInitMultiHead+0x2c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:89
    }
}
800039dc:	00000013          	nop
800039e0:	02c12083          	lw	ra,44(sp)
800039e4:	02812403          	lw	s0,40(sp)
800039e8:	03010113          	addi	sp,sp,48
800039ec:	00008067          	ret
800039f0:	0000                	unimp
	...

800039f4 <LOS_DLnkMultiHead>:
LOS_DLnkMultiHead():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:92

LITE_OS_SEC_TEXT_MINOR LOS_DL_LIST *LOS_DLnkMultiHead(VOID *pHeadAddr, UINT32 uwSize)
{
800039f4:	fd010113          	addi	sp,sp,-48
800039f8:	02112623          	sw	ra,44(sp)
800039fc:	02812423          	sw	s0,40(sp)
80003a00:	03010413          	addi	s0,sp,48
80003a04:	fca42e23          	sw	a0,-36(s0)
80003a08:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:93
    LOS_MULTIPLE_DLNK_HEAD *head = (LOS_MULTIPLE_DLNK_HEAD *)pHeadAddr;
80003a0c:	fdc42783          	lw	a5,-36(s0)
80003a10:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:94
    UINT32 idx =  LOS_Log2(uwSize);
80003a14:	fd842503          	lw	a0,-40(s0)
80003a18:	c75ff0ef          	jal	ra,8000368c <LOS_Log2>
80003a1c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:96

    if(idx > OS_MAX_MULTI_DLNK_LOG2)
80003a20:	fec42703          	lw	a4,-20(s0)
80003a24:	01e00793          	li	a5,30
80003a28:	00e7f663          	bleu	a4,a5,80003a34 <LOS_DLnkMultiHead+0x40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:98
    {
        return (LOS_DL_LIST *)NULL;
80003a2c:	00000793          	li	a5,0
80003a30:	0340006f          	j	80003a64 <LOS_DLnkMultiHead+0x70>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:101
    }

    if(idx <= OS_MIN_MULTI_DLNK_LOG2)
80003a34:	fec42703          	lw	a4,-20(s0)
80003a38:	00400793          	li	a5,4
80003a3c:	00e7e663          	bltu	a5,a4,80003a48 <LOS_DLnkMultiHead+0x54>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:103
    {
        idx = OS_MIN_MULTI_DLNK_LOG2;
80003a40:	00400793          	li	a5,4
80003a44:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:106
    }

    return head->stListHead + (idx - OS_MIN_MULTI_DLNK_LOG2);
80003a48:	fe842703          	lw	a4,-24(s0)
80003a4c:	fec42683          	lw	a3,-20(s0)
80003a50:	200007b7          	lui	a5,0x20000
80003a54:	ffc78793          	addi	a5,a5,-4 # 1ffffffc <RAM_SIZE+0x1ff7fffc>
80003a58:	00f687b3          	add	a5,a3,a5
80003a5c:	00379793          	slli	a5,a5,0x3
80003a60:	00f707b3          	add	a5,a4,a5
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/mem/los_multipledlinkhead.c:107
}
80003a64:	00078513          	mv	a0,a5
80003a68:	02c12083          	lw	ra,44(sp)
80003a6c:	02812403          	lw	s0,40(sp)
80003a70:	03010113          	addi	sp,sp,48
80003a74:	00008067          	ret
80003a78:	0000                	unimp
	...

80003a7c <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:258
    }

    pstEventCB->stEventList.pstNext = (LOS_DL_LIST *)NULL;
    pstEventCB->stEventList.pstPrev = (LOS_DL_LIST *)NULL;
    return LOS_OK;
}
80003a7c:	fe010113          	addi	sp,sp,-32
80003a80:	00812e23          	sw	s0,28(sp)
80003a84:	02010413          	addi	s0,sp,32
80003a88:	fea42623          	sw	a0,-20(s0)
80003a8c:	fec42783          	lw	a5,-20(s0)
80003a90:	fec42703          	lw	a4,-20(s0)
80003a94:	00e7a223          	sw	a4,4(a5)
80003a98:	fec42783          	lw	a5,-20(s0)
80003a9c:	fec42703          	lw	a4,-20(s0)
80003aa0:	00e7a023          	sw	a4,0(a5)
80003aa4:	00000013          	nop
80003aa8:	01c12403          	lw	s0,28(sp)
80003aac:	02010113          	addi	sp,sp,32
80003ab0:	00008067          	ret
80003ab4:	0000                	unimp
	...

80003ab8 <LOS_ListAdd>:
LOS_ListAdd():
80003ab8:	fe010113          	addi	sp,sp,-32
80003abc:	00812e23          	sw	s0,28(sp)
80003ac0:	02010413          	addi	s0,sp,32
80003ac4:	fea42623          	sw	a0,-20(s0)
80003ac8:	feb42423          	sw	a1,-24(s0)
80003acc:	fec42783          	lw	a5,-20(s0)
80003ad0:	0047a703          	lw	a4,4(a5)
80003ad4:	fe842783          	lw	a5,-24(s0)
80003ad8:	00e7a223          	sw	a4,4(a5)
80003adc:	fe842783          	lw	a5,-24(s0)
80003ae0:	fec42703          	lw	a4,-20(s0)
80003ae4:	00e7a023          	sw	a4,0(a5)
80003ae8:	fec42783          	lw	a5,-20(s0)
80003aec:	0047a783          	lw	a5,4(a5)
80003af0:	fe842703          	lw	a4,-24(s0)
80003af4:	00e7a023          	sw	a4,0(a5)
80003af8:	fec42783          	lw	a5,-20(s0)
80003afc:	fe842703          	lw	a4,-24(s0)
80003b00:	00e7a223          	sw	a4,4(a5)
80003b04:	00000013          	nop
80003b08:	01c12403          	lw	s0,28(sp)
80003b0c:	02010113          	addi	sp,sp,32
80003b10:	00008067          	ret
80003b14:	0000                	unimp
	...

80003b18 <LOS_ListTailInsert>:
LOS_ListTailInsert():
80003b18:	fe010113          	addi	sp,sp,-32
80003b1c:	00112e23          	sw	ra,28(sp)
80003b20:	00812c23          	sw	s0,24(sp)
80003b24:	02010413          	addi	s0,sp,32
80003b28:	fea42623          	sw	a0,-20(s0)
80003b2c:	feb42423          	sw	a1,-24(s0)
80003b30:	fec42783          	lw	a5,-20(s0)
80003b34:	0007a783          	lw	a5,0(a5)
80003b38:	fe842583          	lw	a1,-24(s0)
80003b3c:	00078513          	mv	a0,a5
80003b40:	f79ff0ef          	jal	ra,80003ab8 <LOS_ListAdd>
80003b44:	00000013          	nop
80003b48:	01c12083          	lw	ra,28(sp)
80003b4c:	01812403          	lw	s0,24(sp)
80003b50:	02010113          	addi	sp,sp,32
80003b54:	00008067          	ret
80003b58:	0000                	unimp
	...

80003b5c <LOS_ListDelete>:
LOS_ListDelete():
80003b5c:	fe010113          	addi	sp,sp,-32
80003b60:	00812e23          	sw	s0,28(sp)
80003b64:	02010413          	addi	s0,sp,32
80003b68:	fea42623          	sw	a0,-20(s0)
80003b6c:	fec42783          	lw	a5,-20(s0)
80003b70:	0047a783          	lw	a5,4(a5)
80003b74:	fec42703          	lw	a4,-20(s0)
80003b78:	00072703          	lw	a4,0(a4)
80003b7c:	00e7a023          	sw	a4,0(a5)
80003b80:	fec42783          	lw	a5,-20(s0)
80003b84:	0007a783          	lw	a5,0(a5)
80003b88:	fec42703          	lw	a4,-20(s0)
80003b8c:	00472703          	lw	a4,4(a4)
80003b90:	00e7a223          	sw	a4,4(a5)
80003b94:	fec42783          	lw	a5,-20(s0)
80003b98:	0007a223          	sw	zero,4(a5)
80003b9c:	fec42783          	lw	a5,-20(s0)
80003ba0:	0007a023          	sw	zero,0(a5)
80003ba4:	00000013          	nop
80003ba8:	01c12403          	lw	s0,28(sp)
80003bac:	02010113          	addi	sp,sp,32
80003bb0:	00008067          	ret
80003bb4:	0000                	unimp
	...

80003bb8 <LOS_ListEmpty>:
LOS_ListEmpty():
80003bb8:	fe010113          	addi	sp,sp,-32
80003bbc:	00812e23          	sw	s0,28(sp)
80003bc0:	02010413          	addi	s0,sp,32
80003bc4:	fea42623          	sw	a0,-20(s0)
80003bc8:	fec42783          	lw	a5,-20(s0)
80003bcc:	0047a783          	lw	a5,4(a5)
80003bd0:	fec42703          	lw	a4,-20(s0)
80003bd4:	40f707b3          	sub	a5,a4,a5
80003bd8:	0017b793          	seqz	a5,a5
80003bdc:	0ff7f793          	andi	a5,a5,255
80003be0:	00078513          	mv	a0,a5
80003be4:	01c12403          	lw	s0,28(sp)
80003be8:	02010113          	addi	sp,sp,32
80003bec:	00008067          	ret
80003bf0:	0000                	unimp
	...

80003bf4 <LOS_EventInit>:
LOS_EventInit():
80003bf4:	fe010113          	addi	sp,sp,-32
80003bf8:	00112e23          	sw	ra,28(sp)
80003bfc:	00812c23          	sw	s0,24(sp)
80003c00:	02010413          	addi	s0,sp,32
80003c04:	fea42623          	sw	a0,-20(s0)
80003c08:	fec42783          	lw	a5,-20(s0)
80003c0c:	00079863          	bnez	a5,80003c1c <LOS_EventInit+0x28>
80003c10:	020027b7          	lui	a5,0x2002
80003c14:	c0678793          	addi	a5,a5,-1018 # 2001c06 <RAM_SIZE+0x1f81c06>
80003c18:	0200006f          	j	80003c38 <LOS_EventInit+0x44>
80003c1c:	fec42783          	lw	a5,-20(s0)
80003c20:	0007a023          	sw	zero,0(a5)
80003c24:	fec42783          	lw	a5,-20(s0)
80003c28:	00478793          	addi	a5,a5,4
80003c2c:	00078513          	mv	a0,a5
80003c30:	e4dff0ef          	jal	ra,80003a7c <LOS_ListInit>
80003c34:	00000793          	li	a5,0
80003c38:	00078513          	mv	a0,a5
80003c3c:	01c12083          	lw	ra,28(sp)
80003c40:	01812403          	lw	s0,24(sp)
80003c44:	02010113          	addi	sp,sp,32
80003c48:	00008067          	ret
80003c4c:	0000                	unimp
	...

80003c50 <LOS_EventPoll>:
LOS_EventPoll():
80003c50:	fd010113          	addi	sp,sp,-48
80003c54:	02112623          	sw	ra,44(sp)
80003c58:	02812423          	sw	s0,40(sp)
80003c5c:	03010413          	addi	s0,sp,48
80003c60:	fca42e23          	sw	a0,-36(s0)
80003c64:	fcb42c23          	sw	a1,-40(s0)
80003c68:	fcc42a23          	sw	a2,-44(s0)
80003c6c:	fe042623          	sw	zero,-20(s0)
80003c70:	f89fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
80003c74:	fea42423          	sw	a0,-24(s0)
80003c78:	fd442783          	lw	a5,-44(s0)
80003c7c:	0027f793          	andi	a5,a5,2
80003c80:	02078863          	beqz	a5,80003cb0 <LOS_EventPoll+0x60>
80003c84:	fdc42783          	lw	a5,-36(s0)
80003c88:	0007a703          	lw	a4,0(a5)
80003c8c:	fd842783          	lw	a5,-40(s0)
80003c90:	00f777b3          	and	a5,a4,a5
80003c94:	04078863          	beqz	a5,80003ce4 <LOS_EventPoll+0x94>
80003c98:	fdc42783          	lw	a5,-36(s0)
80003c9c:	0007a783          	lw	a5,0(a5)
80003ca0:	fd842703          	lw	a4,-40(s0)
80003ca4:	00f777b3          	and	a5,a4,a5
80003ca8:	fef42623          	sw	a5,-20(s0)
80003cac:	0380006f          	j	80003ce4 <LOS_EventPoll+0x94>
80003cb0:	fd842783          	lw	a5,-40(s0)
80003cb4:	02078863          	beqz	a5,80003ce4 <LOS_EventPoll+0x94>
80003cb8:	fdc42783          	lw	a5,-36(s0)
80003cbc:	0007a703          	lw	a4,0(a5)
80003cc0:	fd842783          	lw	a5,-40(s0)
80003cc4:	00f777b3          	and	a5,a4,a5
80003cc8:	fd842703          	lw	a4,-40(s0)
80003ccc:	00f71c63          	bne	a4,a5,80003ce4 <LOS_EventPoll+0x94>
80003cd0:	fdc42783          	lw	a5,-36(s0)
80003cd4:	0007a783          	lw	a5,0(a5)
80003cd8:	fd842703          	lw	a4,-40(s0)
80003cdc:	00f777b3          	and	a5,a4,a5
80003ce0:	fef42623          	sw	a5,-20(s0)
80003ce4:	fec42783          	lw	a5,-20(s0)
80003ce8:	02078663          	beqz	a5,80003d14 <LOS_EventPoll+0xc4>
80003cec:	fd442783          	lw	a5,-44(s0)
80003cf0:	0017f793          	andi	a5,a5,1
80003cf4:	02078063          	beqz	a5,80003d14 <LOS_EventPoll+0xc4>
80003cf8:	fdc42783          	lw	a5,-36(s0)
80003cfc:	0007a703          	lw	a4,0(a5)
80003d00:	fec42783          	lw	a5,-20(s0)
80003d04:	fff7c793          	not	a5,a5
80003d08:	00f77733          	and	a4,a4,a5
80003d0c:	fdc42783          	lw	a5,-36(s0)
80003d10:	00e7a023          	sw	a4,0(a5)
80003d14:	fe842503          	lw	a0,-24(s0)
80003d18:	f01fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003d1c:	fec42783          	lw	a5,-20(s0)
80003d20:	00078513          	mv	a0,a5
80003d24:	02c12083          	lw	ra,44(sp)
80003d28:	02812403          	lw	s0,40(sp)
80003d2c:	03010113          	addi	sp,sp,48
80003d30:	00008067          	ret
80003d34:	0000                	unimp
	...

80003d38 <LOS_EventRead>:
LOS_EventRead():
80003d38:	fd010113          	addi	sp,sp,-48
80003d3c:	02112623          	sw	ra,44(sp)
80003d40:	02812423          	sw	s0,40(sp)
80003d44:	03010413          	addi	s0,sp,48
80003d48:	fca42e23          	sw	a0,-36(s0)
80003d4c:	fcb42c23          	sw	a1,-40(s0)
80003d50:	fcc42a23          	sw	a2,-44(s0)
80003d54:	fcd42823          	sw	a3,-48(s0)
80003d58:	fe042623          	sw	zero,-20(s0)
80003d5c:	fdc42783          	lw	a5,-36(s0)
80003d60:	00079863          	bnez	a5,80003d70 <LOS_EventRead+0x38>
80003d64:	020027b7          	lui	a5,0x2002
80003d68:	c0678793          	addi	a5,a5,-1018 # 2001c06 <RAM_SIZE+0x1f81c06>
80003d6c:	2680006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003d70:	fd842783          	lw	a5,-40(s0)
80003d74:	00079863          	bnez	a5,80003d84 <LOS_EventRead+0x4c>
80003d78:	020027b7          	lui	a5,0x2002
80003d7c:	c0278793          	addi	a5,a5,-1022 # 2001c02 <RAM_SIZE+0x1f81c02>
80003d80:	2540006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003d84:	fd842703          	lw	a4,-40(s0)
80003d88:	020007b7          	lui	a5,0x2000
80003d8c:	00f777b3          	and	a5,a4,a5
80003d90:	00078863          	beqz	a5,80003da0 <LOS_EventRead+0x68>
80003d94:	020027b7          	lui	a5,0x2002
80003d98:	c0078793          	addi	a5,a5,-1024 # 2001c00 <RAM_SIZE+0x1f81c00>
80003d9c:	2380006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003da0:	fd442783          	lw	a5,-44(s0)
80003da4:	0027f793          	andi	a5,a5,2
80003da8:	00078863          	beqz	a5,80003db8 <LOS_EventRead+0x80>
80003dac:	fd442783          	lw	a5,-44(s0)
80003db0:	0047f793          	andi	a5,a5,4
80003db4:	00079e63          	bnez	a5,80003dd0 <LOS_EventRead+0x98>
80003db8:	fd442783          	lw	a5,-44(s0)
80003dbc:	ff87f793          	andi	a5,a5,-8
80003dc0:	00079863          	bnez	a5,80003dd0 <LOS_EventRead+0x98>
80003dc4:	fd442783          	lw	a5,-44(s0)
80003dc8:	0067f793          	andi	a5,a5,6
80003dcc:	00079863          	bnez	a5,80003ddc <LOS_EventRead+0xa4>
80003dd0:	020027b7          	lui	a5,0x2002
80003dd4:	c0478793          	addi	a5,a5,-1020 # 2001c04 <RAM_SIZE+0x1f81c04>
80003dd8:	1fc0006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003ddc:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
80003de0:	00078863          	beqz	a5,80003df0 <LOS_EventRead+0xb8>
80003de4:	020027b7          	lui	a5,0x2002
80003de8:	c0378793          	addi	a5,a5,-1021 # 2001c03 <RAM_SIZE+0x1f81c03>
80003dec:	1e80006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003df0:	e09fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
80003df4:	fea42423          	sw	a0,-24(s0)
80003df8:	fdc42783          	lw	a5,-36(s0)
80003dfc:	fd442603          	lw	a2,-44(s0)
80003e00:	fd842583          	lw	a1,-40(s0)
80003e04:	00078513          	mv	a0,a5
80003e08:	e49ff0ef          	jal	ra,80003c50 <LOS_EventPoll>
80003e0c:	fea42623          	sw	a0,-20(s0)
80003e10:	fec42783          	lw	a5,-20(s0)
80003e14:	1a079a63          	bnez	a5,80003fc8 <LOS_EventRead+0x290>
80003e18:	fd042783          	lw	a5,-48(s0)
80003e1c:	00079a63          	bnez	a5,80003e30 <LOS_EventRead+0xf8>
80003e20:	fe842503          	lw	a0,-24(s0)
80003e24:	df5fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003e28:	fec42783          	lw	a5,-20(s0)
80003e2c:	1a80006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003e30:	8001e7b7          	lui	a5,0x8001e
80003e34:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80003e38:	00078c63          	beqz	a5,80003e50 <LOS_EventRead+0x118>
80003e3c:	fe842503          	lw	a0,-24(s0)
80003e40:	dd9fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003e44:	020027b7          	lui	a5,0x2002
80003e48:	c0578793          	addi	a5,a5,-1019 # 2001c05 <RAM_SIZE+0x1f81c05>
80003e4c:	1880006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003e50:	8001e7b7          	lui	a5,0x8001e
80003e54:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80003e58:	0007a783          	lw	a5,0(a5)
80003e5c:	fef42223          	sw	a5,-28(s0)
80003e60:	fe442783          	lw	a5,-28(s0)
80003e64:	03c78793          	addi	a5,a5,60
80003e68:	00078513          	mv	a0,a5
80003e6c:	540020ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80003e70:	fe442783          	lw	a5,-28(s0)
80003e74:	0047d783          	lhu	a5,4(a5)
80003e78:	ffb7f793          	andi	a5,a5,-5
80003e7c:	01079713          	slli	a4,a5,0x10
80003e80:	01075713          	srli	a4,a4,0x10
80003e84:	fe442783          	lw	a5,-28(s0)
80003e88:	00e79223          	sh	a4,4(a5)
80003e8c:	fe442783          	lw	a5,-28(s0)
80003e90:	03c78793          	addi	a5,a5,60
80003e94:	fef42023          	sw	a5,-32(s0)
80003e98:	fe442783          	lw	a5,-28(s0)
80003e9c:	0047d783          	lhu	a5,4(a5)
80003ea0:	0087e793          	ori	a5,a5,8
80003ea4:	01079713          	slli	a4,a5,0x10
80003ea8:	01075713          	srli	a4,a4,0x10
80003eac:	fe442783          	lw	a5,-28(s0)
80003eb0:	00e79223          	sh	a4,4(a5)
80003eb4:	fe442783          	lw	a5,-28(s0)
80003eb8:	fd842703          	lw	a4,-40(s0)
80003ebc:	04e7ae23          	sw	a4,92(a5)
80003ec0:	fe442783          	lw	a5,-28(s0)
80003ec4:	fd442703          	lw	a4,-44(s0)
80003ec8:	06e7a023          	sw	a4,96(a5)
80003ecc:	fdc42783          	lw	a5,-36(s0)
80003ed0:	00478793          	addi	a5,a5,4
80003ed4:	fe042583          	lw	a1,-32(s0)
80003ed8:	00078513          	mv	a0,a5
80003edc:	c3dff0ef          	jal	ra,80003b18 <LOS_ListTailInsert>
80003ee0:	fd042783          	lw	a5,-48(s0)
80003ee4:	04078463          	beqz	a5,80003f2c <LOS_EventRead+0x1f4>
80003ee8:	fd042703          	lw	a4,-48(s0)
80003eec:	fff00793          	li	a5,-1
80003ef0:	02f70e63          	beq	a4,a5,80003f2c <LOS_EventRead+0x1f4>
80003ef4:	fe442783          	lw	a5,-28(s0)
80003ef8:	0047d783          	lhu	a5,4(a5)
80003efc:	0407e793          	ori	a5,a5,64
80003f00:	01079713          	slli	a4,a5,0x10
80003f04:	01075713          	srli	a4,a4,0x10
80003f08:	fe442783          	lw	a5,-28(s0)
80003f0c:	00e79223          	sh	a4,4(a5)
80003f10:	fd042583          	lw	a1,-48(s0)
80003f14:	fe442503          	lw	a0,-28(s0)
80003f18:	378030ef          	jal	ra,80007290 <osTaskAdd2TimerList>
80003f1c:	fe842503          	lw	a0,-24(s0)
80003f20:	cf9fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003f24:	e21fd0ef          	jal	ra,80001d44 <LOS_Schedule>
80003f28:	02c0006f          	j	80003f54 <LOS_EventRead+0x21c>
80003f2c:	fe442783          	lw	a5,-28(s0)
80003f30:	0047d783          	lhu	a5,4(a5)
80003f34:	fbf7f793          	andi	a5,a5,-65
80003f38:	01079713          	slli	a4,a5,0x10
80003f3c:	01075713          	srli	a4,a4,0x10
80003f40:	fe442783          	lw	a5,-28(s0)
80003f44:	00e79223          	sh	a4,4(a5)
80003f48:	fe842503          	lw	a0,-24(s0)
80003f4c:	ccdfd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003f50:	df5fd0ef          	jal	ra,80001d44 <LOS_Schedule>
80003f54:	fe442783          	lw	a5,-28(s0)
80003f58:	0047d783          	lhu	a5,4(a5)
80003f5c:	0407f793          	andi	a5,a5,64
80003f60:	02078e63          	beqz	a5,80003f9c <LOS_EventRead+0x264>
80003f64:	c95fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
80003f68:	fea42423          	sw	a0,-24(s0)
80003f6c:	fe442783          	lw	a5,-28(s0)
80003f70:	0047d783          	lhu	a5,4(a5)
80003f74:	fbf7f793          	andi	a5,a5,-65
80003f78:	01079713          	slli	a4,a5,0x10
80003f7c:	01075713          	srli	a4,a4,0x10
80003f80:	fe442783          	lw	a5,-28(s0)
80003f84:	00e79223          	sh	a4,4(a5)
80003f88:	fe842503          	lw	a0,-24(s0)
80003f8c:	c8dfd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003f90:	020027b7          	lui	a5,0x2002
80003f94:	c0178793          	addi	a5,a5,-1023 # 2001c01 <RAM_SIZE+0x1f81c01>
80003f98:	03c0006f          	j	80003fd4 <LOS_EventRead+0x29c>
80003f9c:	c5dfd0ef          	jal	ra,80001bf8 <LOS_IntLock>
80003fa0:	fea42423          	sw	a0,-24(s0)
80003fa4:	fdc42783          	lw	a5,-36(s0)
80003fa8:	fd442603          	lw	a2,-44(s0)
80003fac:	fd842583          	lw	a1,-40(s0)
80003fb0:	00078513          	mv	a0,a5
80003fb4:	c9dff0ef          	jal	ra,80003c50 <LOS_EventPoll>
80003fb8:	fea42623          	sw	a0,-20(s0)
80003fbc:	fe842503          	lw	a0,-24(s0)
80003fc0:	c59fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003fc4:	00c0006f          	j	80003fd0 <LOS_EventRead+0x298>
80003fc8:	fe842503          	lw	a0,-24(s0)
80003fcc:	c4dfd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80003fd0:	fec42783          	lw	a5,-20(s0)
80003fd4:	00078513          	mv	a0,a5
80003fd8:	02c12083          	lw	ra,44(sp)
80003fdc:	02812403          	lw	s0,40(sp)
80003fe0:	03010113          	addi	sp,sp,48
80003fe4:	00008067          	ret
80003fe8:	0000                	unimp
	...

80003fec <LOS_EventWrite>:
LOS_EventWrite():
80003fec:	fd010113          	addi	sp,sp,-48
80003ff0:	02112623          	sw	ra,44(sp)
80003ff4:	02812423          	sw	s0,40(sp)
80003ff8:	03010413          	addi	s0,sp,48
80003ffc:	fca42e23          	sw	a0,-36(s0)
80004000:	fcb42c23          	sw	a1,-40(s0)
80004004:	fe042223          	sw	zero,-28(s0)
80004008:	fe0405a3          	sb	zero,-21(s0)
8000400c:	fdc42783          	lw	a5,-36(s0)
80004010:	00079863          	bnez	a5,80004020 <LOS_EventWrite+0x34>
80004014:	020027b7          	lui	a5,0x2002
80004018:	c0678793          	addi	a5,a5,-1018 # 2001c06 <RAM_SIZE+0x1f81c06>
8000401c:	1d00006f          	j	800041ec <LOS_EventWrite+0x200>
80004020:	fd842703          	lw	a4,-40(s0)
80004024:	020007b7          	lui	a5,0x2000
80004028:	00f777b3          	and	a5,a4,a5
8000402c:	00078863          	beqz	a5,8000403c <LOS_EventWrite+0x50>
80004030:	020027b7          	lui	a5,0x2002
80004034:	c0078793          	addi	a5,a5,-1024 # 2001c00 <RAM_SIZE+0x1f81c00>
80004038:	1b40006f          	j	800041ec <LOS_EventWrite+0x200>
8000403c:	bbdfd0ef          	jal	ra,80001bf8 <LOS_IntLock>
80004040:	fea42023          	sw	a0,-32(s0)
80004044:	fdc42783          	lw	a5,-36(s0)
80004048:	0007a703          	lw	a4,0(a5)
8000404c:	fd842783          	lw	a5,-40(s0)
80004050:	00f76733          	or	a4,a4,a5
80004054:	fdc42783          	lw	a5,-36(s0)
80004058:	00e7a023          	sw	a4,0(a5)
8000405c:	fdc42783          	lw	a5,-36(s0)
80004060:	00478793          	addi	a5,a5,4
80004064:	00078513          	mv	a0,a5
80004068:	b51ff0ef          	jal	ra,80003bb8 <LOS_ListEmpty>
8000406c:	00050793          	mv	a5,a0
80004070:	16079863          	bnez	a5,800041e0 <LOS_EventWrite+0x1f4>
80004074:	fdc42783          	lw	a5,-36(s0)
80004078:	0087a783          	lw	a5,8(a5)
8000407c:	fc478793          	addi	a5,a5,-60
80004080:	fef42623          	sw	a5,-20(s0)
80004084:	1200006f          	j	800041a4 <LOS_EventWrite+0x1b8>
80004088:	fec42783          	lw	a5,-20(s0)
8000408c:	0407a783          	lw	a5,64(a5)
80004090:	fc478793          	addi	a5,a5,-60
80004094:	fef42223          	sw	a5,-28(s0)
80004098:	fec42783          	lw	a5,-20(s0)
8000409c:	0607a783          	lw	a5,96(a5)
800040a0:	0027f793          	andi	a5,a5,2
800040a4:	00078c63          	beqz	a5,800040bc <LOS_EventWrite+0xd0>
800040a8:	fec42783          	lw	a5,-20(s0)
800040ac:	05c7a703          	lw	a4,92(a5)
800040b0:	fd842783          	lw	a5,-40(s0)
800040b4:	00f777b3          	and	a5,a4,a5
800040b8:	02079a63          	bnez	a5,800040ec <LOS_EventWrite+0x100>
800040bc:	fec42783          	lw	a5,-20(s0)
800040c0:	0607a783          	lw	a5,96(a5)
800040c4:	0047f793          	andi	a5,a5,4
800040c8:	0c078a63          	beqz	a5,8000419c <LOS_EventWrite+0x1b0>
800040cc:	fec42783          	lw	a5,-20(s0)
800040d0:	05c7a703          	lw	a4,92(a5)
800040d4:	fdc42783          	lw	a5,-36(s0)
800040d8:	0007a783          	lw	a5,0(a5)
800040dc:	00f77733          	and	a4,a4,a5
800040e0:	fec42783          	lw	a5,-20(s0)
800040e4:	05c7a783          	lw	a5,92(a5)
800040e8:	0af71a63          	bne	a4,a5,8000419c <LOS_EventWrite+0x1b0>
800040ec:	00100793          	li	a5,1
800040f0:	fef405a3          	sb	a5,-21(s0)
800040f4:	fec42783          	lw	a5,-20(s0)
800040f8:	03c78793          	addi	a5,a5,60
800040fc:	00078513          	mv	a0,a5
80004100:	a5dff0ef          	jal	ra,80003b5c <LOS_ListDelete>
80004104:	fec42783          	lw	a5,-20(s0)
80004108:	0047d783          	lhu	a5,4(a5)
8000410c:	ff77f793          	andi	a5,a5,-9
80004110:	01079713          	slli	a4,a5,0x10
80004114:	01075713          	srli	a4,a4,0x10
80004118:	fec42783          	lw	a5,-20(s0)
8000411c:	00e79223          	sh	a4,4(a5)
80004120:	fec42783          	lw	a5,-20(s0)
80004124:	0047d783          	lhu	a5,4(a5)
80004128:	0407f793          	andi	a5,a5,64
8000412c:	02078463          	beqz	a5,80004154 <LOS_EventWrite+0x168>
80004130:	fec42503          	lw	a0,-20(s0)
80004134:	37c030ef          	jal	ra,800074b0 <osTimerListDelete>
80004138:	fec42783          	lw	a5,-20(s0)
8000413c:	0047d783          	lhu	a5,4(a5)
80004140:	fbf7f793          	andi	a5,a5,-65
80004144:	01079713          	slli	a4,a5,0x10
80004148:	01075713          	srli	a4,a4,0x10
8000414c:	fec42783          	lw	a5,-20(s0)
80004150:	00e79223          	sh	a4,4(a5)
80004154:	fec42783          	lw	a5,-20(s0)
80004158:	0047d783          	lhu	a5,4(a5)
8000415c:	0027f793          	andi	a5,a5,2
80004160:	02079e63          	bnez	a5,8000419c <LOS_EventWrite+0x1b0>
80004164:	fec42783          	lw	a5,-20(s0)
80004168:	0047d783          	lhu	a5,4(a5)
8000416c:	0047e793          	ori	a5,a5,4
80004170:	01079713          	slli	a4,a5,0x10
80004174:	01075713          	srli	a4,a4,0x10
80004178:	fec42783          	lw	a5,-20(s0)
8000417c:	00e79223          	sh	a4,4(a5)
80004180:	fec42783          	lw	a5,-20(s0)
80004184:	03c78713          	addi	a4,a5,60
80004188:	fec42783          	lw	a5,-20(s0)
8000418c:	0067d783          	lhu	a5,6(a5)
80004190:	00078593          	mv	a1,a5
80004194:	00070513          	mv	a0,a4
80004198:	1c4020ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
8000419c:	fe442783          	lw	a5,-28(s0)
800041a0:	fef42623          	sw	a5,-20(s0)
800041a4:	fec42783          	lw	a5,-20(s0)
800041a8:	03c78713          	addi	a4,a5,60
800041ac:	fdc42783          	lw	a5,-36(s0)
800041b0:	00478793          	addi	a5,a5,4
800041b4:	ecf71ae3          	bne	a4,a5,80004088 <LOS_EventWrite+0x9c>
800041b8:	feb44703          	lbu	a4,-21(s0)
800041bc:	00100793          	li	a5,1
800041c0:	00f71a63          	bne	a4,a5,800041d4 <LOS_EventWrite+0x1e8>
800041c4:	fe042503          	lw	a0,-32(s0)
800041c8:	a51fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
800041cc:	b79fd0ef          	jal	ra,80001d44 <LOS_Schedule>
800041d0:	0180006f          	j	800041e8 <LOS_EventWrite+0x1fc>
800041d4:	fe042503          	lw	a0,-32(s0)
800041d8:	a41fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
800041dc:	00c0006f          	j	800041e8 <LOS_EventWrite+0x1fc>
800041e0:	fe042503          	lw	a0,-32(s0)
800041e4:	a35fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
800041e8:	00000793          	li	a5,0
800041ec:	00078513          	mv	a0,a5
800041f0:	02c12083          	lw	ra,44(sp)
800041f4:	02812403          	lw	s0,40(sp)
800041f8:	03010113          	addi	sp,sp,48
800041fc:	00008067          	ret
80004200:	0000                	unimp
	...

80004204 <LOS_EventClear>:
LOS_EventClear():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:260
LITE_OS_SEC_TEXT_MINOR UINT32 LOS_EventClear(PEVENT_CB_S pstEventCB, UINT32 uwEvents)
{
80004204:	fd010113          	addi	sp,sp,-48
80004208:	02112623          	sw	ra,44(sp)
8000420c:	02812423          	sw	s0,40(sp)
80004210:	03010413          	addi	s0,sp,48
80004214:	fca42e23          	sw	a0,-36(s0)
80004218:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:263
    UINTPTR uvIntSave;

    if (pstEventCB == NULL)
8000421c:	fdc42783          	lw	a5,-36(s0)
80004220:	00079863          	bnez	a5,80004230 <LOS_EventClear+0x2c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:265
    {
        return LOS_ERRNO_EVENT_PTR_NULL;
80004224:	020027b7          	lui	a5,0x2002
80004228:	c0678793          	addi	a5,a5,-1018 # 2001c06 <RAM_SIZE+0x1f81c06>
8000422c:	0300006f          	j	8000425c <LOS_EventClear+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:267
    }
    uvIntSave = LOS_IntLock();
80004230:	9c9fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
80004234:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:268
    pstEventCB->uwEventID &= uwEvents;
80004238:	fdc42783          	lw	a5,-36(s0)
8000423c:	0007a703          	lw	a4,0(a5)
80004240:	fd842783          	lw	a5,-40(s0)
80004244:	00f77733          	and	a4,a4,a5
80004248:	fdc42783          	lw	a5,-36(s0)
8000424c:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:269
    (VOID)LOS_IntRestore(uvIntSave);
80004250:	fec42503          	lw	a0,-20(s0)
80004254:	9c5fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:271

    return LOS_OK;
80004258:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_event.c:272
}
8000425c:	00078513          	mv	a0,a5
80004260:	02c12083          	lw	ra,44(sp)
80004264:	02812403          	lw	s0,40(sp)
80004268:	03010113          	addi	sp,sp,48
8000426c:	00008067          	ret
80004270:	0000                	unimp
	...

80004274 <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:81
{
80004274:	fe010113          	addi	sp,sp,-32
80004278:	00812e23          	sw	s0,28(sp)
8000427c:	02010413          	addi	s0,sp,32
80004280:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:82
    pstList->pstNext = pstList;
80004284:	fec42783          	lw	a5,-20(s0)
80004288:	fec42703          	lw	a4,-20(s0)
8000428c:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:83
    pstList->pstPrev = pstList;
80004290:	fec42783          	lw	a5,-20(s0)
80004294:	fec42703          	lw	a4,-20(s0)
80004298:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:84
}
8000429c:	00000013          	nop
800042a0:	01c12403          	lw	s0,28(sp)
800042a4:	02010113          	addi	sp,sp,32
800042a8:	00008067          	ret
800042ac:	0000                	unimp
	...

800042b0 <LOS_ListAdd>:
LOS_ListAdd():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:130
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE INLINE VOID LOS_ListAdd(LOS_DL_LIST *pstList, LOS_DL_LIST *pstNode)
{
800042b0:	fe010113          	addi	sp,sp,-32
800042b4:	00812e23          	sw	s0,28(sp)
800042b8:	02010413          	addi	s0,sp,32
800042bc:	fea42623          	sw	a0,-20(s0)
800042c0:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:131
    pstNode->pstNext = pstList->pstNext;
800042c4:	fec42783          	lw	a5,-20(s0)
800042c8:	0047a703          	lw	a4,4(a5)
800042cc:	fe842783          	lw	a5,-24(s0)
800042d0:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:132
    pstNode->pstPrev = pstList;
800042d4:	fe842783          	lw	a5,-24(s0)
800042d8:	fec42703          	lw	a4,-20(s0)
800042dc:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:133
    pstList->pstNext->pstPrev = pstNode;
800042e0:	fec42783          	lw	a5,-20(s0)
800042e4:	0047a783          	lw	a5,4(a5)
800042e8:	fe842703          	lw	a4,-24(s0)
800042ec:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:134
    pstList->pstNext = pstNode;
800042f0:	fec42783          	lw	a5,-20(s0)
800042f4:	fe842703          	lw	a4,-24(s0)
800042f8:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:135
}
800042fc:	00000013          	nop
80004300:	01c12403          	lw	s0,28(sp)
80004304:	02010113          	addi	sp,sp,32
80004308:	00008067          	ret
8000430c:	0000                	unimp
	...

80004310 <LOS_ListTailInsert>:
LOS_ListTailInsert():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:158
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see LOS_ListAdd
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE INLINE VOID LOS_ListTailInsert(LOS_DL_LIST *pstList, LOS_DL_LIST *pstNode)
{
80004310:	fe010113          	addi	sp,sp,-32
80004314:	00112e23          	sw	ra,28(sp)
80004318:	00812c23          	sw	s0,24(sp)
8000431c:	02010413          	addi	s0,sp,32
80004320:	fea42623          	sw	a0,-20(s0)
80004324:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:159
    LOS_ListAdd(pstList->pstPrev, pstNode);
80004328:	fec42783          	lw	a5,-20(s0)
8000432c:	0007a783          	lw	a5,0(a5)
80004330:	fe842583          	lw	a1,-24(s0)
80004334:	00078513          	mv	a0,a5
80004338:	f79ff0ef          	jal	ra,800042b0 <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:160
}
8000433c:	00000013          	nop
80004340:	01c12083          	lw	ra,28(sp)
80004344:	01812403          	lw	s0,24(sp)
80004348:	02010113          	addi	sp,sp,32
8000434c:	00008067          	ret
80004350:	0000                	unimp
	...

80004354 <LOS_ListDelete>:
LOS_ListDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:184
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see LOS_ListAdd
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE INLINE VOID LOS_ListDelete(LOS_DL_LIST *pstNode)
{
80004354:	fe010113          	addi	sp,sp,-32
80004358:	00812e23          	sw	s0,28(sp)
8000435c:	02010413          	addi	s0,sp,32
80004360:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:185
    pstNode->pstNext->pstPrev = pstNode->pstPrev;
80004364:	fec42783          	lw	a5,-20(s0)
80004368:	0047a783          	lw	a5,4(a5)
8000436c:	fec42703          	lw	a4,-20(s0)
80004370:	00072703          	lw	a4,0(a4)
80004374:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:186
    pstNode->pstPrev->pstNext = pstNode->pstNext;
80004378:	fec42783          	lw	a5,-20(s0)
8000437c:	0007a783          	lw	a5,0(a5)
80004380:	fec42703          	lw	a4,-20(s0)
80004384:	00472703          	lw	a4,4(a4)
80004388:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:187
    pstNode->pstNext = (LOS_DL_LIST *)NULL;
8000438c:	fec42783          	lw	a5,-20(s0)
80004390:	0007a223          	sw	zero,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:188
    pstNode->pstPrev = (LOS_DL_LIST *)NULL;
80004394:	fec42783          	lw	a5,-20(s0)
80004398:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:189
}
8000439c:	00000013          	nop
800043a0:	01c12403          	lw	s0,28(sp)
800043a4:	02010113          	addi	sp,sp,32
800043a8:	00008067          	ret
800043ac:	0000                	unimp
	...

800043b0 <LOS_ListEmpty>:
LOS_ListEmpty():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:214
 *<ul><li>los_list.h: the header file that contains the API declaration.</li></ul>
 *@see
 *@since Huawei LiteOS V100R001C00
 */
LITE_OS_SEC_ALW_INLINE INLINE BOOL LOS_ListEmpty(LOS_DL_LIST *pstNode)
{
800043b0:	fe010113          	addi	sp,sp,-32
800043b4:	00812e23          	sw	s0,28(sp)
800043b8:	02010413          	addi	s0,sp,32
800043bc:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:215
    return (BOOL)(pstNode->pstNext == pstNode);
800043c0:	fec42783          	lw	a5,-20(s0)
800043c4:	0047a783          	lw	a5,4(a5)
800043c8:	fec42703          	lw	a4,-20(s0)
800043cc:	40f707b3          	sub	a5,a4,a5
800043d0:	0017b793          	seqz	a5,a5
800043d4:	0ff7f793          	andi	a5,a5,255
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:216
}
800043d8:	00078513          	mv	a0,a5
800043dc:	01c12403          	lw	s0,28(sp)
800043e0:	02010113          	addi	sp,sp,32
800043e4:	00008067          	ret
800043e8:	0000                	unimp
	...

800043ec <osMuxInit>:
osMuxInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:63
 Input        : None
 Output       : None
 Return       : LOS_OK on success ,or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 osMuxInit(VOID)
{
800043ec:	fe010113          	addi	sp,sp,-32
800043f0:	00112e23          	sw	ra,28(sp)
800043f4:	00812c23          	sw	s0,24(sp)
800043f8:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:67
    MUX_CB_S *pstMuxNode;
    UINT32   uwIndex;

    LOS_ListInit(&g_stUnusedMuxList);
800043fc:	8001e7b7          	lui	a5,0x8001e
80004400:	22878513          	addi	a0,a5,552 # 8001e228 <__stack_top+0xfffdfc28>
80004404:	e71ff0ef          	jal	ra,80004274 <LOS_ListInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:70
    if (LOSCFG_BASE_IPC_MUX_LIMIT > 0)   /*lint !e506*/
    {
        g_pstAllMux = (MUX_CB_S *)LOS_MemAlloc(m_aucSysMem0, (LOSCFG_BASE_IPC_MUX_LIMIT * sizeof(MUX_CB_S)));
80004408:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
8000440c:	0f000593          	li	a1,240
80004410:	00078513          	mv	a0,a5
80004414:	ea9fe0ef          	jal	ra,800032bc <LOS_MemAlloc>
80004418:	00050713          	mv	a4,a0
8000441c:	8001e7b7          	lui	a5,0x8001e
80004420:	22e7a223          	sw	a4,548(a5) # 8001e224 <__stack_top+0xfffdfc24>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:71
        if (NULL == g_pstAllMux)
80004424:	8001e7b7          	lui	a5,0x8001e
80004428:	2247a783          	lw	a5,548(a5) # 8001e224 <__stack_top+0xfffdfc24>
8000442c:	00079863          	bnez	a5,8000443c <osMuxInit+0x50>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:73
        {
            return LOS_ERRNO_MUX_NO_MEMORY;
80004430:	020027b7          	lui	a5,0x2002
80004434:	d0078793          	addi	a5,a5,-768 # 2001d00 <RAM_SIZE+0x1f81d00>
80004438:	0780006f          	j	800044b0 <osMuxInit+0xc4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:76
        }

        for (uwIndex = 0; uwIndex < LOSCFG_BASE_IPC_MUX_LIMIT; uwIndex++)
8000443c:	fe042623          	sw	zero,-20(s0)
80004440:	0600006f          	j	800044a0 <osMuxInit+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:78 (discriminator 3)
        {
            pstMuxNode              = ((MUX_CB_S *)g_pstAllMux) + uwIndex;
80004444:	8001e7b7          	lui	a5,0x8001e
80004448:	2247a683          	lw	a3,548(a5) # 8001e224 <__stack_top+0xfffdfc24>
8000444c:	fec42703          	lw	a4,-20(s0)
80004450:	00070793          	mv	a5,a4
80004454:	00179793          	slli	a5,a5,0x1
80004458:	00e787b3          	add	a5,a5,a4
8000445c:	00379793          	slli	a5,a5,0x3
80004460:	00f687b3          	add	a5,a3,a5
80004464:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:79 (discriminator 3)
            pstMuxNode->ucMuxID     = uwIndex;
80004468:	fe842783          	lw	a5,-24(s0)
8000446c:	fec42703          	lw	a4,-20(s0)
80004470:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:80 (discriminator 3)
            pstMuxNode->ucMuxStat   = OS_MUX_UNUSED;
80004474:	fe842783          	lw	a5,-24(s0)
80004478:	00078023          	sb	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:81 (discriminator 3)
            LOS_ListTailInsert(&g_stUnusedMuxList, &pstMuxNode->stMuxList);
8000447c:	fe842783          	lw	a5,-24(s0)
80004480:	00878793          	addi	a5,a5,8
80004484:	00078593          	mv	a1,a5
80004488:	8001e7b7          	lui	a5,0x8001e
8000448c:	22878513          	addi	a0,a5,552 # 8001e228 <__stack_top+0xfffdfc28>
80004490:	e81ff0ef          	jal	ra,80004310 <LOS_ListTailInsert>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:76 (discriminator 3)
        for (uwIndex = 0; uwIndex < LOSCFG_BASE_IPC_MUX_LIMIT; uwIndex++)
80004494:	fec42783          	lw	a5,-20(s0)
80004498:	00178793          	addi	a5,a5,1
8000449c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:76 (discriminator 1)
800044a0:	fec42703          	lw	a4,-20(s0)
800044a4:	00900793          	li	a5,9
800044a8:	f8e7fee3          	bleu	a4,a5,80004444 <osMuxInit+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:84
        }
    }
    return LOS_OK;
800044ac:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:85
}
800044b0:	00078513          	mv	a0,a5
800044b4:	01c12083          	lw	ra,28(sp)
800044b8:	01812403          	lw	s0,24(sp)
800044bc:	02010113          	addi	sp,sp,32
800044c0:	00008067          	ret
800044c4:	0000                	unimp
	...

800044c8 <LOS_MuxCreate>:
LOS_MuxCreate():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:95
 Input        : None
 Output       : puwMuxHandle ------ Mutex operation handle
 Return       : LOS_OK on success ,or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT  UINT32  LOS_MuxCreate (UINT32 *puwMuxHandle)
{
800044c8:	fd010113          	addi	sp,sp,-48
800044cc:	02112623          	sw	ra,44(sp)
800044d0:	02812423          	sw	s0,40(sp)
800044d4:	03010413          	addi	s0,sp,48
800044d8:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:100
    UINT32      uwIntSave;
    MUX_CB_S    *pstMuxCreated;
    LOS_DL_LIST *pstUnusedMux;

    if (NULL == puwMuxHandle)
800044dc:	fdc42783          	lw	a5,-36(s0)
800044e0:	00079863          	bnez	a5,800044f0 <LOS_MuxCreate+0x28>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:102
    {
        return LOS_ERRNO_MUX_PTR_NULL;
800044e4:	020027b7          	lui	a5,0x2002
800044e8:	d0278793          	addi	a5,a5,-766 # 2001d02 <RAM_SIZE+0x1f81d02>
800044ec:	0a80006f          	j	80004594 <LOS_MuxCreate+0xcc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:105
    }

    uwIntSave = LOS_IntLock();
800044f0:	f08fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
800044f4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:106
    if (LOS_ListEmpty(&g_stUnusedMuxList))
800044f8:	8001e7b7          	lui	a5,0x8001e
800044fc:	22878513          	addi	a0,a5,552 # 8001e228 <__stack_top+0xfffdfc28>
80004500:	eb1ff0ef          	jal	ra,800043b0 <LOS_ListEmpty>
80004504:	00050793          	mv	a5,a0
80004508:	00078c63          	beqz	a5,80004520 <LOS_MuxCreate+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:108
    {
        LOS_IntRestore(uwIntSave);
8000450c:	fec42503          	lw	a0,-20(s0)
80004510:	f08fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:109
        return LOS_ERRNO_MUX_ALL_BUSY;
80004514:	020027b7          	lui	a5,0x2002
80004518:	d0378793          	addi	a5,a5,-765 # 2001d03 <RAM_SIZE+0x1f81d03>
8000451c:	0780006f          	j	80004594 <LOS_MuxCreate+0xcc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:112
    }

    pstUnusedMux                = LOS_DL_LIST_FIRST(&(g_stUnusedMuxList));
80004520:	8001e7b7          	lui	a5,0x8001e
80004524:	22878793          	addi	a5,a5,552 # 8001e228 <__stack_top+0xfffdfc28>
80004528:	0047a783          	lw	a5,4(a5)
8000452c:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:113
    LOS_ListDelete(pstUnusedMux);
80004530:	fe842503          	lw	a0,-24(s0)
80004534:	e21ff0ef          	jal	ra,80004354 <LOS_ListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:114
    pstMuxCreated               = (GET_MUX_LIST(pstUnusedMux)); /*lint !e413*/
80004538:	fe842783          	lw	a5,-24(s0)
8000453c:	ff878793          	addi	a5,a5,-8
80004540:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:115
    pstMuxCreated->usMuxCount   = 0;
80004544:	fe442783          	lw	a5,-28(s0)
80004548:	00079123          	sh	zero,2(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:116
    pstMuxCreated->ucMuxStat    = OS_MUX_USED;
8000454c:	fe442783          	lw	a5,-28(s0)
80004550:	00100713          	li	a4,1
80004554:	00e78023          	sb	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:117
    pstMuxCreated->usPriority   = 0;
80004558:	fe442783          	lw	a5,-28(s0)
8000455c:	00079a23          	sh	zero,20(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:118
    pstMuxCreated->pstOwner     = (LOS_TASK_CB *)NULL;
80004560:	fe442783          	lw	a5,-28(s0)
80004564:	0007a823          	sw	zero,16(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:119
    LOS_ListInit(&pstMuxCreated->stMuxList);
80004568:	fe442783          	lw	a5,-28(s0)
8000456c:	00878793          	addi	a5,a5,8
80004570:	00078513          	mv	a0,a5
80004574:	d01ff0ef          	jal	ra,80004274 <LOS_ListInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:120
    *puwMuxHandle               = (UINT32)pstMuxCreated->ucMuxID;
80004578:	fe442783          	lw	a5,-28(s0)
8000457c:	0047a703          	lw	a4,4(a5)
80004580:	fdc42783          	lw	a5,-36(s0)
80004584:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:121
    LOS_IntRestore(uwIntSave);
80004588:	fec42503          	lw	a0,-20(s0)
8000458c:	e8cfd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:122
    return LOS_OK;
80004590:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:123
}
80004594:	00078513          	mv	a0,a5
80004598:	02c12083          	lw	ra,44(sp)
8000459c:	02812403          	lw	s0,40(sp)
800045a0:	03010113          	addi	sp,sp,48
800045a4:	00008067          	ret
800045a8:	0000                	unimp
	...

800045ac <LOS_MuxDelete>:
LOS_MuxDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:133
 Input        : uwMuxHandle------Mutex operation handle
 Output       : None
 Return       : LOS_OK on success ,or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 LOS_MuxDelete(UINT32 uwMuxHandle)
{
800045ac:	fd010113          	addi	sp,sp,-48
800045b0:	02112623          	sw	ra,44(sp)
800045b4:	02812423          	sw	s0,40(sp)
800045b8:	03010413          	addi	s0,sp,48
800045bc:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:137
    UINT32    uwIntSave;
    MUX_CB_S *pstMuxDeleted;

   pstMuxDeleted = GET_MUX(uwMuxHandle);
800045c0:	8001e7b7          	lui	a5,0x8001e
800045c4:	2247a683          	lw	a3,548(a5) # 8001e224 <__stack_top+0xfffdfc24>
800045c8:	fdc42703          	lw	a4,-36(s0)
800045cc:	00070793          	mv	a5,a4
800045d0:	00179793          	slli	a5,a5,0x1
800045d4:	00e787b3          	add	a5,a5,a4
800045d8:	00379793          	slli	a5,a5,0x3
800045dc:	00f687b3          	add	a5,a3,a5
800045e0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:138
   uwIntSave = LOS_IntLock();
800045e4:	e14fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
800045e8:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:139
   if ((uwMuxHandle >= (UINT32)LOSCFG_BASE_IPC_MUX_LIMIT) ||
800045ec:	fdc42703          	lw	a4,-36(s0)
800045f0:	00900793          	li	a5,9
800045f4:	00e7e863          	bltu	a5,a4,80004604 <LOS_MuxDelete+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:140 (discriminator 1)
        (OS_MUX_UNUSED == pstMuxDeleted->ucMuxStat))
800045f8:	fec42783          	lw	a5,-20(s0)
800045fc:	0007c783          	lbu	a5,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:139 (discriminator 1)
   if ((uwMuxHandle >= (UINT32)LOSCFG_BASE_IPC_MUX_LIMIT) ||
80004600:	00079c63          	bnez	a5,80004618 <LOS_MuxDelete+0x6c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:142
   {
        LOS_IntRestore(uwIntSave);
80004604:	fe842503          	lw	a0,-24(s0)
80004608:	e10fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:143
        return LOS_ERRNO_MUX_INVALID;
8000460c:	020027b7          	lui	a5,0x2002
80004610:	d0178793          	addi	a5,a5,-767 # 2001d01 <RAM_SIZE+0x1f81d01>
80004614:	0680006f          	j	8000467c <LOS_MuxDelete+0xd0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:146
    }

   if (!LOS_ListEmpty(&pstMuxDeleted->stMuxList) || pstMuxDeleted->usMuxCount)
80004618:	fec42783          	lw	a5,-20(s0)
8000461c:	00878793          	addi	a5,a5,8
80004620:	00078513          	mv	a0,a5
80004624:	d8dff0ef          	jal	ra,800043b0 <LOS_ListEmpty>
80004628:	00050793          	mv	a5,a0
8000462c:	00078863          	beqz	a5,8000463c <LOS_MuxDelete+0x90>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:146 (discriminator 1)
80004630:	fec42783          	lw	a5,-20(s0)
80004634:	0027d783          	lhu	a5,2(a5)
80004638:	00078c63          	beqz	a5,80004650 <LOS_MuxDelete+0xa4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:148
   {
       LOS_IntRestore(uwIntSave);
8000463c:	fe842503          	lw	a0,-24(s0)
80004640:	dd8fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:149
       return LOS_ERRNO_MUX_PENDED;
80004644:	020027b7          	lui	a5,0x2002
80004648:	d0978793          	addi	a5,a5,-759 # 2001d09 <RAM_SIZE+0x1f81d09>
8000464c:	0300006f          	j	8000467c <LOS_MuxDelete+0xd0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:152
    }

   LOS_ListAdd(&g_stUnusedMuxList, &pstMuxDeleted->stMuxList);
80004650:	fec42783          	lw	a5,-20(s0)
80004654:	00878793          	addi	a5,a5,8
80004658:	00078593          	mv	a1,a5
8000465c:	8001e7b7          	lui	a5,0x8001e
80004660:	22878513          	addi	a0,a5,552 # 8001e228 <__stack_top+0xfffdfc28>
80004664:	c4dff0ef          	jal	ra,800042b0 <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:153
   pstMuxDeleted->ucMuxStat = OS_MUX_UNUSED;
80004668:	fec42783          	lw	a5,-20(s0)
8000466c:	00078023          	sb	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:155

   LOS_IntRestore(uwIntSave);
80004670:	fe842503          	lw	a0,-24(s0)
80004674:	da4fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:157

    return LOS_OK;
80004678:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:158
}
8000467c:	00078513          	mv	a0,a5
80004680:	02c12083          	lw	ra,44(sp)
80004684:	02812403          	lw	s0,40(sp)
80004688:	03010113          	addi	sp,sp,48
8000468c:	00008067          	ret
80004690:	0000                	unimp
	...

80004694 <LOS_MuxPend>:
LOS_MuxPend():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:169
                uwTimeOut  ------- waiting time,
 Output       : None
 Return       : LOS_OK on success ,or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_MuxPend(UINT32 uwMuxHandle, UINT32 uwTimeout)
{
80004694:	fc010113          	addi	sp,sp,-64
80004698:	02112e23          	sw	ra,60(sp)
8000469c:	02812c23          	sw	s0,56(sp)
800046a0:	04010413          	addi	s0,sp,64
800046a4:	fca42623          	sw	a0,-52(s0)
800046a8:	fcb42423          	sw	a1,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:176
    MUX_CB_S  *pstMuxPended;
    UINT32     uwRetErr;
    LOS_TASK_CB  *pstRunTsk;
    LOS_DL_LIST  *pstPendObj;

    pstMuxPended = GET_MUX(uwMuxHandle);
800046ac:	8001e7b7          	lui	a5,0x8001e
800046b0:	2247a683          	lw	a3,548(a5) # 8001e224 <__stack_top+0xfffdfc24>
800046b4:	fcc42703          	lw	a4,-52(s0)
800046b8:	00070793          	mv	a5,a4
800046bc:	00179793          	slli	a5,a5,0x1
800046c0:	00e787b3          	add	a5,a5,a4
800046c4:	00379793          	slli	a5,a5,0x3
800046c8:	00f687b3          	add	a5,a3,a5
800046cc:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:177
    uwIntSave = LOS_IntLock();
800046d0:	d28fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
800046d4:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:178
    if ((uwMuxHandle >= (UINT32)LOSCFG_BASE_IPC_MUX_LIMIT)
800046d8:	fcc42703          	lw	a4,-52(s0)
800046dc:	00900793          	li	a5,9
800046e0:	00e7e863          	bltu	a5,a4,800046f0 <LOS_MuxPend+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:179
    || (OS_MUX_UNUSED == pstMuxPended->ucMuxStat))
800046e4:	fe842783          	lw	a5,-24(s0)
800046e8:	0007c783          	lbu	a5,0(a5)
800046ec:	00079c63          	bnez	a5,80004704 <LOS_MuxPend+0x70>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:181
    {
        LOS_IntRestore(uwIntSave);
800046f0:	fe442503          	lw	a0,-28(s0)
800046f4:	d24fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:182
        return LOS_ERRNO_MUX_INVALID;
800046f8:	020027b7          	lui	a5,0x2002
800046fc:	d0178793          	addi	a5,a5,-767 # 2001d01 <RAM_SIZE+0x1f81d01>
80004700:	2700006f          	j	80004970 <LOS_MuxPend+0x2dc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:185
    }

    if (OS_INT_ACTIVE)
80004704:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
80004708:	00078c63          	beqz	a5,80004720 <LOS_MuxPend+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:187
    {
        LOS_IntRestore(uwIntSave);
8000470c:	fe442503          	lw	a0,-28(s0)
80004710:	d08fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:188
        return LOS_ERRNO_MUX_PEND_INTERR;
80004714:	020027b7          	lui	a5,0x2002
80004718:	d0578793          	addi	a5,a5,-763 # 2001d05 <RAM_SIZE+0x1f81d05>
8000471c:	2540006f          	j	80004970 <LOS_MuxPend+0x2dc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:191
    }

    pstRunTsk = (LOS_TASK_CB *)g_stLosTask.pstRunTask;
80004720:	8001e7b7          	lui	a5,0x8001e
80004724:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80004728:	0007a783          	lw	a5,0(a5)
8000472c:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:192
    if (pstMuxPended->usMuxCount == 0)
80004730:	fe842783          	lw	a5,-24(s0)
80004734:	0027d783          	lhu	a5,2(a5)
80004738:	04079663          	bnez	a5,80004784 <LOS_MuxPend+0xf0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:194
    {
        pstMuxPended->usMuxCount++;
8000473c:	fe842783          	lw	a5,-24(s0)
80004740:	0027d783          	lhu	a5,2(a5)
80004744:	00178793          	addi	a5,a5,1
80004748:	01079713          	slli	a4,a5,0x10
8000474c:	01075713          	srli	a4,a4,0x10
80004750:	fe842783          	lw	a5,-24(s0)
80004754:	00e79123          	sh	a4,2(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:195
        pstMuxPended->pstOwner = pstRunTsk;
80004758:	fe842783          	lw	a5,-24(s0)
8000475c:	fe042703          	lw	a4,-32(s0)
80004760:	00e7a823          	sw	a4,16(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:196
        pstMuxPended->usPriority = pstRunTsk->usPriority;
80004764:	fe042783          	lw	a5,-32(s0)
80004768:	0067d703          	lhu	a4,6(a5)
8000476c:	fe842783          	lw	a5,-24(s0)
80004770:	00e79a23          	sh	a4,20(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:197
        LOS_IntRestore(uwIntSave);
80004774:	fe442503          	lw	a0,-28(s0)
80004778:	ca0fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:198
        return LOS_OK;
8000477c:	00000793          	li	a5,0
80004780:	1f00006f          	j	80004970 <LOS_MuxPend+0x2dc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:201
    }

    if (pstMuxPended->pstOwner == pstRunTsk)
80004784:	fe842783          	lw	a5,-24(s0)
80004788:	0107a783          	lw	a5,16(a5)
8000478c:	fe042703          	lw	a4,-32(s0)
80004790:	02f71863          	bne	a4,a5,800047c0 <LOS_MuxPend+0x12c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:203
    {
        pstMuxPended->usMuxCount++;
80004794:	fe842783          	lw	a5,-24(s0)
80004798:	0027d783          	lhu	a5,2(a5)
8000479c:	00178793          	addi	a5,a5,1
800047a0:	01079713          	slli	a4,a5,0x10
800047a4:	01075713          	srli	a4,a4,0x10
800047a8:	fe842783          	lw	a5,-24(s0)
800047ac:	00e79123          	sh	a4,2(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:204
        LOS_IntRestore(uwIntSave);
800047b0:	fe442503          	lw	a0,-28(s0)
800047b4:	c64fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:205
        return LOS_OK;
800047b8:	00000793          	li	a5,0
800047bc:	1b40006f          	j	80004970 <LOS_MuxPend+0x2dc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:208
    }

    if (!uwTimeout)
800047c0:	fc842783          	lw	a5,-56(s0)
800047c4:	00079c63          	bnez	a5,800047dc <LOS_MuxPend+0x148>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:210
    {
        LOS_IntRestore(uwIntSave);
800047c8:	fe442503          	lw	a0,-28(s0)
800047cc:	c4cfd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:211
        return LOS_ERRNO_MUX_UNAVAILABLE;
800047d0:	020027b7          	lui	a5,0x2002
800047d4:	d0478793          	addi	a5,a5,-764 # 2001d04 <RAM_SIZE+0x1f81d04>
800047d8:	1980006f          	j	80004970 <LOS_MuxPend+0x2dc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:214
    }

    if (g_usLosTaskLock)
800047dc:	8001e7b7          	lui	a5,0x8001e
800047e0:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
800047e4:	02078063          	beqz	a5,80004804 <LOS_MuxPend+0x170>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:216
    {
        uwRetErr = LOS_ERRNO_MUX_PEND_IN_LOCK;
800047e8:	020027b7          	lui	a5,0x2002
800047ec:	d0678793          	addi	a5,a5,-762 # 2001d06 <RAM_SIZE+0x1f81d06>
800047f0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:218
        PRINT_ERR("!!!LOS_ERRNO_MUX_PEND_IN_LOCK!!!\n");
        goto errre_uniMuxPend;
800047f4:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:258
    }

    return LOS_OK;

errre_uniMuxPend:
    (VOID)LOS_IntRestore(uwIntSave);
800047f8:	fe442503          	lw	a0,-28(s0)
800047fc:	c1cfd0ef          	jal	ra,80001c18 <LOS_IntRestore>
80004800:	16c0006f          	j	8000496c <LOS_MuxPend+0x2d8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:221
    LOS_PriqueueDequeue(&pstRunTsk->stPendList);
80004804:	fe042783          	lw	a5,-32(s0)
80004808:	03c78793          	addi	a5,a5,60
8000480c:	00078513          	mv	a0,a5
80004810:	39d010ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:222
    pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_READY);
80004814:	fe042783          	lw	a5,-32(s0)
80004818:	0047d783          	lhu	a5,4(a5)
8000481c:	ffb7f793          	andi	a5,a5,-5
80004820:	01079713          	slli	a4,a5,0x10
80004824:	01075713          	srli	a4,a4,0x10
80004828:	fe042783          	lw	a5,-32(s0)
8000482c:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:223
    pstRunTsk->pTaskMux = (VOID *)pstMuxPended;
80004830:	fe042783          	lw	a5,-32(s0)
80004834:	fe842703          	lw	a4,-24(s0)
80004838:	02e7a223          	sw	a4,36(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:224
    pstPendObj = &pstRunTsk->stPendList;
8000483c:	fe042783          	lw	a5,-32(s0)
80004840:	03c78793          	addi	a5,a5,60
80004844:	fcf42e23          	sw	a5,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:225
    pstRunTsk->usTaskStatus |= OS_TASK_STATUS_PEND;
80004848:	fe042783          	lw	a5,-32(s0)
8000484c:	0047d783          	lhu	a5,4(a5)
80004850:	0087e793          	ori	a5,a5,8
80004854:	01079713          	slli	a4,a5,0x10
80004858:	01075713          	srli	a4,a4,0x10
8000485c:	fe042783          	lw	a5,-32(s0)
80004860:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:226
    if ((pstMuxPended->pstOwner->usPriority) > pstRunTsk->usPriority)
80004864:	fe842783          	lw	a5,-24(s0)
80004868:	0107a783          	lw	a5,16(a5)
8000486c:	0067d703          	lhu	a4,6(a5)
80004870:	fe042783          	lw	a5,-32(s0)
80004874:	0067d783          	lhu	a5,6(a5)
80004878:	02e7f063          	bleu	a4,a5,80004898 <LOS_MuxPend+0x204>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:228
        osTaskPriModify(pstMuxPended->pstOwner, pstRunTsk->usPriority);
8000487c:	fe842783          	lw	a5,-24(s0)
80004880:	0107a703          	lw	a4,16(a5)
80004884:	fe042783          	lw	a5,-32(s0)
80004888:	0067d783          	lhu	a5,6(a5)
8000488c:	00078593          	mv	a1,a5
80004890:	00070513          	mv	a0,a4
80004894:	139020ef          	jal	ra,800071cc <osTaskPriModify>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:231
    LOS_ListTailInsert(&pstMuxPended->stMuxList, pstPendObj);
80004898:	fe842783          	lw	a5,-24(s0)
8000489c:	00878793          	addi	a5,a5,8
800048a0:	fdc42583          	lw	a1,-36(s0)
800048a4:	00078513          	mv	a0,a5
800048a8:	a69ff0ef          	jal	ra,80004310 <LOS_ListTailInsert>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:232
    if (uwTimeout != LOS_WAIT_FOREVER)
800048ac:	fc842703          	lw	a4,-56(s0)
800048b0:	fff00793          	li	a5,-1
800048b4:	02f70e63          	beq	a4,a5,800048f0 <LOS_MuxPend+0x25c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:234
        pstRunTsk->usTaskStatus |= OS_TASK_STATUS_TIMEOUT;
800048b8:	fe042783          	lw	a5,-32(s0)
800048bc:	0047d783          	lhu	a5,4(a5)
800048c0:	0407e793          	ori	a5,a5,64
800048c4:	01079713          	slli	a4,a5,0x10
800048c8:	01075713          	srli	a4,a4,0x10
800048cc:	fe042783          	lw	a5,-32(s0)
800048d0:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:235
        osTaskAdd2TimerList((LOS_TASK_CB *)pstRunTsk, uwTimeout);
800048d4:	fc842583          	lw	a1,-56(s0)
800048d8:	fe042503          	lw	a0,-32(s0)
800048dc:	1b5020ef          	jal	ra,80007290 <osTaskAdd2TimerList>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:236
        (VOID)LOS_IntRestore(uwIntSave);
800048e0:	fe442503          	lw	a0,-28(s0)
800048e4:	b34fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:237
        LOS_Schedule();
800048e8:	c5cfd0ef          	jal	ra,80001d44 <LOS_Schedule>
800048ec:	02c0006f          	j	80004918 <LOS_MuxPend+0x284>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:241
        pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
800048f0:	fe042783          	lw	a5,-32(s0)
800048f4:	0047d783          	lhu	a5,4(a5)
800048f8:	fbf7f793          	andi	a5,a5,-65
800048fc:	01079713          	slli	a4,a5,0x10
80004900:	01075713          	srli	a4,a4,0x10
80004904:	fe042783          	lw	a5,-32(s0)
80004908:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:242
        (VOID)LOS_IntRestore(uwIntSave);
8000490c:	fe442503          	lw	a0,-28(s0)
80004910:	b08fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:243
        LOS_Schedule();
80004914:	c30fd0ef          	jal	ra,80001d44 <LOS_Schedule>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:246
    if (pstRunTsk->usTaskStatus & OS_TASK_STATUS_TIMEOUT)
80004918:	fe042783          	lw	a5,-32(s0)
8000491c:	0047d783          	lhu	a5,4(a5)
80004920:	0407f793          	andi	a5,a5,64
80004924:	04078063          	beqz	a5,80004964 <LOS_MuxPend+0x2d0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:248
        uwIntSave = LOS_IntLock();
80004928:	ad0fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
8000492c:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:249
        pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
80004930:	fe042783          	lw	a5,-32(s0)
80004934:	0047d783          	lhu	a5,4(a5)
80004938:	fbf7f793          	andi	a5,a5,-65
8000493c:	01079713          	slli	a4,a5,0x10
80004940:	01075713          	srli	a4,a4,0x10
80004944:	fe042783          	lw	a5,-32(s0)
80004948:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:250
        (VOID)LOS_IntRestore(uwIntSave);
8000494c:	fe442503          	lw	a0,-28(s0)
80004950:	ac8fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:251
        uwRetErr = LOS_ERRNO_MUX_TIMEOUT;
80004954:	020027b7          	lui	a5,0x2002
80004958:	d0778793          	addi	a5,a5,-761 # 2001d07 <RAM_SIZE+0x1f81d07>
8000495c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:252
        goto error_uniMuxPend;
80004960:	00c0006f          	j	8000496c <LOS_MuxPend+0x2d8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:255
    return LOS_OK;
80004964:	00000793          	li	a5,0
80004968:	0080006f          	j	80004970 <LOS_MuxPend+0x2dc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:260
error_uniMuxPend:
    return (uwRetErr);
8000496c:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:261
}
80004970:	00078513          	mv	a0,a5
80004974:	03c12083          	lw	ra,60(sp)
80004978:	03812403          	lw	s0,56(sp)
8000497c:	04010113          	addi	sp,sp,64
80004980:	00008067          	ret
80004984:	0000                	unimp
	...

80004988 <LOS_MuxPost>:
LOS_MuxPost():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:271
 Input        : uwMuxHandle ------ Mutex operation handle,
 Output       : None
 Return       : LOS_OK on success ,or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_MuxPost(UINT32 uwMuxHandle)
{
80004988:	fd010113          	addi	sp,sp,-48
8000498c:	02112623          	sw	ra,44(sp)
80004990:	02812423          	sw	s0,40(sp)
80004994:	03010413          	addi	s0,sp,48
80004998:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:273
    UINT32      uwIntSave;
    MUX_CB_S    *pstMuxPosted = GET_MUX(uwMuxHandle);
8000499c:	8001e7b7          	lui	a5,0x8001e
800049a0:	2247a683          	lw	a3,548(a5) # 8001e224 <__stack_top+0xfffdfc24>
800049a4:	fdc42703          	lw	a4,-36(s0)
800049a8:	00070793          	mv	a5,a4
800049ac:	00179793          	slli	a5,a5,0x1
800049b0:	00e787b3          	add	a5,a5,a4
800049b4:	00379793          	slli	a5,a5,0x3
800049b8:	00f687b3          	add	a5,a3,a5
800049bc:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:277
    LOS_TASK_CB *pstResumedTask;
    LOS_TASK_CB *pstRunTsk;

    uwIntSave = LOS_IntLock();
800049c0:	a38fd0ef          	jal	ra,80001bf8 <LOS_IntLock>
800049c4:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:279

    if ((uwMuxHandle >= (UINT32)LOSCFG_BASE_IPC_MUX_LIMIT) ||
800049c8:	fdc42703          	lw	a4,-36(s0)
800049cc:	00900793          	li	a5,9
800049d0:	00e7e863          	bltu	a5,a4,800049e0 <LOS_MuxPost+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:280 (discriminator 1)
        (OS_MUX_UNUSED == pstMuxPosted->ucMuxStat))
800049d4:	fec42783          	lw	a5,-20(s0)
800049d8:	0007c783          	lbu	a5,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:279 (discriminator 1)
    if ((uwMuxHandle >= (UINT32)LOSCFG_BASE_IPC_MUX_LIMIT) ||
800049dc:	00079c63          	bnez	a5,800049f4 <LOS_MuxPost+0x6c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:282
    {
        LOS_IntRestore(uwIntSave);
800049e0:	fe842503          	lw	a0,-24(s0)
800049e4:	a34fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:283
        return LOS_ERRNO_MUX_INVALID;
800049e8:	020027b7          	lui	a5,0x2002
800049ec:	d0178793          	addi	a5,a5,-767 # 2001d01 <RAM_SIZE+0x1f81d01>
800049f0:	1e80006f          	j	80004bd8 <LOS_MuxPost+0x250>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:286
    }

    if (OS_INT_ACTIVE)
800049f4:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
800049f8:	00078c63          	beqz	a5,80004a10 <LOS_MuxPost+0x88>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:288
    {
        LOS_IntRestore(uwIntSave);
800049fc:	fe842503          	lw	a0,-24(s0)
80004a00:	a18fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:289
        return LOS_ERRNO_MUX_PEND_INTERR;
80004a04:	020027b7          	lui	a5,0x2002
80004a08:	d0578793          	addi	a5,a5,-763 # 2001d05 <RAM_SIZE+0x1f81d05>
80004a0c:	1cc0006f          	j	80004bd8 <LOS_MuxPost+0x250>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:292
    }

    pstRunTsk = (LOS_TASK_CB *)g_stLosTask.pstRunTask;
80004a10:	8001e7b7          	lui	a5,0x8001e
80004a14:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80004a18:	0007a783          	lw	a5,0(a5)
80004a1c:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:293
    if (pstMuxPosted->usMuxCount == 0 || pstMuxPosted->pstOwner != pstRunTsk)
80004a20:	fec42783          	lw	a5,-20(s0)
80004a24:	0027d783          	lhu	a5,2(a5)
80004a28:	00078a63          	beqz	a5,80004a3c <LOS_MuxPost+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:293 (discriminator 1)
80004a2c:	fec42783          	lw	a5,-20(s0)
80004a30:	0107a783          	lw	a5,16(a5)
80004a34:	fe442703          	lw	a4,-28(s0)
80004a38:	00f70c63          	beq	a4,a5,80004a50 <LOS_MuxPost+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:295
    {
        LOS_IntRestore(uwIntSave);
80004a3c:	fe842503          	lw	a0,-24(s0)
80004a40:	9d8fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:296
        return LOS_ERRNO_MUX_INVALID;
80004a44:	020027b7          	lui	a5,0x2002
80004a48:	d0178793          	addi	a5,a5,-767 # 2001d01 <RAM_SIZE+0x1f81d01>
80004a4c:	18c0006f          	j	80004bd8 <LOS_MuxPost+0x250>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:299
    }

    if (--(pstMuxPosted->usMuxCount) != 0)
80004a50:	fec42783          	lw	a5,-20(s0)
80004a54:	0027d783          	lhu	a5,2(a5)
80004a58:	fff78793          	addi	a5,a5,-1
80004a5c:	01079713          	slli	a4,a5,0x10
80004a60:	01075713          	srli	a4,a4,0x10
80004a64:	fec42783          	lw	a5,-20(s0)
80004a68:	00e79123          	sh	a4,2(a5)
80004a6c:	fec42783          	lw	a5,-20(s0)
80004a70:	0027d783          	lhu	a5,2(a5)
80004a74:	00078a63          	beqz	a5,80004a88 <LOS_MuxPost+0x100>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:301
    {
        LOS_IntRestore(uwIntSave);
80004a78:	fe842503          	lw	a0,-24(s0)
80004a7c:	99cfd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:302
        return LOS_OK;
80004a80:	00000793          	li	a5,0
80004a84:	1540006f          	j	80004bd8 <LOS_MuxPost+0x250>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:305
    }

    if ((pstMuxPosted->pstOwner->usPriority) != pstMuxPosted->usPriority)
80004a88:	fec42783          	lw	a5,-20(s0)
80004a8c:	0107a783          	lw	a5,16(a5)
80004a90:	0067d703          	lhu	a4,6(a5)
80004a94:	fec42783          	lw	a5,-20(s0)
80004a98:	0147d783          	lhu	a5,20(a5)
80004a9c:	02f70063          	beq	a4,a5,80004abc <LOS_MuxPost+0x134>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:307
    {
        osTaskPriModify(pstMuxPosted->pstOwner, pstMuxPosted->usPriority);
80004aa0:	fec42783          	lw	a5,-20(s0)
80004aa4:	0107a703          	lw	a4,16(a5)
80004aa8:	fec42783          	lw	a5,-20(s0)
80004aac:	0147d783          	lhu	a5,20(a5)
80004ab0:	00078593          	mv	a1,a5
80004ab4:	00070513          	mv	a0,a4
80004ab8:	714020ef          	jal	ra,800071cc <osTaskPriModify>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:310
    }

    if (!LOS_ListEmpty(&pstMuxPosted->stMuxList))
80004abc:	fec42783          	lw	a5,-20(s0)
80004ac0:	00878793          	addi	a5,a5,8
80004ac4:	00078513          	mv	a0,a5
80004ac8:	8e9ff0ef          	jal	ra,800043b0 <LOS_ListEmpty>
80004acc:	00050793          	mv	a5,a0
80004ad0:	0e079e63          	bnez	a5,80004bcc <LOS_MuxPost+0x244>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:312
    {
        pstResumedTask = OS_TCB_FROM_PENDLIST(LOS_DL_LIST_FIRST(&(pstMuxPosted->stMuxList))); /*lint !e413*/
80004ad4:	fec42783          	lw	a5,-20(s0)
80004ad8:	00c7a783          	lw	a5,12(a5)
80004adc:	fc478793          	addi	a5,a5,-60
80004ae0:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:313
        LOS_ListDelete(LOS_DL_LIST_FIRST(&(pstMuxPosted->stMuxList)));
80004ae4:	fec42783          	lw	a5,-20(s0)
80004ae8:	00c7a783          	lw	a5,12(a5)
80004aec:	00078513          	mv	a0,a5
80004af0:	865ff0ef          	jal	ra,80004354 <LOS_ListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:315
        LOS_ASSERT_COND(pstResumedTask->usTaskStatus & OS_TASK_STATUS_PEND);
        pstResumedTask->usTaskStatus &= (~OS_TASK_STATUS_PEND);
80004af4:	fe042783          	lw	a5,-32(s0)
80004af8:	0047d783          	lhu	a5,4(a5)
80004afc:	ff77f793          	andi	a5,a5,-9
80004b00:	01079713          	slli	a4,a5,0x10
80004b04:	01075713          	srli	a4,a4,0x10
80004b08:	fe042783          	lw	a5,-32(s0)
80004b0c:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:316
        if (pstResumedTask->usTaskStatus & OS_TASK_STATUS_TIMEOUT)
80004b10:	fe042783          	lw	a5,-32(s0)
80004b14:	0047d783          	lhu	a5,4(a5)
80004b18:	0407f793          	andi	a5,a5,64
80004b1c:	02078463          	beqz	a5,80004b44 <LOS_MuxPost+0x1bc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:318
        {
            osTimerListDelete(pstResumedTask);
80004b20:	fe042503          	lw	a0,-32(s0)
80004b24:	18d020ef          	jal	ra,800074b0 <osTimerListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:319
            pstResumedTask->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
80004b28:	fe042783          	lw	a5,-32(s0)
80004b2c:	0047d783          	lhu	a5,4(a5)
80004b30:	fbf7f793          	andi	a5,a5,-65
80004b34:	01079713          	slli	a4,a5,0x10
80004b38:	01075713          	srli	a4,a4,0x10
80004b3c:	fe042783          	lw	a5,-32(s0)
80004b40:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:322
        }

        pstMuxPosted->usMuxCount    = 1;
80004b44:	fec42783          	lw	a5,-20(s0)
80004b48:	00100713          	li	a4,1
80004b4c:	00e79123          	sh	a4,2(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:323
        pstMuxPosted->pstOwner      = pstResumedTask;
80004b50:	fec42783          	lw	a5,-20(s0)
80004b54:	fe042703          	lw	a4,-32(s0)
80004b58:	00e7a823          	sw	a4,16(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:324
        pstMuxPosted->usPriority    = pstResumedTask->usPriority;
80004b5c:	fe042783          	lw	a5,-32(s0)
80004b60:	0067d703          	lhu	a4,6(a5)
80004b64:	fec42783          	lw	a5,-20(s0)
80004b68:	00e79a23          	sh	a4,20(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:325
        pstResumedTask->pTaskMux    = NULL;
80004b6c:	fe042783          	lw	a5,-32(s0)
80004b70:	0207a223          	sw	zero,36(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:326
        if (!(pstResumedTask->usTaskStatus & OS_TASK_STATUS_SUSPEND))
80004b74:	fe042783          	lw	a5,-32(s0)
80004b78:	0047d783          	lhu	a5,4(a5)
80004b7c:	0027f793          	andi	a5,a5,2
80004b80:	02079e63          	bnez	a5,80004bbc <LOS_MuxPost+0x234>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:328
        {
            pstResumedTask->usTaskStatus |= OS_TASK_STATUS_READY;
80004b84:	fe042783          	lw	a5,-32(s0)
80004b88:	0047d783          	lhu	a5,4(a5)
80004b8c:	0047e793          	ori	a5,a5,4
80004b90:	01079713          	slli	a4,a5,0x10
80004b94:	01075713          	srli	a4,a4,0x10
80004b98:	fe042783          	lw	a5,-32(s0)
80004b9c:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:329
            LOS_PriqueueEnqueue(&pstResumedTask->stPendList, pstResumedTask->usPriority);
80004ba0:	fe042783          	lw	a5,-32(s0)
80004ba4:	03c78713          	addi	a4,a5,60
80004ba8:	fe042783          	lw	a5,-32(s0)
80004bac:	0067d783          	lhu	a5,6(a5)
80004bb0:	00078593          	mv	a1,a5
80004bb4:	00070513          	mv	a0,a4
80004bb8:	7a4010ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:332
        }

        (VOID)LOS_IntRestore(uwIntSave);
80004bbc:	fe842503          	lw	a0,-24(s0)
80004bc0:	858fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:333
        LOS_Schedule();
80004bc4:	980fd0ef          	jal	ra,80001d44 <LOS_Schedule>
80004bc8:	00c0006f          	j	80004bd4 <LOS_MuxPost+0x24c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:337
    }
    else
    {
        (VOID)LOS_IntRestore(uwIntSave);
80004bcc:	fe842503          	lw	a0,-24(s0)
80004bd0:	848fd0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:340
    }

    return LOS_OK;
80004bd4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_mux.c:341
}
80004bd8:	00078513          	mv	a0,a5
80004bdc:	02c12083          	lw	ra,44(sp)
80004be0:	02812403          	lw	s0,40(sp)
80004be4:	03010113          	addi	sp,sp,48
80004be8:	00008067          	ret
80004bec:	0000                	unimp
	...

80004bf0 <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:602
    else
    {
        LOS_IntRestore(uvIntSave);
    }
    return LOS_OK;
}
80004bf0:	fe010113          	addi	sp,sp,-32
80004bf4:	00812e23          	sw	s0,28(sp)
80004bf8:	02010413          	addi	s0,sp,32
80004bfc:	fea42623          	sw	a0,-20(s0)
80004c00:	fec42783          	lw	a5,-20(s0)
80004c04:	fec42703          	lw	a4,-20(s0)
80004c08:	00e7a223          	sw	a4,4(a5)
80004c0c:	fec42783          	lw	a5,-20(s0)
80004c10:	fec42703          	lw	a4,-20(s0)
80004c14:	00e7a023          	sw	a4,0(a5)
80004c18:	00000013          	nop
80004c1c:	01c12403          	lw	s0,28(sp)
80004c20:	02010113          	addi	sp,sp,32
80004c24:	00008067          	ret
80004c28:	0000                	unimp
	...

80004c2c <LOS_ListAdd>:
LOS_ListAdd():
80004c2c:	fe010113          	addi	sp,sp,-32
80004c30:	00812e23          	sw	s0,28(sp)
80004c34:	02010413          	addi	s0,sp,32
80004c38:	fea42623          	sw	a0,-20(s0)
80004c3c:	feb42423          	sw	a1,-24(s0)
80004c40:	fec42783          	lw	a5,-20(s0)
80004c44:	0047a703          	lw	a4,4(a5)
80004c48:	fe842783          	lw	a5,-24(s0)
80004c4c:	00e7a223          	sw	a4,4(a5)
80004c50:	fe842783          	lw	a5,-24(s0)
80004c54:	fec42703          	lw	a4,-20(s0)
80004c58:	00e7a023          	sw	a4,0(a5)
80004c5c:	fec42783          	lw	a5,-20(s0)
80004c60:	0047a783          	lw	a5,4(a5)
80004c64:	fe842703          	lw	a4,-24(s0)
80004c68:	00e7a023          	sw	a4,0(a5)
80004c6c:	fec42783          	lw	a5,-20(s0)
80004c70:	fe842703          	lw	a4,-24(s0)
80004c74:	00e7a223          	sw	a4,4(a5)
80004c78:	00000013          	nop
80004c7c:	01c12403          	lw	s0,28(sp)
80004c80:	02010113          	addi	sp,sp,32
80004c84:	00008067          	ret
80004c88:	0000                	unimp
	...

80004c8c <LOS_ListTailInsert>:
LOS_ListTailInsert():
80004c8c:	fe010113          	addi	sp,sp,-32
80004c90:	00112e23          	sw	ra,28(sp)
80004c94:	00812c23          	sw	s0,24(sp)
80004c98:	02010413          	addi	s0,sp,32
80004c9c:	fea42623          	sw	a0,-20(s0)
80004ca0:	feb42423          	sw	a1,-24(s0)
80004ca4:	fec42783          	lw	a5,-20(s0)
80004ca8:	0007a783          	lw	a5,0(a5)
80004cac:	fe842583          	lw	a1,-24(s0)
80004cb0:	00078513          	mv	a0,a5
80004cb4:	f79ff0ef          	jal	ra,80004c2c <LOS_ListAdd>
80004cb8:	00000013          	nop
80004cbc:	01c12083          	lw	ra,28(sp)
80004cc0:	01812403          	lw	s0,24(sp)
80004cc4:	02010113          	addi	sp,sp,32
80004cc8:	00008067          	ret
80004ccc:	0000                	unimp
	...

80004cd0 <LOS_ListDelete>:
LOS_ListDelete():
80004cd0:	fe010113          	addi	sp,sp,-32
80004cd4:	00812e23          	sw	s0,28(sp)
80004cd8:	02010413          	addi	s0,sp,32
80004cdc:	fea42623          	sw	a0,-20(s0)
80004ce0:	fec42783          	lw	a5,-20(s0)
80004ce4:	0047a783          	lw	a5,4(a5)
80004ce8:	fec42703          	lw	a4,-20(s0)
80004cec:	00072703          	lw	a4,0(a4)
80004cf0:	00e7a023          	sw	a4,0(a5)
80004cf4:	fec42783          	lw	a5,-20(s0)
80004cf8:	0007a783          	lw	a5,0(a5)
80004cfc:	fec42703          	lw	a4,-20(s0)
80004d00:	00472703          	lw	a4,4(a4)
80004d04:	00e7a223          	sw	a4,4(a5)
80004d08:	fec42783          	lw	a5,-20(s0)
80004d0c:	0007a223          	sw	zero,4(a5)
80004d10:	fec42783          	lw	a5,-20(s0)
80004d14:	0007a023          	sw	zero,0(a5)
80004d18:	00000013          	nop
80004d1c:	01c12403          	lw	s0,28(sp)
80004d20:	02010113          	addi	sp,sp,32
80004d24:	00008067          	ret
80004d28:	0000                	unimp
	...

80004d2c <LOS_ListEmpty>:
LOS_ListEmpty():
80004d2c:	fe010113          	addi	sp,sp,-32
80004d30:	00812e23          	sw	s0,28(sp)
80004d34:	02010413          	addi	s0,sp,32
80004d38:	fea42623          	sw	a0,-20(s0)
80004d3c:	fec42783          	lw	a5,-20(s0)
80004d40:	0047a783          	lw	a5,4(a5)
80004d44:	fec42703          	lw	a4,-20(s0)
80004d48:	40f707b3          	sub	a5,a4,a5
80004d4c:	0017b793          	seqz	a5,a5
80004d50:	0ff7f793          	andi	a5,a5,255
80004d54:	00078513          	mv	a0,a5
80004d58:	01c12403          	lw	s0,28(sp)
80004d5c:	02010113          	addi	sp,sp,32
80004d60:	00008067          	ret
80004d64:	0000                	unimp
	...

80004d68 <osQueueInit>:
osQueueInit():
80004d68:	ff010113          	addi	sp,sp,-16
80004d6c:	00112623          	sw	ra,12(sp)
80004d70:	00812423          	sw	s0,8(sp)
80004d74:	01010413          	addi	s0,sp,16
80004d78:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80004d7c:	1b800593          	li	a1,440
80004d80:	00078513          	mv	a0,a5
80004d84:	d38fe0ef          	jal	ra,800032bc <LOS_MemAlloc>
80004d88:	00050713          	mv	a4,a0
80004d8c:	8001e7b7          	lui	a5,0x8001e
80004d90:	22e7a823          	sw	a4,560(a5) # 8001e230 <__stack_top+0xfffdfc30>
80004d94:	8001e7b7          	lui	a5,0x8001e
80004d98:	2307a783          	lw	a5,560(a5) # 8001e230 <__stack_top+0xfffdfc30>
80004d9c:	00079863          	bnez	a5,80004dac <osQueueInit+0x44>
80004da0:	020007b7          	lui	a5,0x2000
80004da4:	60178793          	addi	a5,a5,1537 # 2000601 <RAM_SIZE+0x1f80601>
80004da8:	0200006f          	j	80004dc8 <osQueueInit+0x60>
80004dac:	8001e7b7          	lui	a5,0x8001e
80004db0:	2307a783          	lw	a5,560(a5) # 8001e230 <__stack_top+0xfffdfc30>
80004db4:	1b800613          	li	a2,440
80004db8:	00000593          	li	a1,0
80004dbc:	00078513          	mv	a0,a5
80004dc0:	60d050ef          	jal	ra,8000abcc <memset>
80004dc4:	00000793          	li	a5,0
80004dc8:	00078513          	mv	a0,a5
80004dcc:	00c12083          	lw	ra,12(sp)
80004dd0:	00812403          	lw	s0,8(sp)
80004dd4:	01010113          	addi	sp,sp,16
80004dd8:	00008067          	ret
80004ddc:	0000                	unimp
	...

80004de0 <osQueueCreate>:
osQueueCreate():
80004de0:	fd010113          	addi	sp,sp,-48
80004de4:	02112623          	sw	ra,44(sp)
80004de8:	02812423          	sw	s0,40(sp)
80004dec:	03010413          	addi	s0,sp,48
80004df0:	00050793          	mv	a5,a0
80004df4:	fcb42c23          	sw	a1,-40(s0)
80004df8:	00060713          	mv	a4,a2
80004dfc:	fcd42a23          	sw	a3,-44(s0)
80004e00:	fcf41f23          	sh	a5,-34(s0)
80004e04:	00070793          	mv	a5,a4
80004e08:	fcf41e23          	sh	a5,-36(s0)
80004e0c:	8001e7b7          	lui	a5,0x8001e
80004e10:	2307a783          	lw	a5,560(a5) # 8001e230 <__stack_top+0xfffdfc30>
80004e14:	fef42423          	sw	a5,-24(s0)
80004e18:	fe042623          	sw	zero,-20(s0)
80004e1c:	03c0006f          	j	80004e58 <osQueueCreate+0x78>
80004e20:	fe842783          	lw	a5,-24(s0)
80004e24:	0047d783          	lhu	a5,4(a5)
80004e28:	00079c63          	bnez	a5,80004e40 <osQueueCreate+0x60>
80004e2c:	fec42783          	lw	a5,-20(s0)
80004e30:	00178713          	addi	a4,a5,1
80004e34:	fd842783          	lw	a5,-40(s0)
80004e38:	00e7a023          	sw	a4,0(a5)
80004e3c:	0280006f          	j	80004e64 <osQueueCreate+0x84>
80004e40:	fec42783          	lw	a5,-20(s0)
80004e44:	00178793          	addi	a5,a5,1
80004e48:	fef42623          	sw	a5,-20(s0)
80004e4c:	fe842783          	lw	a5,-24(s0)
80004e50:	02c78793          	addi	a5,a5,44
80004e54:	fef42423          	sw	a5,-24(s0)
80004e58:	fec42703          	lw	a4,-20(s0)
80004e5c:	00900793          	li	a5,9
80004e60:	fce7f0e3          	bleu	a4,a5,80004e20 <osQueueCreate+0x40>
80004e64:	fec42703          	lw	a4,-20(s0)
80004e68:	00a00793          	li	a5,10
80004e6c:	00f71863          	bne	a4,a5,80004e7c <osQueueCreate+0x9c>
80004e70:	020007b7          	lui	a5,0x2000
80004e74:	60478793          	addi	a5,a5,1540 # 2000604 <RAM_SIZE+0x1f80604>
80004e78:	0880006f          	j	80004f00 <osQueueCreate+0x120>
80004e7c:	02c00613          	li	a2,44
80004e80:	00000593          	li	a1,0
80004e84:	fe842503          	lw	a0,-24(s0)
80004e88:	545050ef          	jal	ra,8000abcc <memset>
80004e8c:	eb01a683          	lw	a3,-336(gp) # 8000e1e0 <m_aucSysMem0>
80004e90:	fde45703          	lhu	a4,-34(s0)
80004e94:	fdc45783          	lhu	a5,-36(s0)
80004e98:	02f707b3          	mul	a5,a4,a5
80004e9c:	00078593          	mv	a1,a5
80004ea0:	00068513          	mv	a0,a3
80004ea4:	c18fe0ef          	jal	ra,800032bc <LOS_MemAlloc>
80004ea8:	00050713          	mv	a4,a0
80004eac:	fe842783          	lw	a5,-24(s0)
80004eb0:	00e7a023          	sw	a4,0(a5)
80004eb4:	fe842783          	lw	a5,-24(s0)
80004eb8:	0007a783          	lw	a5,0(a5)
80004ebc:	00079863          	bnez	a5,80004ecc <osQueueCreate+0xec>
80004ec0:	020007b7          	lui	a5,0x2000
80004ec4:	60278793          	addi	a5,a5,1538 # 2000602 <RAM_SIZE+0x1f80602>
80004ec8:	0380006f          	j	80004f00 <osQueueCreate+0x120>
80004ecc:	fe842783          	lw	a5,-24(s0)
80004ed0:	fde45703          	lhu	a4,-34(s0)
80004ed4:	00e79323          	sh	a4,6(a5)
80004ed8:	fe842783          	lw	a5,-24(s0)
80004edc:	fdc45703          	lhu	a4,-36(s0)
80004ee0:	00e79423          	sh	a4,8(a5)
80004ee4:	fe842783          	lw	a5,-24(s0)
80004ee8:	00100713          	li	a4,1
80004eec:	00e79223          	sh	a4,4(a5)
80004ef0:	fd442783          	lw	a5,-44(s0)
80004ef4:	fe842703          	lw	a4,-24(s0)
80004ef8:	00e7a023          	sw	a4,0(a5)
80004efc:	00000793          	li	a5,0
80004f00:	00078513          	mv	a0,a5
80004f04:	02c12083          	lw	ra,44(sp)
80004f08:	02812403          	lw	s0,40(sp)
80004f0c:	03010113          	addi	sp,sp,48
80004f10:	00008067          	ret
80004f14:	0000                	unimp
	...

80004f18 <osQueuePend>:
osQueuePend():
80004f18:	fd010113          	addi	sp,sp,-48
80004f1c:	02112623          	sw	ra,44(sp)
80004f20:	02812423          	sw	s0,40(sp)
80004f24:	03010413          	addi	s0,sp,48
80004f28:	fca42e23          	sw	a0,-36(s0)
80004f2c:	fcb42c23          	sw	a1,-40(s0)
80004f30:	fcc42a23          	sw	a2,-44(s0)
80004f34:	fe042423          	sw	zero,-24(s0)
80004f38:	fe042623          	sw	zero,-20(s0)
80004f3c:	fdc42783          	lw	a5,-36(s0)
80004f40:	03c78793          	addi	a5,a5,60
80004f44:	00078513          	mv	a0,a5
80004f48:	464010ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80004f4c:	fdc42783          	lw	a5,-36(s0)
80004f50:	0047d783          	lhu	a5,4(a5)
80004f54:	ffb7f793          	andi	a5,a5,-5
80004f58:	01079713          	slli	a4,a5,0x10
80004f5c:	01075713          	srli	a4,a4,0x10
80004f60:	fdc42783          	lw	a5,-36(s0)
80004f64:	00e79223          	sh	a4,4(a5)
80004f68:	fdc42783          	lw	a5,-36(s0)
80004f6c:	03c78793          	addi	a5,a5,60
80004f70:	fef42423          	sw	a5,-24(s0)
80004f74:	fdc42783          	lw	a5,-36(s0)
80004f78:	0047d703          	lhu	a4,4(a5)
80004f7c:	000027b7          	lui	a5,0x2
80004f80:	00f767b3          	or	a5,a4,a5
80004f84:	01079713          	slli	a4,a5,0x10
80004f88:	01075713          	srli	a4,a4,0x10
80004f8c:	fdc42783          	lw	a5,-36(s0)
80004f90:	00e79223          	sh	a4,4(a5) # 2004 <OS_TASK_STATUS_NOT_RUNNING+0x1f15>
80004f94:	fd842503          	lw	a0,-40(s0)
80004f98:	d95ff0ef          	jal	ra,80004d2c <LOS_ListEmpty>
80004f9c:	00050793          	mv	a5,a0
80004fa0:	00078a63          	beqz	a5,80004fb4 <osQueuePend+0x9c>
80004fa4:	fe842583          	lw	a1,-24(s0)
80004fa8:	fd842503          	lw	a0,-40(s0)
80004fac:	ce1ff0ef          	jal	ra,80004c8c <LOS_ListTailInsert>
80004fb0:	0680006f          	j	80005018 <osQueuePend+0x100>
80004fb4:	fd842783          	lw	a5,-40(s0)
80004fb8:	0047a783          	lw	a5,4(a5)
80004fbc:	fc478793          	addi	a5,a5,-60
80004fc0:	fef42623          	sw	a5,-20(s0)
80004fc4:	0280006f          	j	80004fec <osQueuePend+0xd4>
80004fc8:	fdc42783          	lw	a5,-36(s0)
80004fcc:	0067d703          	lhu	a4,6(a5)
80004fd0:	fec42783          	lw	a5,-20(s0)
80004fd4:	0067d783          	lhu	a5,6(a5)
80004fd8:	02f76463          	bltu	a4,a5,80005000 <osQueuePend+0xe8>
80004fdc:	fec42783          	lw	a5,-20(s0)
80004fe0:	0407a783          	lw	a5,64(a5)
80004fe4:	fc478793          	addi	a5,a5,-60
80004fe8:	fef42623          	sw	a5,-20(s0)
80004fec:	fec42783          	lw	a5,-20(s0)
80004ff0:	03c78793          	addi	a5,a5,60
80004ff4:	fd842703          	lw	a4,-40(s0)
80004ff8:	fcf718e3          	bne	a4,a5,80004fc8 <osQueuePend+0xb0>
80004ffc:	0080006f          	j	80005004 <osQueuePend+0xec>
80005000:	00000013          	nop
80005004:	fec42783          	lw	a5,-20(s0)
80005008:	03c7a783          	lw	a5,60(a5)
8000500c:	fe842583          	lw	a1,-24(s0)
80005010:	00078513          	mv	a0,a5
80005014:	c19ff0ef          	jal	ra,80004c2c <LOS_ListAdd>
80005018:	fd442703          	lw	a4,-44(s0)
8000501c:	fff00793          	li	a5,-1
80005020:	02f70863          	beq	a4,a5,80005050 <osQueuePend+0x138>
80005024:	fdc42783          	lw	a5,-36(s0)
80005028:	0047d783          	lhu	a5,4(a5)
8000502c:	0407e793          	ori	a5,a5,64
80005030:	01079713          	slli	a4,a5,0x10
80005034:	01075713          	srli	a4,a4,0x10
80005038:	fdc42783          	lw	a5,-36(s0)
8000503c:	00e79223          	sh	a4,4(a5)
80005040:	fd442583          	lw	a1,-44(s0)
80005044:	fdc42503          	lw	a0,-36(s0)
80005048:	248020ef          	jal	ra,80007290 <osTaskAdd2TimerList>
8000504c:	00000013          	nop
80005050:	00000013          	nop
80005054:	02c12083          	lw	ra,44(sp)
80005058:	02812403          	lw	s0,40(sp)
8000505c:	03010113          	addi	sp,sp,48
80005060:	00008067          	ret
80005064:	0000                	unimp
	...

80005068 <osQueueWakeUp>:
osQueueWakeUp():
80005068:	fd010113          	addi	sp,sp,-48
8000506c:	02112623          	sw	ra,44(sp)
80005070:	02812423          	sw	s0,40(sp)
80005074:	03010413          	addi	s0,sp,48
80005078:	fca42e23          	sw	a0,-36(s0)
8000507c:	fdc42783          	lw	a5,-36(s0)
80005080:	0047a783          	lw	a5,4(a5)
80005084:	fc478793          	addi	a5,a5,-60
80005088:	fef42623          	sw	a5,-20(s0)
8000508c:	fdc42783          	lw	a5,-36(s0)
80005090:	0047a783          	lw	a5,4(a5)
80005094:	00078513          	mv	a0,a5
80005098:	c39ff0ef          	jal	ra,80004cd0 <LOS_ListDelete>
8000509c:	fec42783          	lw	a5,-20(s0)
800050a0:	0047d703          	lhu	a4,4(a5)
800050a4:	ffffe7b7          	lui	a5,0xffffe
800050a8:	fff78793          	addi	a5,a5,-1 # ffffdfff <__stack_top+0x7ffbf9ff>
800050ac:	00f777b3          	and	a5,a4,a5
800050b0:	01079713          	slli	a4,a5,0x10
800050b4:	01075713          	srli	a4,a4,0x10
800050b8:	fec42783          	lw	a5,-20(s0)
800050bc:	00e79223          	sh	a4,4(a5)
800050c0:	fec42783          	lw	a5,-20(s0)
800050c4:	0047d783          	lhu	a5,4(a5)
800050c8:	0407f793          	andi	a5,a5,64
800050cc:	02078463          	beqz	a5,800050f4 <osQueueWakeUp+0x8c>
800050d0:	fec42503          	lw	a0,-20(s0)
800050d4:	3dc020ef          	jal	ra,800074b0 <osTimerListDelete>
800050d8:	fec42783          	lw	a5,-20(s0)
800050dc:	0047d783          	lhu	a5,4(a5)
800050e0:	fbf7f793          	andi	a5,a5,-65
800050e4:	01079713          	slli	a4,a5,0x10
800050e8:	01075713          	srli	a4,a4,0x10
800050ec:	fec42783          	lw	a5,-20(s0)
800050f0:	00e79223          	sh	a4,4(a5)
800050f4:	fec42783          	lw	a5,-20(s0)
800050f8:	0047d783          	lhu	a5,4(a5)
800050fc:	0027f793          	andi	a5,a5,2
80005100:	04079063          	bnez	a5,80005140 <osQueueWakeUp+0xd8>
80005104:	fec42783          	lw	a5,-20(s0)
80005108:	0047d783          	lhu	a5,4(a5)
8000510c:	0047e793          	ori	a5,a5,4
80005110:	01079713          	slli	a4,a5,0x10
80005114:	01075713          	srli	a4,a4,0x10
80005118:	fec42783          	lw	a5,-20(s0)
8000511c:	00e79223          	sh	a4,4(a5)
80005120:	fec42783          	lw	a5,-20(s0)
80005124:	03c78713          	addi	a4,a5,60
80005128:	fec42783          	lw	a5,-20(s0)
8000512c:	0067d783          	lhu	a5,6(a5)
80005130:	00078593          	mv	a1,a5
80005134:	00070513          	mv	a0,a4
80005138:	224010ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
8000513c:	00000013          	nop
80005140:	00000013          	nop
80005144:	02c12083          	lw	ra,44(sp)
80005148:	02812403          	lw	s0,40(sp)
8000514c:	03010113          	addi	sp,sp,48
80005150:	00008067          	ret
80005154:	0000                	unimp
	...

80005158 <LOS_QueueCreate>:
LOS_QueueCreate():
80005158:	fd010113          	addi	sp,sp,-48
8000515c:	02112623          	sw	ra,44(sp)
80005160:	02812423          	sw	s0,40(sp)
80005164:	03010413          	addi	s0,sp,48
80005168:	fca42e23          	sw	a0,-36(s0)
8000516c:	00058793          	mv	a5,a1
80005170:	fcc42a23          	sw	a2,-44(s0)
80005174:	fcd42823          	sw	a3,-48(s0)
80005178:	fcf41d23          	sh	a5,-38(s0)
8000517c:	00070793          	mv	a5,a4
80005180:	fcf41c23          	sh	a5,-40(s0)
80005184:	fd442783          	lw	a5,-44(s0)
80005188:	00079863          	bnez	a5,80005198 <LOS_QueueCreate+0x40>
8000518c:	020007b7          	lui	a5,0x2000
80005190:	60c78793          	addi	a5,a5,1548 # 200060c <RAM_SIZE+0x1f8060c>
80005194:	0d00006f          	j	80005264 <LOS_QueueCreate+0x10c>
80005198:	fd845703          	lhu	a4,-40(s0)
8000519c:	000107b7          	lui	a5,0x10
800051a0:	ffb78793          	addi	a5,a5,-5 # fffb <OS_TASK_STATUS_NOT_RUNNING+0xff0c>
800051a4:	00e7f863          	bleu	a4,a5,800051b4 <LOS_QueueCreate+0x5c>
800051a8:	020007b7          	lui	a5,0x2000
800051ac:	60378793          	addi	a5,a5,1539 # 2000603 <RAM_SIZE+0x1f80603>
800051b0:	0b40006f          	j	80005264 <LOS_QueueCreate+0x10c>
800051b4:	fda45783          	lhu	a5,-38(s0)
800051b8:	00078663          	beqz	a5,800051c4 <LOS_QueueCreate+0x6c>
800051bc:	fd845783          	lhu	a5,-40(s0)
800051c0:	00079863          	bnez	a5,800051d0 <LOS_QueueCreate+0x78>
800051c4:	020007b7          	lui	a5,0x2000
800051c8:	60d78793          	addi	a5,a5,1549 # 200060d <RAM_SIZE+0x1f8060d>
800051cc:	0980006f          	j	80005264 <LOS_QueueCreate+0x10c>
800051d0:	a29fc0ef          	jal	ra,80001bf8 <LOS_IntLock>
800051d4:	fea42623          	sw	a0,-20(s0)
800051d8:	fd845783          	lhu	a5,-40(s0)
800051dc:	00478793          	addi	a5,a5,4
800051e0:	01079713          	slli	a4,a5,0x10
800051e4:	01075713          	srli	a4,a4,0x10
800051e8:	fe440693          	addi	a3,s0,-28
800051ec:	fda45783          	lhu	a5,-38(s0)
800051f0:	00070613          	mv	a2,a4
800051f4:	fd442583          	lw	a1,-44(s0)
800051f8:	00078513          	mv	a0,a5
800051fc:	be5ff0ef          	jal	ra,80004de0 <osQueueCreate>
80005200:	fea42423          	sw	a0,-24(s0)
80005204:	fe842783          	lw	a5,-24(s0)
80005208:	00078a63          	beqz	a5,8000521c <LOS_QueueCreate+0xc4>
8000520c:	fec42503          	lw	a0,-20(s0)
80005210:	a09fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
80005214:	fe842783          	lw	a5,-24(s0)
80005218:	04c0006f          	j	80005264 <LOS_QueueCreate+0x10c>
8000521c:	fe442783          	lw	a5,-28(s0)
80005220:	01478793          	addi	a5,a5,20
80005224:	00078513          	mv	a0,a5
80005228:	9c9ff0ef          	jal	ra,80004bf0 <LOS_ListInit>
8000522c:	fe442783          	lw	a5,-28(s0)
80005230:	01c78793          	addi	a5,a5,28
80005234:	00078513          	mv	a0,a5
80005238:	9b9ff0ef          	jal	ra,80004bf0 <LOS_ListInit>
8000523c:	fe442783          	lw	a5,-28(s0)
80005240:	02478793          	addi	a5,a5,36
80005244:	00078513          	mv	a0,a5
80005248:	9a9ff0ef          	jal	ra,80004bf0 <LOS_ListInit>
8000524c:	fe442783          	lw	a5,-28(s0)
80005250:	fda45703          	lhu	a4,-38(s0)
80005254:	00e79723          	sh	a4,14(a5)
80005258:	fec42503          	lw	a0,-20(s0)
8000525c:	9bdfc0ef          	jal	ra,80001c18 <LOS_IntRestore>
80005260:	00000793          	li	a5,0
80005264:	00078513          	mv	a0,a5
80005268:	02c12083          	lw	ra,44(sp)
8000526c:	02812403          	lw	s0,40(sp)
80005270:	03010113          	addi	sp,sp,48
80005274:	00008067          	ret
80005278:	0000                	unimp
	...

8000527c <LOS_QueueRead>:
LOS_QueueRead():
8000527c:	fc010113          	addi	sp,sp,-64
80005280:	02112e23          	sw	ra,60(sp)
80005284:	02812c23          	sw	s0,56(sp)
80005288:	04010413          	addi	s0,sp,64
8000528c:	fca42623          	sw	a0,-52(s0)
80005290:	fcb42423          	sw	a1,-56(s0)
80005294:	fcc42223          	sw	a2,-60(s0)
80005298:	fcd42023          	sw	a3,-64(s0)
8000529c:	fe042423          	sw	zero,-24(s0)
800052a0:	fcc42783          	lw	a5,-52(s0)
800052a4:	fff78793          	addi	a5,a5,-1
800052a8:	fef42223          	sw	a5,-28(s0)
800052ac:	fe442703          	lw	a4,-28(s0)
800052b0:	00900793          	li	a5,9
800052b4:	00e7f863          	bleu	a4,a5,800052c4 <LOS_QueueRead+0x48>
800052b8:	020007b7          	lui	a5,0x2000
800052bc:	60e78793          	addi	a5,a5,1550 # 200060e <RAM_SIZE+0x1f8060e>
800052c0:	2300006f          	j	800054f0 <LOS_QueueRead+0x274>
800052c4:	fc842783          	lw	a5,-56(s0)
800052c8:	00079863          	bnez	a5,800052d8 <LOS_QueueRead+0x5c>
800052cc:	020007b7          	lui	a5,0x2000
800052d0:	60f78793          	addi	a5,a5,1551 # 200060f <RAM_SIZE+0x1f8060f>
800052d4:	21c0006f          	j	800054f0 <LOS_QueueRead+0x274>
800052d8:	fc442783          	lw	a5,-60(s0)
800052dc:	00079863          	bnez	a5,800052ec <LOS_QueueRead+0x70>
800052e0:	020007b7          	lui	a5,0x2000
800052e4:	61078793          	addi	a5,a5,1552 # 2000610 <RAM_SIZE+0x1f80610>
800052e8:	2080006f          	j	800054f0 <LOS_QueueRead+0x274>
800052ec:	fc042783          	lw	a5,-64(s0)
800052f0:	00078c63          	beqz	a5,80005308 <LOS_QueueRead+0x8c>
800052f4:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
800052f8:	00078863          	beqz	a5,80005308 <LOS_QueueRead+0x8c>
800052fc:	020007b7          	lui	a5,0x2000
80005300:	61878793          	addi	a5,a5,1560 # 2000618 <RAM_SIZE+0x1f80618>
80005304:	1ec0006f          	j	800054f0 <LOS_QueueRead+0x274>
80005308:	8f1fc0ef          	jal	ra,80001bf8 <LOS_IntLock>
8000530c:	fea42623          	sw	a0,-20(s0)
80005310:	8001e7b7          	lui	a5,0x8001e
80005314:	2307a703          	lw	a4,560(a5) # 8001e230 <__stack_top+0xfffdfc30>
80005318:	fe442683          	lw	a3,-28(s0)
8000531c:	02c00793          	li	a5,44
80005320:	02f687b3          	mul	a5,a3,a5
80005324:	00f707b3          	add	a5,a4,a5
80005328:	fef42023          	sw	a5,-32(s0)
8000532c:	fe042783          	lw	a5,-32(s0)
80005330:	0047d783          	lhu	a5,4(a5)
80005334:	00079a63          	bnez	a5,80005348 <LOS_QueueRead+0xcc>
80005338:	020007b7          	lui	a5,0x2000
8000533c:	61c78793          	addi	a5,a5,1564 # 200061c <RAM_SIZE+0x1f8061c>
80005340:	fef42423          	sw	a5,-24(s0)
80005344:	1a00006f          	j	800054e4 <LOS_QueueRead+0x268>
80005348:	fe042783          	lw	a5,-32(s0)
8000534c:	0107d783          	lhu	a5,16(a5)
80005350:	0a079863          	bnez	a5,80005400 <LOS_QueueRead+0x184>
80005354:	fc042783          	lw	a5,-64(s0)
80005358:	00079a63          	bnez	a5,8000536c <LOS_QueueRead+0xf0>
8000535c:	020007b7          	lui	a5,0x2000
80005360:	61d78793          	addi	a5,a5,1565 # 200061d <RAM_SIZE+0x1f8061d>
80005364:	fef42423          	sw	a5,-24(s0)
80005368:	17c0006f          	j	800054e4 <LOS_QueueRead+0x268>
8000536c:	8001e7b7          	lui	a5,0x8001e
80005370:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80005374:	00078a63          	beqz	a5,80005388 <LOS_QueueRead+0x10c>
80005378:	020007b7          	lui	a5,0x2000
8000537c:	60678793          	addi	a5,a5,1542 # 2000606 <RAM_SIZE+0x1f80606>
80005380:	fef42423          	sw	a5,-24(s0)
80005384:	1600006f          	j	800054e4 <LOS_QueueRead+0x268>
80005388:	8001e7b7          	lui	a5,0x8001e
8000538c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80005390:	0007a783          	lw	a5,0(a5)
80005394:	fcf42e23          	sw	a5,-36(s0)
80005398:	fe042783          	lw	a5,-32(s0)
8000539c:	01c78793          	addi	a5,a5,28
800053a0:	fc042603          	lw	a2,-64(s0)
800053a4:	00078593          	mv	a1,a5
800053a8:	fdc42503          	lw	a0,-36(s0)
800053ac:	b6dff0ef          	jal	ra,80004f18 <osQueuePend>
800053b0:	fec42503          	lw	a0,-20(s0)
800053b4:	865fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
800053b8:	98dfc0ef          	jal	ra,80001d44 <LOS_Schedule>
800053bc:	83dfc0ef          	jal	ra,80001bf8 <LOS_IntLock>
800053c0:	fea42623          	sw	a0,-20(s0)
800053c4:	fdc42783          	lw	a5,-36(s0)
800053c8:	0047d783          	lhu	a5,4(a5)
800053cc:	0407f793          	andi	a5,a5,64
800053d0:	04078663          	beqz	a5,8000541c <LOS_QueueRead+0x1a0>
800053d4:	fdc42783          	lw	a5,-36(s0)
800053d8:	0047d783          	lhu	a5,4(a5)
800053dc:	fbf7f793          	andi	a5,a5,-65
800053e0:	01079713          	slli	a4,a5,0x10
800053e4:	01075713          	srli	a4,a4,0x10
800053e8:	fdc42783          	lw	a5,-36(s0)
800053ec:	00e79223          	sh	a4,4(a5)
800053f0:	020007b7          	lui	a5,0x2000
800053f4:	60778793          	addi	a5,a5,1543 # 2000607 <RAM_SIZE+0x1f80607>
800053f8:	fef42423          	sw	a5,-24(s0)
800053fc:	0e80006f          	j	800054e4 <LOS_QueueRead+0x268>
80005400:	fe042783          	lw	a5,-32(s0)
80005404:	0107d783          	lhu	a5,16(a5)
80005408:	fff78793          	addi	a5,a5,-1
8000540c:	01079713          	slli	a4,a5,0x10
80005410:	01075713          	srli	a4,a4,0x10
80005414:	fe042783          	lw	a5,-32(s0)
80005418:	00e79823          	sh	a4,16(a5)
8000541c:	fe042783          	lw	a5,-32(s0)
80005420:	0007a783          	lw	a5,0(a5)
80005424:	fe042703          	lw	a4,-32(s0)
80005428:	00a75703          	lhu	a4,10(a4)
8000542c:	00070693          	mv	a3,a4
80005430:	fe042703          	lw	a4,-32(s0)
80005434:	00875703          	lhu	a4,8(a4)
80005438:	02e68733          	mul	a4,a3,a4
8000543c:	00e787b3          	add	a5,a5,a4
80005440:	fcf42c23          	sw	a5,-40(s0)
80005444:	fd842783          	lw	a5,-40(s0)
80005448:	0007a703          	lw	a4,0(a5)
8000544c:	fc842783          	lw	a5,-56(s0)
80005450:	00e7a023          	sw	a4,0(a5)
80005454:	fe042783          	lw	a5,-32(s0)
80005458:	00a7d783          	lhu	a5,10(a5)
8000545c:	00178793          	addi	a5,a5,1
80005460:	01079713          	slli	a4,a5,0x10
80005464:	01075713          	srli	a4,a4,0x10
80005468:	fe042783          	lw	a5,-32(s0)
8000546c:	00e79523          	sh	a4,10(a5)
80005470:	fe042783          	lw	a5,-32(s0)
80005474:	00a7d703          	lhu	a4,10(a5)
80005478:	fe042783          	lw	a5,-32(s0)
8000547c:	0067d783          	lhu	a5,6(a5)
80005480:	00f71663          	bne	a4,a5,8000548c <LOS_QueueRead+0x210>
80005484:	fe042783          	lw	a5,-32(s0)
80005488:	00079523          	sh	zero,10(a5)
8000548c:	fe042783          	lw	a5,-32(s0)
80005490:	01478793          	addi	a5,a5,20
80005494:	00078513          	mv	a0,a5
80005498:	895ff0ef          	jal	ra,80004d2c <LOS_ListEmpty>
8000549c:	00050793          	mv	a5,a0
800054a0:	02079463          	bnez	a5,800054c8 <LOS_QueueRead+0x24c>
800054a4:	fe042783          	lw	a5,-32(s0)
800054a8:	01478793          	addi	a5,a5,20
800054ac:	00078513          	mv	a0,a5
800054b0:	bb9ff0ef          	jal	ra,80005068 <osQueueWakeUp>
800054b4:	fec42503          	lw	a0,-20(s0)
800054b8:	f60fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
800054bc:	889fc0ef          	jal	ra,80001d44 <LOS_Schedule>
800054c0:	00000793          	li	a5,0
800054c4:	02c0006f          	j	800054f0 <LOS_QueueRead+0x274>
800054c8:	fe042783          	lw	a5,-32(s0)
800054cc:	00e7d783          	lhu	a5,14(a5)
800054d0:	00178793          	addi	a5,a5,1
800054d4:	01079713          	slli	a4,a5,0x10
800054d8:	01075713          	srli	a4,a4,0x10
800054dc:	fe042783          	lw	a5,-32(s0)
800054e0:	00e79723          	sh	a4,14(a5)
800054e4:	fec42503          	lw	a0,-20(s0)
800054e8:	f30fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
800054ec:	fe842783          	lw	a5,-24(s0)
800054f0:	00078513          	mv	a0,a5
800054f4:	03c12083          	lw	ra,60(sp)
800054f8:	03812403          	lw	s0,56(sp)
800054fc:	04010113          	addi	sp,sp,64
80005500:	00008067          	ret
80005504:	0000                	unimp
	...

80005508 <LOS_QueueWrite>:
LOS_QueueWrite():
80005508:	fc010113          	addi	sp,sp,-64
8000550c:	02112e23          	sw	ra,60(sp)
80005510:	02812c23          	sw	s0,56(sp)
80005514:	04010413          	addi	s0,sp,64
80005518:	fca42623          	sw	a0,-52(s0)
8000551c:	fcb42423          	sw	a1,-56(s0)
80005520:	fcc42223          	sw	a2,-60(s0)
80005524:	fcd42023          	sw	a3,-64(s0)
80005528:	fe042423          	sw	zero,-24(s0)
8000552c:	fcc42783          	lw	a5,-52(s0)
80005530:	fff78793          	addi	a5,a5,-1
80005534:	fef42223          	sw	a5,-28(s0)
80005538:	fe442703          	lw	a4,-28(s0)
8000553c:	00900793          	li	a5,9
80005540:	00e7f863          	bleu	a4,a5,80005550 <LOS_QueueWrite+0x48>
80005544:	020007b7          	lui	a5,0x2000
80005548:	61178793          	addi	a5,a5,1553 # 2000611 <RAM_SIZE+0x1f80611>
8000554c:	2500006f          	j	8000579c <LOS_QueueWrite+0x294>
80005550:	fc842783          	lw	a5,-56(s0)
80005554:	00079863          	bnez	a5,80005564 <LOS_QueueWrite+0x5c>
80005558:	020007b7          	lui	a5,0x2000
8000555c:	61278793          	addi	a5,a5,1554 # 2000612 <RAM_SIZE+0x1f80612>
80005560:	23c0006f          	j	8000579c <LOS_QueueWrite+0x294>
80005564:	fc442783          	lw	a5,-60(s0)
80005568:	00079863          	bnez	a5,80005578 <LOS_QueueWrite+0x70>
8000556c:	020007b7          	lui	a5,0x2000
80005570:	61378793          	addi	a5,a5,1555 # 2000613 <RAM_SIZE+0x1f80613>
80005574:	2280006f          	j	8000579c <LOS_QueueWrite+0x294>
80005578:	fc042783          	lw	a5,-64(s0)
8000557c:	00078c63          	beqz	a5,80005594 <LOS_QueueWrite+0x8c>
80005580:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
80005584:	00078863          	beqz	a5,80005594 <LOS_QueueWrite+0x8c>
80005588:	020007b7          	lui	a5,0x2000
8000558c:	60978793          	addi	a5,a5,1545 # 2000609 <RAM_SIZE+0x1f80609>
80005590:	20c0006f          	j	8000579c <LOS_QueueWrite+0x294>
80005594:	e64fc0ef          	jal	ra,80001bf8 <LOS_IntLock>
80005598:	fea42623          	sw	a0,-20(s0)
8000559c:	8001e7b7          	lui	a5,0x8001e
800055a0:	2307a703          	lw	a4,560(a5) # 8001e230 <__stack_top+0xfffdfc30>
800055a4:	fe442683          	lw	a3,-28(s0)
800055a8:	02c00793          	li	a5,44
800055ac:	02f687b3          	mul	a5,a3,a5
800055b0:	00f707b3          	add	a5,a4,a5
800055b4:	fef42023          	sw	a5,-32(s0)
800055b8:	fe042783          	lw	a5,-32(s0)
800055bc:	0047d783          	lhu	a5,4(a5)
800055c0:	00079a63          	bnez	a5,800055d4 <LOS_QueueWrite+0xcc>
800055c4:	020007b7          	lui	a5,0x2000
800055c8:	61478793          	addi	a5,a5,1556 # 2000614 <RAM_SIZE+0x1f80614>
800055cc:	fef42423          	sw	a5,-24(s0)
800055d0:	1c00006f          	j	80005790 <LOS_QueueWrite+0x288>
800055d4:	fe042783          	lw	a5,-32(s0)
800055d8:	0087d783          	lhu	a5,8(a5)
800055dc:	00078713          	mv	a4,a5
800055e0:	fc442783          	lw	a5,-60(s0)
800055e4:	00f77a63          	bleu	a5,a4,800055f8 <LOS_QueueWrite+0xf0>
800055e8:	020007b7          	lui	a5,0x2000
800055ec:	61578793          	addi	a5,a5,1557 # 2000615 <RAM_SIZE+0x1f80615>
800055f0:	fef42423          	sw	a5,-24(s0)
800055f4:	19c0006f          	j	80005790 <LOS_QueueWrite+0x288>
800055f8:	fe042783          	lw	a5,-32(s0)
800055fc:	00e7d783          	lhu	a5,14(a5)
80005600:	0a079863          	bnez	a5,800056b0 <LOS_QueueWrite+0x1a8>
80005604:	fc042783          	lw	a5,-64(s0)
80005608:	00079a63          	bnez	a5,8000561c <LOS_QueueWrite+0x114>
8000560c:	020007b7          	lui	a5,0x2000
80005610:	61678793          	addi	a5,a5,1558 # 2000616 <RAM_SIZE+0x1f80616>
80005614:	fef42423          	sw	a5,-24(s0)
80005618:	1780006f          	j	80005790 <LOS_QueueWrite+0x288>
8000561c:	8001e7b7          	lui	a5,0x8001e
80005620:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80005624:	00078a63          	beqz	a5,80005638 <LOS_QueueWrite+0x130>
80005628:	020007b7          	lui	a5,0x2000
8000562c:	60678793          	addi	a5,a5,1542 # 2000606 <RAM_SIZE+0x1f80606>
80005630:	fef42423          	sw	a5,-24(s0)
80005634:	15c0006f          	j	80005790 <LOS_QueueWrite+0x288>
80005638:	8001e7b7          	lui	a5,0x8001e
8000563c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80005640:	0007a783          	lw	a5,0(a5)
80005644:	fcf42e23          	sw	a5,-36(s0)
80005648:	fe042783          	lw	a5,-32(s0)
8000564c:	01478793          	addi	a5,a5,20
80005650:	fc042603          	lw	a2,-64(s0)
80005654:	00078593          	mv	a1,a5
80005658:	fdc42503          	lw	a0,-36(s0)
8000565c:	8bdff0ef          	jal	ra,80004f18 <osQueuePend>
80005660:	fec42503          	lw	a0,-20(s0)
80005664:	db4fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
80005668:	edcfc0ef          	jal	ra,80001d44 <LOS_Schedule>
8000566c:	d8cfc0ef          	jal	ra,80001bf8 <LOS_IntLock>
80005670:	fea42623          	sw	a0,-20(s0)
80005674:	fdc42783          	lw	a5,-36(s0)
80005678:	0047d783          	lhu	a5,4(a5)
8000567c:	0407f793          	andi	a5,a5,64
80005680:	04078663          	beqz	a5,800056cc <LOS_QueueWrite+0x1c4>
80005684:	fdc42783          	lw	a5,-36(s0)
80005688:	0047d783          	lhu	a5,4(a5)
8000568c:	fbf7f793          	andi	a5,a5,-65
80005690:	01079713          	slli	a4,a5,0x10
80005694:	01075713          	srli	a4,a4,0x10
80005698:	fdc42783          	lw	a5,-36(s0)
8000569c:	00e79223          	sh	a4,4(a5)
800056a0:	020007b7          	lui	a5,0x2000
800056a4:	60778793          	addi	a5,a5,1543 # 2000607 <RAM_SIZE+0x1f80607>
800056a8:	fef42423          	sw	a5,-24(s0)
800056ac:	0e40006f          	j	80005790 <LOS_QueueWrite+0x288>
800056b0:	fe042783          	lw	a5,-32(s0)
800056b4:	00e7d783          	lhu	a5,14(a5)
800056b8:	fff78793          	addi	a5,a5,-1
800056bc:	01079713          	slli	a4,a5,0x10
800056c0:	01075713          	srli	a4,a4,0x10
800056c4:	fe042783          	lw	a5,-32(s0)
800056c8:	00e79723          	sh	a4,14(a5)
800056cc:	fe042783          	lw	a5,-32(s0)
800056d0:	0007a783          	lw	a5,0(a5)
800056d4:	fe042703          	lw	a4,-32(s0)
800056d8:	00c75703          	lhu	a4,12(a4)
800056dc:	00070693          	mv	a3,a4
800056e0:	fe042703          	lw	a4,-32(s0)
800056e4:	00875703          	lhu	a4,8(a4)
800056e8:	02e68733          	mul	a4,a3,a4
800056ec:	00e787b3          	add	a5,a5,a4
800056f0:	fcf42c23          	sw	a5,-40(s0)
800056f4:	fc842703          	lw	a4,-56(s0)
800056f8:	fd842783          	lw	a5,-40(s0)
800056fc:	00e7a023          	sw	a4,0(a5)
80005700:	fe042783          	lw	a5,-32(s0)
80005704:	00c7d783          	lhu	a5,12(a5)
80005708:	00178793          	addi	a5,a5,1
8000570c:	01079713          	slli	a4,a5,0x10
80005710:	01075713          	srli	a4,a4,0x10
80005714:	fe042783          	lw	a5,-32(s0)
80005718:	00e79623          	sh	a4,12(a5)
8000571c:	fe042783          	lw	a5,-32(s0)
80005720:	00c7d703          	lhu	a4,12(a5)
80005724:	fe042783          	lw	a5,-32(s0)
80005728:	0067d783          	lhu	a5,6(a5)
8000572c:	00f71663          	bne	a4,a5,80005738 <LOS_QueueWrite+0x230>
80005730:	fe042783          	lw	a5,-32(s0)
80005734:	00079623          	sh	zero,12(a5)
80005738:	fe042783          	lw	a5,-32(s0)
8000573c:	01c78793          	addi	a5,a5,28
80005740:	00078513          	mv	a0,a5
80005744:	de8ff0ef          	jal	ra,80004d2c <LOS_ListEmpty>
80005748:	00050793          	mv	a5,a0
8000574c:	02079463          	bnez	a5,80005774 <LOS_QueueWrite+0x26c>
80005750:	fe042783          	lw	a5,-32(s0)
80005754:	01c78793          	addi	a5,a5,28
80005758:	00078513          	mv	a0,a5
8000575c:	90dff0ef          	jal	ra,80005068 <osQueueWakeUp>
80005760:	fec42503          	lw	a0,-20(s0)
80005764:	cb4fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
80005768:	ddcfc0ef          	jal	ra,80001d44 <LOS_Schedule>
8000576c:	00000793          	li	a5,0
80005770:	02c0006f          	j	8000579c <LOS_QueueWrite+0x294>
80005774:	fe042783          	lw	a5,-32(s0)
80005778:	0107d783          	lhu	a5,16(a5)
8000577c:	00178793          	addi	a5,a5,1
80005780:	01079713          	slli	a4,a5,0x10
80005784:	01075713          	srli	a4,a4,0x10
80005788:	fe042783          	lw	a5,-32(s0)
8000578c:	00e79823          	sh	a4,16(a5)
80005790:	fec42503          	lw	a0,-20(s0)
80005794:	c84fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
80005798:	fe842783          	lw	a5,-24(s0)
8000579c:	00078513          	mv	a0,a5
800057a0:	03c12083          	lw	ra,60(sp)
800057a4:	03812403          	lw	s0,56(sp)
800057a8:	04010113          	addi	sp,sp,64
800057ac:	00008067          	ret
800057b0:	0000                	unimp
	...

800057b4 <LOS_QueueDelete>:
LOS_QueueDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:612
 Input       : puwQueueID   --- QueueID
 Output      :
 Return      : LOS_OK on success or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 LOS_QueueDelete(UINT32 uwQueueID)
{
800057b4:	fd010113          	addi	sp,sp,-48
800057b8:	02112623          	sw	ra,44(sp)
800057bc:	02812423          	sw	s0,40(sp)
800057c0:	03010413          	addi	s0,sp,48
800057c4:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:616
    QUEUE_CB_S *pstQueueCB;
    UINTPTR  uvIntSave;
    UINT32 uwRet;
    UINT32 uwInnerID = uwQueueID - 1;
800057c8:	fdc42783          	lw	a5,-36(s0)
800057cc:	fff78793          	addi	a5,a5,-1
800057d0:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:618

    if (uwInnerID >= LOSCFG_BASE_IPC_QUEUE_LIMIT)
800057d4:	fe842703          	lw	a4,-24(s0)
800057d8:	00900793          	li	a5,9
800057dc:	00e7f863          	bleu	a4,a5,800057ec <LOS_QueueDelete+0x38>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:620
    {
        return LOS_ERRNO_QUEUE_NOT_FOUND;
800057e0:	020007b7          	lui	a5,0x2000
800057e4:	60578793          	addi	a5,a5,1541 # 2000605 <RAM_SIZE+0x1f80605>
800057e8:	1300006f          	j	80005918 <LOS_QueueDelete+0x164>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:623
    }

    uvIntSave = LOS_IntLock();
800057ec:	c0cfc0ef          	jal	ra,80001bf8 <LOS_IntLock>
800057f0:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:624
    pstQueueCB = (QUEUE_CB_S *)GET_QUEUE_HANDLE(uwInnerID);
800057f4:	8001e7b7          	lui	a5,0x8001e
800057f8:	2307a703          	lw	a4,560(a5) # 8001e230 <__stack_top+0xfffdfc30>
800057fc:	fe842683          	lw	a3,-24(s0)
80005800:	02c00793          	li	a5,44
80005804:	02f687b3          	mul	a5,a3,a5
80005808:	00f707b3          	add	a5,a4,a5
8000580c:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:625
    if (OS_QUEUE_UNUSED == pstQueueCB->usQueueState)
80005810:	fe042783          	lw	a5,-32(s0)
80005814:	0047d783          	lhu	a5,4(a5)
80005818:	00079a63          	bnez	a5,8000582c <LOS_QueueDelete+0x78>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:627
    {
        GOTO_QUEUE_END(LOS_ERRNO_QUEUE_NOT_CREATE);
8000581c:	020007b7          	lui	a5,0x2000
80005820:	60a78793          	addi	a5,a5,1546 # 200060a <RAM_SIZE+0x1f8060a>
80005824:	fef42623          	sw	a5,-20(s0)
80005828:	0e40006f          	j	8000590c <LOS_QueueDelete+0x158>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:630
    }

    if (!LOS_ListEmpty(&pstQueueCB->stReadList))
8000582c:	fe042783          	lw	a5,-32(s0)
80005830:	01c78793          	addi	a5,a5,28
80005834:	00078513          	mv	a0,a5
80005838:	cf4ff0ef          	jal	ra,80004d2c <LOS_ListEmpty>
8000583c:	00050793          	mv	a5,a0
80005840:	00079a63          	bnez	a5,80005854 <LOS_QueueDelete+0xa0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:632
    {
        GOTO_QUEUE_END(LOS_ERRNO_QUEUE_IN_TSKUSE);
80005844:	020007b7          	lui	a5,0x2000
80005848:	60878793          	addi	a5,a5,1544 # 2000608 <RAM_SIZE+0x1f80608>
8000584c:	fef42623          	sw	a5,-20(s0)
80005850:	0bc0006f          	j	8000590c <LOS_QueueDelete+0x158>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:635
    }

    if (!LOS_ListEmpty(&pstQueueCB->stWriteList))
80005854:	fe042783          	lw	a5,-32(s0)
80005858:	01478793          	addi	a5,a5,20
8000585c:	00078513          	mv	a0,a5
80005860:	cccff0ef          	jal	ra,80004d2c <LOS_ListEmpty>
80005864:	00050793          	mv	a5,a0
80005868:	00079a63          	bnez	a5,8000587c <LOS_QueueDelete+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:637
    {
        GOTO_QUEUE_END(LOS_ERRNO_QUEUE_IN_TSKUSE);
8000586c:	020007b7          	lui	a5,0x2000
80005870:	60878793          	addi	a5,a5,1544 # 2000608 <RAM_SIZE+0x1f80608>
80005874:	fef42623          	sw	a5,-20(s0)
80005878:	0940006f          	j	8000590c <LOS_QueueDelete+0x158>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:640
    }

    if (!LOS_ListEmpty(&pstQueueCB->stMemList))
8000587c:	fe042783          	lw	a5,-32(s0)
80005880:	02478793          	addi	a5,a5,36
80005884:	00078513          	mv	a0,a5
80005888:	ca4ff0ef          	jal	ra,80004d2c <LOS_ListEmpty>
8000588c:	00050793          	mv	a5,a0
80005890:	00079a63          	bnez	a5,800058a4 <LOS_QueueDelete+0xf0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:642
    {
        GOTO_QUEUE_END(LOS_ERRNO_QUEUE_IN_TSKUSE);
80005894:	020007b7          	lui	a5,0x2000
80005898:	60878793          	addi	a5,a5,1544 # 2000608 <RAM_SIZE+0x1f80608>
8000589c:	fef42623          	sw	a5,-20(s0)
800058a0:	06c0006f          	j	8000590c <LOS_QueueDelete+0x158>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:645
    }

    if ((pstQueueCB->usWritableCnt + pstQueueCB->usReadableCnt) != pstQueueCB->usQueueLen)
800058a4:	fe042783          	lw	a5,-32(s0)
800058a8:	00e7d783          	lhu	a5,14(a5)
800058ac:	00078713          	mv	a4,a5
800058b0:	fe042783          	lw	a5,-32(s0)
800058b4:	0107d783          	lhu	a5,16(a5)
800058b8:	00f707b3          	add	a5,a4,a5
800058bc:	fe042703          	lw	a4,-32(s0)
800058c0:	00675703          	lhu	a4,6(a4)
800058c4:	00e78a63          	beq	a5,a4,800058d8 <LOS_QueueDelete+0x124>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:647
    {
        GOTO_QUEUE_END(LOS_ERRNO_QUEUE_IN_TSKWRITE);
800058c8:	020007b7          	lui	a5,0x2000
800058cc:	60b78793          	addi	a5,a5,1547 # 200060b <RAM_SIZE+0x1f8060b>
800058d0:	fef42623          	sw	a5,-20(s0)
800058d4:	0380006f          	j	8000590c <LOS_QueueDelete+0x158>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:650
    }

    uwRet = LOS_MemFree(m_aucSysMem0, (VOID *)(pstQueueCB->pucQueue));
800058d8:	eb01a703          	lw	a4,-336(gp) # 8000e1e0 <m_aucSysMem0>
800058dc:	fe042783          	lw	a5,-32(s0)
800058e0:	0007a783          	lw	a5,0(a5)
800058e4:	00078593          	mv	a1,a5
800058e8:	00070513          	mv	a0,a4
800058ec:	b55fd0ef          	jal	ra,80003440 <LOS_MemFree>
800058f0:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:651
    if (LOS_OK != uwRet)
800058f4:	fec42783          	lw	a5,-20(s0)
800058f8:	00079863          	bnez	a5,80005908 <LOS_QueueDelete+0x154>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:656
    {
        GOTO_QUEUE_END(uwRet);
    }

    pstQueueCB->usQueueState = OS_QUEUE_UNUSED;
800058fc:	fe042783          	lw	a5,-32(s0)
80005900:	00079223          	sh	zero,4(a5)
80005904:	0080006f          	j	8000590c <LOS_QueueDelete+0x158>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:653
        GOTO_QUEUE_END(uwRet);
80005908:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:659

QUEUE_END:
    LOS_IntRestore(uvIntSave);
8000590c:	fe442503          	lw	a0,-28(s0)
80005910:	b08fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:660
    return uwRet;
80005914:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_queue.c:661
}
80005918:	00078513          	mv	a0,a5
8000591c:	02c12083          	lw	ra,44(sp)
80005920:	02812403          	lw	s0,40(sp)
80005924:	03010113          	addi	sp,sp,48
80005928:	00008067          	ret
8000592c:	0000                	unimp
	...

80005930 <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:81
{
80005930:	fe010113          	addi	sp,sp,-32
80005934:	00812e23          	sw	s0,28(sp)
80005938:	02010413          	addi	s0,sp,32
8000593c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:82
    pstList->pstNext = pstList;
80005940:	fec42783          	lw	a5,-20(s0)
80005944:	fec42703          	lw	a4,-20(s0)
80005948:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:83
    pstList->pstPrev = pstList;
8000594c:	fec42783          	lw	a5,-20(s0)
80005950:	fec42703          	lw	a4,-20(s0)
80005954:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:84
}
80005958:	00000013          	nop
8000595c:	01c12403          	lw	s0,28(sp)
80005960:	02010113          	addi	sp,sp,32
80005964:	00008067          	ret
80005968:	0000                	unimp
	...

8000596c <LOS_ListAdd>:
LOS_ListAdd():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:130
{
8000596c:	fe010113          	addi	sp,sp,-32
80005970:	00812e23          	sw	s0,28(sp)
80005974:	02010413          	addi	s0,sp,32
80005978:	fea42623          	sw	a0,-20(s0)
8000597c:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:131
    pstNode->pstNext = pstList->pstNext;
80005980:	fec42783          	lw	a5,-20(s0)
80005984:	0047a703          	lw	a4,4(a5)
80005988:	fe842783          	lw	a5,-24(s0)
8000598c:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:132
    pstNode->pstPrev = pstList;
80005990:	fe842783          	lw	a5,-24(s0)
80005994:	fec42703          	lw	a4,-20(s0)
80005998:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:133
    pstList->pstNext->pstPrev = pstNode;
8000599c:	fec42783          	lw	a5,-20(s0)
800059a0:	0047a783          	lw	a5,4(a5)
800059a4:	fe842703          	lw	a4,-24(s0)
800059a8:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:134
    pstList->pstNext = pstNode;
800059ac:	fec42783          	lw	a5,-20(s0)
800059b0:	fe842703          	lw	a4,-24(s0)
800059b4:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:135
}
800059b8:	00000013          	nop
800059bc:	01c12403          	lw	s0,28(sp)
800059c0:	02010113          	addi	sp,sp,32
800059c4:	00008067          	ret
800059c8:	0000                	unimp
	...

800059cc <LOS_ListTailInsert>:
LOS_ListTailInsert():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:158
{
800059cc:	fe010113          	addi	sp,sp,-32
800059d0:	00112e23          	sw	ra,28(sp)
800059d4:	00812c23          	sw	s0,24(sp)
800059d8:	02010413          	addi	s0,sp,32
800059dc:	fea42623          	sw	a0,-20(s0)
800059e0:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:159
    LOS_ListAdd(pstList->pstPrev, pstNode);
800059e4:	fec42783          	lw	a5,-20(s0)
800059e8:	0007a783          	lw	a5,0(a5)
800059ec:	fe842583          	lw	a1,-24(s0)
800059f0:	00078513          	mv	a0,a5
800059f4:	f79ff0ef          	jal	ra,8000596c <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:160
}
800059f8:	00000013          	nop
800059fc:	01c12083          	lw	ra,28(sp)
80005a00:	01812403          	lw	s0,24(sp)
80005a04:	02010113          	addi	sp,sp,32
80005a08:	00008067          	ret
80005a0c:	0000                	unimp
	...

80005a10 <LOS_ListDelete>:
LOS_ListDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:184
{
80005a10:	fe010113          	addi	sp,sp,-32
80005a14:	00812e23          	sw	s0,28(sp)
80005a18:	02010413          	addi	s0,sp,32
80005a1c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:185
    pstNode->pstNext->pstPrev = pstNode->pstPrev;
80005a20:	fec42783          	lw	a5,-20(s0)
80005a24:	0047a783          	lw	a5,4(a5)
80005a28:	fec42703          	lw	a4,-20(s0)
80005a2c:	00072703          	lw	a4,0(a4)
80005a30:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:186
    pstNode->pstPrev->pstNext = pstNode->pstNext;
80005a34:	fec42783          	lw	a5,-20(s0)
80005a38:	0007a783          	lw	a5,0(a5)
80005a3c:	fec42703          	lw	a4,-20(s0)
80005a40:	00472703          	lw	a4,4(a4)
80005a44:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:187
    pstNode->pstNext = (LOS_DL_LIST *)NULL;
80005a48:	fec42783          	lw	a5,-20(s0)
80005a4c:	0007a223          	sw	zero,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:188
    pstNode->pstPrev = (LOS_DL_LIST *)NULL;
80005a50:	fec42783          	lw	a5,-20(s0)
80005a54:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:189
}
80005a58:	00000013          	nop
80005a5c:	01c12403          	lw	s0,28(sp)
80005a60:	02010113          	addi	sp,sp,32
80005a64:	00008067          	ret
80005a68:	0000                	unimp
	...

80005a6c <LOS_ListEmpty>:
LOS_ListEmpty():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:214
{
80005a6c:	fe010113          	addi	sp,sp,-32
80005a70:	00812e23          	sw	s0,28(sp)
80005a74:	02010413          	addi	s0,sp,32
80005a78:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:215
    return (BOOL)(pstNode->pstNext == pstNode);
80005a7c:	fec42783          	lw	a5,-20(s0)
80005a80:	0047a783          	lw	a5,4(a5)
80005a84:	fec42703          	lw	a4,-20(s0)
80005a88:	40f707b3          	sub	a5,a4,a5
80005a8c:	0017b793          	seqz	a5,a5
80005a90:	0ff7f793          	andi	a5,a5,255
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:216
}
80005a94:	00078513          	mv	a0,a5
80005a98:	01c12403          	lw	s0,28(sp)
80005a9c:	02010113          	addi	sp,sp,32
80005aa0:	00008067          	ret
80005aa4:	0000                	unimp
	...

80005aa8 <osSemInit>:
osSemInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:64
 Input        : None,
 Output       : None,
 Return       : LOS_OK on success ,or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 osSemInit(VOID)
{
80005aa8:	fe010113          	addi	sp,sp,-32
80005aac:	00112e23          	sw	ra,28(sp)
80005ab0:	00812c23          	sw	s0,24(sp)
80005ab4:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:68
    SEM_CB_S    *pstSemNode;
    UINT32      uwIndex;

    LOS_ListInit(&g_stUnusedSemList);
80005ab8:	8001e7b7          	lui	a5,0x8001e
80005abc:	23478513          	addi	a0,a5,564 # 8001e234 <__stack_top+0xfffdfc34>
80005ac0:	e71ff0ef          	jal	ra,80005930 <LOS_ListInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:71
    if (LOSCFG_BASE_IPC_SEM_LIMIT > 0)  /*lint !e506*/
    {
        g_pstAllSem = (SEM_CB_S *)LOS_MemAlloc(m_aucSysMem0, (LOSCFG_BASE_IPC_SEM_LIMIT * sizeof(SEM_CB_S)));
80005ac4:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80005ac8:	0a000593          	li	a1,160
80005acc:	00078513          	mv	a0,a5
80005ad0:	fecfd0ef          	jal	ra,800032bc <LOS_MemAlloc>
80005ad4:	00050713          	mv	a4,a0
80005ad8:	8001e7b7          	lui	a5,0x8001e
80005adc:	22e7ae23          	sw	a4,572(a5) # 8001e23c <__stack_top+0xfffdfc3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:72
        if (NULL == g_pstAllSem)
80005ae0:	8001e7b7          	lui	a5,0x8001e
80005ae4:	23c7a783          	lw	a5,572(a5) # 8001e23c <__stack_top+0xfffdfc3c>
80005ae8:	00079863          	bnez	a5,80005af8 <osSemInit+0x50>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:74
        {
            return LOS_ERRNO_SEM_NO_MEMORY;
80005aec:	020007b7          	lui	a5,0x2000
80005af0:	70078793          	addi	a5,a5,1792 # 2000700 <RAM_SIZE+0x1f80700>
80005af4:	06c0006f          	j	80005b60 <osSemInit+0xb8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:78
        }

        /* Connect all the ECBs in a doubly linked list. */
        for (uwIndex = 0; uwIndex < LOSCFG_BASE_IPC_SEM_LIMIT; uwIndex++)
80005af8:	fe042623          	sw	zero,-20(s0)
80005afc:	0540006f          	j	80005b50 <osSemInit+0xa8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:80 (discriminator 3)
        {
            pstSemNode = ((SEM_CB_S *)g_pstAllSem) + uwIndex;
80005b00:	8001e7b7          	lui	a5,0x8001e
80005b04:	23c7a703          	lw	a4,572(a5) # 8001e23c <__stack_top+0xfffdfc3c>
80005b08:	fec42783          	lw	a5,-20(s0)
80005b0c:	00479793          	slli	a5,a5,0x4
80005b10:	00f707b3          	add	a5,a4,a5
80005b14:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:81 (discriminator 3)
            pstSemNode->usSemID = uwIndex;
80005b18:	fe842783          	lw	a5,-24(s0)
80005b1c:	fec42703          	lw	a4,-20(s0)
80005b20:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:82 (discriminator 3)
            pstSemNode->usSemStat = OS_SEM_UNUSED;
80005b24:	fe842783          	lw	a5,-24(s0)
80005b28:	00078023          	sb	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:83 (discriminator 3)
            LOS_ListTailInsert(&g_stUnusedSemList, &pstSemNode->stSemList);
80005b2c:	fe842783          	lw	a5,-24(s0)
80005b30:	00878793          	addi	a5,a5,8
80005b34:	00078593          	mv	a1,a5
80005b38:	8001e7b7          	lui	a5,0x8001e
80005b3c:	23478513          	addi	a0,a5,564 # 8001e234 <__stack_top+0xfffdfc34>
80005b40:	e8dff0ef          	jal	ra,800059cc <LOS_ListTailInsert>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:78 (discriminator 3)
        for (uwIndex = 0; uwIndex < LOSCFG_BASE_IPC_SEM_LIMIT; uwIndex++)
80005b44:	fec42783          	lw	a5,-20(s0)
80005b48:	00178793          	addi	a5,a5,1
80005b4c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:78 (discriminator 1)
80005b50:	fec42703          	lw	a4,-20(s0)
80005b54:	00900793          	li	a5,9
80005b58:	fae7f4e3          	bleu	a4,a5,80005b00 <osSemInit+0x58>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:87
        }
    }

    return LOS_OK;
80005b5c:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:88
}
80005b60:	00078513          	mv	a0,a5
80005b64:	01c12083          	lw	ra,28(sp)
80005b68:	01812403          	lw	s0,24(sp)
80005b6c:	02010113          	addi	sp,sp,32
80005b70:	00008067          	ret
80005b74:	0000                	unimp
	...

80005b78 <LOS_SemCreate>:
LOS_SemCreate():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:98
 Input        : uwCount--------- semaphore count,
 Output       : puwSemHandle-----Index of semaphore,
 Return       : LOS_OK on success ,or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 LOS_SemCreate (UINT16 usCount, UINT32 *puwSemHandle)
{
80005b78:	fd010113          	addi	sp,sp,-48
80005b7c:	02112623          	sw	ra,44(sp)
80005b80:	02812423          	sw	s0,40(sp)
80005b84:	03010413          	addi	s0,sp,48
80005b88:	00050793          	mv	a5,a0
80005b8c:	fcb42c23          	sw	a1,-40(s0)
80005b90:	fcf41f23          	sh	a5,-34(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:103
    UINT32      uwIntSave;
    SEM_CB_S    *pstSemCreated;
    LOS_DL_LIST *pstUnusedSem;

    if (NULL == puwSemHandle)
80005b94:	fd842783          	lw	a5,-40(s0)
80005b98:	00079863          	bnez	a5,80005ba8 <LOS_SemCreate+0x30>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:105
    {
        return LOS_ERRNO_SEM_PTR_NULL;
80005b9c:	020007b7          	lui	a5,0x2000
80005ba0:	70278793          	addi	a5,a5,1794 # 2000702 <RAM_SIZE+0x1f80702>
80005ba4:	0b80006f          	j	80005c5c <LOS_SemCreate+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:108
    }

    if (usCount > OS_SEM_COUNT_MAX)
80005ba8:	fde45703          	lhu	a4,-34(s0)
80005bac:	000107b7          	lui	a5,0x10
80005bb0:	fff78793          	addi	a5,a5,-1 # ffff <OS_TASK_STATUS_NOT_RUNNING+0xff10>
80005bb4:	00f71863          	bne	a4,a5,80005bc4 <LOS_SemCreate+0x4c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:110
    {
        return LOS_ERRNO_SEM_OVERFLOW;
80005bb8:	020007b7          	lui	a5,0x2000
80005bbc:	70878793          	addi	a5,a5,1800 # 2000708 <RAM_SIZE+0x1f80708>
80005bc0:	09c0006f          	j	80005c5c <LOS_SemCreate+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:113
    }

    uwIntSave = LOS_IntLock();
80005bc4:	834fc0ef          	jal	ra,80001bf8 <LOS_IntLock>
80005bc8:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:115

    if (LOS_ListEmpty(&g_stUnusedSemList))
80005bcc:	8001e7b7          	lui	a5,0x8001e
80005bd0:	23478513          	addi	a0,a5,564 # 8001e234 <__stack_top+0xfffdfc34>
80005bd4:	e99ff0ef          	jal	ra,80005a6c <LOS_ListEmpty>
80005bd8:	00050793          	mv	a5,a0
80005bdc:	00078c63          	beqz	a5,80005bf4 <LOS_SemCreate+0x7c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:117
    {
        LOS_IntRestore(uwIntSave);
80005be0:	fec42503          	lw	a0,-20(s0)
80005be4:	834fc0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:118
        return LOS_ERRNO_SEM_ALL_BUSY;
80005be8:	020007b7          	lui	a5,0x2000
80005bec:	70378793          	addi	a5,a5,1795 # 2000703 <RAM_SIZE+0x1f80703>
80005bf0:	06c0006f          	j	80005c5c <LOS_SemCreate+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:121
    }

    pstUnusedSem = LOS_DL_LIST_FIRST(&(g_stUnusedSemList));
80005bf4:	8001e7b7          	lui	a5,0x8001e
80005bf8:	23478793          	addi	a5,a5,564 # 8001e234 <__stack_top+0xfffdfc34>
80005bfc:	0047a783          	lw	a5,4(a5)
80005c00:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:122
    LOS_ListDelete(pstUnusedSem);
80005c04:	fe842503          	lw	a0,-24(s0)
80005c08:	e09ff0ef          	jal	ra,80005a10 <LOS_ListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:123
    pstSemCreated = (GET_SEM_LIST(pstUnusedSem)); /*lint !e413*/
80005c0c:	fe842783          	lw	a5,-24(s0)
80005c10:	ff878793          	addi	a5,a5,-8
80005c14:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:124
    pstSemCreated->uwSemCount = usCount;
80005c18:	fe442783          	lw	a5,-28(s0)
80005c1c:	fde45703          	lhu	a4,-34(s0)
80005c20:	00e79123          	sh	a4,2(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:125
    pstSemCreated->usSemStat = OS_SEM_USED;
80005c24:	fe442783          	lw	a5,-28(s0)
80005c28:	00100713          	li	a4,1
80005c2c:	00e78023          	sb	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:126
    LOS_ListInit(&pstSemCreated->stSemList);
80005c30:	fe442783          	lw	a5,-28(s0)
80005c34:	00878793          	addi	a5,a5,8
80005c38:	00078513          	mv	a0,a5
80005c3c:	cf5ff0ef          	jal	ra,80005930 <LOS_ListInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:127
    *puwSemHandle = (UINT32)pstSemCreated->usSemID;
80005c40:	fe442783          	lw	a5,-28(s0)
80005c44:	0047a703          	lw	a4,4(a5)
80005c48:	fd842783          	lw	a5,-40(s0)
80005c4c:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:128
    LOS_IntRestore(uwIntSave);
80005c50:	fec42503          	lw	a0,-20(s0)
80005c54:	fc5fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:129
    return LOS_OK;
80005c58:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:130
}
80005c5c:	00078513          	mv	a0,a5
80005c60:	02c12083          	lw	ra,44(sp)
80005c64:	02812403          	lw	s0,40(sp)
80005c68:	03010113          	addi	sp,sp,48
80005c6c:	00008067          	ret
80005c70:	0000                	unimp
	...

80005c74 <LOS_SemDelete>:
LOS_SemDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:140
 Input          : uwSemHandle--------- semaphore operation handle,
 Output       : None
 Return       : LOS_OK on success or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT UINT32 LOS_SemDelete(UINT32 uwSemHandle)
{
80005c74:	fd010113          	addi	sp,sp,-48
80005c78:	02112623          	sw	ra,44(sp)
80005c7c:	02812423          	sw	s0,40(sp)
80005c80:	03010413          	addi	s0,sp,48
80005c84:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:144
    UINT32      uwIntSave;
    SEM_CB_S    *pstSemDeleted;

   pstSemDeleted = GET_SEM(uwSemHandle);
80005c88:	8001e7b7          	lui	a5,0x8001e
80005c8c:	23c7a703          	lw	a4,572(a5) # 8001e23c <__stack_top+0xfffdfc3c>
80005c90:	fdc42783          	lw	a5,-36(s0)
80005c94:	00479793          	slli	a5,a5,0x4
80005c98:	00f707b3          	add	a5,a4,a5
80005c9c:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:145
   uwIntSave = LOS_IntLock();
80005ca0:	f59fb0ef          	jal	ra,80001bf8 <LOS_IntLock>
80005ca4:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:146
   if ((uwSemHandle >= (UINT32)LOSCFG_BASE_IPC_SEM_LIMIT) ||
80005ca8:	fdc42703          	lw	a4,-36(s0)
80005cac:	00900793          	li	a5,9
80005cb0:	00e7e863          	bltu	a5,a4,80005cc0 <LOS_SemDelete+0x4c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:147 (discriminator 1)
        (0 == pstSemDeleted->usSemStat))
80005cb4:	fec42783          	lw	a5,-20(s0)
80005cb8:	0007c783          	lbu	a5,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:146 (discriminator 1)
   if ((uwSemHandle >= (UINT32)LOSCFG_BASE_IPC_SEM_LIMIT) ||
80005cbc:	00079c63          	bnez	a5,80005cd4 <LOS_SemDelete+0x60>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:149
   {
        LOS_IntRestore(uwIntSave);
80005cc0:	fe842503          	lw	a0,-24(s0)
80005cc4:	f55fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:150
        return LOS_ERRNO_SEM_INVALID;
80005cc8:	020007b7          	lui	a5,0x2000
80005ccc:	70178793          	addi	a5,a5,1793 # 2000701 <RAM_SIZE+0x1f80701>
80005cd0:	05c0006f          	j	80005d2c <LOS_SemDelete+0xb8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:153
    }

   if (!LOS_ListEmpty(&pstSemDeleted->stSemList))
80005cd4:	fec42783          	lw	a5,-20(s0)
80005cd8:	00878793          	addi	a5,a5,8
80005cdc:	00078513          	mv	a0,a5
80005ce0:	d8dff0ef          	jal	ra,80005a6c <LOS_ListEmpty>
80005ce4:	00050793          	mv	a5,a0
80005ce8:	00079c63          	bnez	a5,80005d00 <LOS_SemDelete+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:155
   {
       LOS_IntRestore(uwIntSave);
80005cec:	fe842503          	lw	a0,-24(s0)
80005cf0:	f29fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:156
       return LOS_ERRNO_SEM_PENDED;
80005cf4:	020007b7          	lui	a5,0x2000
80005cf8:	70978793          	addi	a5,a5,1801 # 2000709 <RAM_SIZE+0x1f80709>
80005cfc:	0300006f          	j	80005d2c <LOS_SemDelete+0xb8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:159
    }

   LOS_ListAdd(&g_stUnusedSemList, &pstSemDeleted->stSemList);
80005d00:	fec42783          	lw	a5,-20(s0)
80005d04:	00878793          	addi	a5,a5,8
80005d08:	00078593          	mv	a1,a5
80005d0c:	8001e7b7          	lui	a5,0x8001e
80005d10:	23478513          	addi	a0,a5,564 # 8001e234 <__stack_top+0xfffdfc34>
80005d14:	c59ff0ef          	jal	ra,8000596c <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:160
   pstSemDeleted->usSemStat = OS_SEM_UNUSED;
80005d18:	fec42783          	lw	a5,-20(s0)
80005d1c:	00078023          	sb	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:161
   LOS_IntRestore(uwIntSave);
80005d20:	fe842503          	lw	a0,-24(s0)
80005d24:	ef5fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:162
   return LOS_OK;
80005d28:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:163
}
80005d2c:	00078513          	mv	a0,a5
80005d30:	02c12083          	lw	ra,44(sp)
80005d34:	02812403          	lw	s0,40(sp)
80005d38:	03010113          	addi	sp,sp,48
80005d3c:	00008067          	ret
80005d40:	0000                	unimp
	...

80005d44 <LOS_SemPend>:
LOS_SemPend():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:174
 		     uwTimeout   ---------- waitting time
 Output       : None
 Return       : LOS_OK on success or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_SemPend(UINT32 uwSemHandle, UINT32 uwTimeout)
{
80005d44:	fc010113          	addi	sp,sp,-64
80005d48:	02112e23          	sw	ra,60(sp)
80005d4c:	02812c23          	sw	s0,56(sp)
80005d50:	04010413          	addi	s0,sp,64
80005d54:	fca42623          	sw	a0,-52(s0)
80005d58:	fcb42423          	sw	a1,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:181
    SEM_CB_S    *pstSemPended;
    UINT32      uwRetErr;
    LOS_TASK_CB *pstRunTsk;
    LOS_DL_LIST *pstPendObj;

    pstSemPended = GET_SEM(uwSemHandle);
80005d5c:	8001e7b7          	lui	a5,0x8001e
80005d60:	23c7a703          	lw	a4,572(a5) # 8001e23c <__stack_top+0xfffdfc3c>
80005d64:	fcc42783          	lw	a5,-52(s0)
80005d68:	00479793          	slli	a5,a5,0x4
80005d6c:	00f707b3          	add	a5,a4,a5
80005d70:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:182
    uwIntSave = LOS_IntLock();
80005d74:	e85fb0ef          	jal	ra,80001bf8 <LOS_IntLock>
80005d78:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:183
    if ((uwSemHandle >= (UINT32)LOSCFG_BASE_IPC_SEM_LIMIT) || (0 == pstSemPended->usSemStat))
80005d7c:	fcc42703          	lw	a4,-52(s0)
80005d80:	00900793          	li	a5,9
80005d84:	00e7e863          	bltu	a5,a4,80005d94 <LOS_SemPend+0x50>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:183 (discriminator 1)
80005d88:	fe842783          	lw	a5,-24(s0)
80005d8c:	0007c783          	lbu	a5,0(a5)
80005d90:	00079c63          	bnez	a5,80005da8 <LOS_SemPend+0x64>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:185
    {
        LOS_IntRestore(uwIntSave);
80005d94:	fe442503          	lw	a0,-28(s0)
80005d98:	e81fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:186
        return LOS_ERRNO_SEM_INVALID;
80005d9c:	020007b7          	lui	a5,0x2000
80005da0:	70178793          	addi	a5,a5,1793 # 2000701 <RAM_SIZE+0x1f80701>
80005da4:	1cc0006f          	j	80005f70 <LOS_SemPend+0x22c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:189
    }

    if (pstSemPended->uwSemCount > 0)
80005da8:	fe842783          	lw	a5,-24(s0)
80005dac:	0027d783          	lhu	a5,2(a5)
80005db0:	02078863          	beqz	a5,80005de0 <LOS_SemPend+0x9c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:191
    {
        pstSemPended->uwSemCount--;
80005db4:	fe842783          	lw	a5,-24(s0)
80005db8:	0027d783          	lhu	a5,2(a5)
80005dbc:	fff78793          	addi	a5,a5,-1
80005dc0:	01079713          	slli	a4,a5,0x10
80005dc4:	01075713          	srli	a4,a4,0x10
80005dc8:	fe842783          	lw	a5,-24(s0)
80005dcc:	00e79123          	sh	a4,2(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:192
        LOS_IntRestore(uwIntSave);
80005dd0:	fe442503          	lw	a0,-28(s0)
80005dd4:	e45fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:193
        return LOS_OK;
80005dd8:	00000793          	li	a5,0
80005ddc:	1940006f          	j	80005f70 <LOS_SemPend+0x22c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:196
    }

    if (!uwTimeout)
80005de0:	fc842783          	lw	a5,-56(s0)
80005de4:	00079a63          	bnez	a5,80005df8 <LOS_SemPend+0xb4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:198
    {
        uwRetErr = LOS_ERRNO_SEM_UNAVAILABLE;
80005de8:	020007b7          	lui	a5,0x2000
80005dec:	70478793          	addi	a5,a5,1796 # 2000704 <RAM_SIZE+0x1f80704>
80005df0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:199
        goto errre_uniSemPend;
80005df4:	1700006f          	j	80005f64 <LOS_SemPend+0x220>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:202
    }

    if (OS_INT_ACTIVE)
80005df8:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
80005dfc:	00078a63          	beqz	a5,80005e10 <LOS_SemPend+0xcc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:204
    {
        uwRetErr = LOS_ERRNO_SEM_PEND_INTERR;
80005e00:	020007b7          	lui	a5,0x2000
80005e04:	70578793          	addi	a5,a5,1797 # 2000705 <RAM_SIZE+0x1f80705>
80005e08:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:206
        PRINT_ERR("!!!LOS_ERRNO_SEM_PEND_INTERR!!!\n");
        goto errre_uniSemPend;
80005e0c:	1580006f          	j	80005f64 <LOS_SemPend+0x220>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:209
    }

    if (g_usLosTaskLock)
80005e10:	8001e7b7          	lui	a5,0x8001e
80005e14:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80005e18:	00078a63          	beqz	a5,80005e2c <LOS_SemPend+0xe8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:211
    {
        uwRetErr = LOS_ERRNO_SEM_PEND_IN_LOCK;
80005e1c:	020007b7          	lui	a5,0x2000
80005e20:	70678793          	addi	a5,a5,1798 # 2000706 <RAM_SIZE+0x1f80706>
80005e24:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:213
        PRINT_ERR("!!!LOS_ERRNO_SEM_PEND_IN_LOCK!!!\n");
        goto errre_uniSemPend;
80005e28:	13c0006f          	j	80005f64 <LOS_SemPend+0x220>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:216
    }

    pstRunTsk = (LOS_TASK_CB *)g_stLosTask.pstRunTask;
80005e2c:	8001e7b7          	lui	a5,0x8001e
80005e30:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80005e34:	0007a783          	lw	a5,0(a5)
80005e38:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:217
    LOS_PriqueueDequeue(&pstRunTsk->stPendList);
80005e3c:	fe042783          	lw	a5,-32(s0)
80005e40:	03c78793          	addi	a5,a5,60
80005e44:	00078513          	mv	a0,a5
80005e48:	564000ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:218
    pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_READY);
80005e4c:	fe042783          	lw	a5,-32(s0)
80005e50:	0047d783          	lhu	a5,4(a5)
80005e54:	ffb7f793          	andi	a5,a5,-5
80005e58:	01079713          	slli	a4,a5,0x10
80005e5c:	01075713          	srli	a4,a4,0x10
80005e60:	fe042783          	lw	a5,-32(s0)
80005e64:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:219
    pstRunTsk->pTaskSem = (VOID *)pstSemPended;
80005e68:	fe042783          	lw	a5,-32(s0)
80005e6c:	fe842703          	lw	a4,-24(s0)
80005e70:	00e7ac23          	sw	a4,24(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:220
    pstPendObj = &pstRunTsk->stPendList;
80005e74:	fe042783          	lw	a5,-32(s0)
80005e78:	03c78793          	addi	a5,a5,60
80005e7c:	fcf42e23          	sw	a5,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:221
    pstRunTsk->usTaskStatus |= OS_TASK_STATUS_PEND;
80005e80:	fe042783          	lw	a5,-32(s0)
80005e84:	0047d783          	lhu	a5,4(a5)
80005e88:	0087e793          	ori	a5,a5,8
80005e8c:	01079713          	slli	a4,a5,0x10
80005e90:	01075713          	srli	a4,a4,0x10
80005e94:	fe042783          	lw	a5,-32(s0)
80005e98:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:222
    LOS_ListTailInsert(&pstSemPended->stSemList, pstPendObj);
80005e9c:	fe842783          	lw	a5,-24(s0)
80005ea0:	00878793          	addi	a5,a5,8
80005ea4:	fdc42583          	lw	a1,-36(s0)
80005ea8:	00078513          	mv	a0,a5
80005eac:	b21ff0ef          	jal	ra,800059cc <LOS_ListTailInsert>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:223
    if (uwTimeout != LOS_WAIT_FOREVER)
80005eb0:	fc842703          	lw	a4,-56(s0)
80005eb4:	fff00793          	li	a5,-1
80005eb8:	02f70863          	beq	a4,a5,80005ee8 <LOS_SemPend+0x1a4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:225
    {
        pstRunTsk->usTaskStatus |= OS_TASK_STATUS_TIMEOUT;
80005ebc:	fe042783          	lw	a5,-32(s0)
80005ec0:	0047d783          	lhu	a5,4(a5)
80005ec4:	0407e793          	ori	a5,a5,64
80005ec8:	01079713          	slli	a4,a5,0x10
80005ecc:	01075713          	srli	a4,a4,0x10
80005ed0:	fe042783          	lw	a5,-32(s0)
80005ed4:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:226
        osTaskAdd2TimerList((LOS_TASK_CB *)pstRunTsk, uwTimeout);
80005ed8:	fc842583          	lw	a1,-56(s0)
80005edc:	fe042503          	lw	a0,-32(s0)
80005ee0:	3b0010ef          	jal	ra,80007290 <osTaskAdd2TimerList>
80005ee4:	0200006f          	j	80005f04 <LOS_SemPend+0x1c0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:230
    }
    else
    {
        pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
80005ee8:	fe042783          	lw	a5,-32(s0)
80005eec:	0047d783          	lhu	a5,4(a5)
80005ef0:	fbf7f793          	andi	a5,a5,-65
80005ef4:	01079713          	slli	a4,a5,0x10
80005ef8:	01075713          	srli	a4,a4,0x10
80005efc:	fe042783          	lw	a5,-32(s0)
80005f00:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:233
    }

    (VOID)LOS_IntRestore(uwIntSave);
80005f04:	fe442503          	lw	a0,-28(s0)
80005f08:	d11fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:234
    LOS_Schedule();
80005f0c:	e39fb0ef          	jal	ra,80001d44 <LOS_Schedule>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:236

    if (pstRunTsk->usTaskStatus & OS_TASK_STATUS_TIMEOUT)
80005f10:	fe042783          	lw	a5,-32(s0)
80005f14:	0047d783          	lhu	a5,4(a5)
80005f18:	0407f793          	andi	a5,a5,64
80005f1c:	04078063          	beqz	a5,80005f5c <LOS_SemPend+0x218>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:238
    {
        uwIntSave = LOS_IntLock();
80005f20:	cd9fb0ef          	jal	ra,80001bf8 <LOS_IntLock>
80005f24:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:239
        pstRunTsk->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
80005f28:	fe042783          	lw	a5,-32(s0)
80005f2c:	0047d783          	lhu	a5,4(a5)
80005f30:	fbf7f793          	andi	a5,a5,-65
80005f34:	01079713          	slli	a4,a5,0x10
80005f38:	01075713          	srli	a4,a4,0x10
80005f3c:	fe042783          	lw	a5,-32(s0)
80005f40:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:240
        (VOID)LOS_IntRestore(uwIntSave);
80005f44:	fe442503          	lw	a0,-28(s0)
80005f48:	cd1fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:241
        uwRetErr = LOS_ERRNO_SEM_TIMEOUT;
80005f4c:	020007b7          	lui	a5,0x2000
80005f50:	70778793          	addi	a5,a5,1799 # 2000707 <RAM_SIZE+0x1f80707>
80005f54:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:242
        goto error_uniSemPend;
80005f58:	0140006f          	j	80005f6c <LOS_SemPend+0x228>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:245
    }

    return LOS_OK;
80005f5c:	00000793          	li	a5,0
80005f60:	0100006f          	j	80005f70 <LOS_SemPend+0x22c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:248

errre_uniSemPend:
    (VOID)LOS_IntRestore(uwIntSave);
80005f64:	fe442503          	lw	a0,-28(s0)
80005f68:	cb1fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:250
error_uniSemPend:
    return (uwRetErr);
80005f6c:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:251
}
80005f70:	00078513          	mv	a0,a5
80005f74:	03c12083          	lw	ra,60(sp)
80005f78:	03812403          	lw	s0,56(sp)
80005f7c:	04010113          	addi	sp,sp,64
80005f80:	00008067          	ret
80005f84:	0000                	unimp
	...

80005f88 <LOS_SemPost>:
LOS_SemPost():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:261
 Input        : uwSemHandle--------- semaphore operation handle,
 Output       : None
 Return       : LOS_OK on success or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_SemPost(UINT32 uwSemHandle)
{
80005f88:	fd010113          	addi	sp,sp,-48
80005f8c:	02112623          	sw	ra,44(sp)
80005f90:	02812423          	sw	s0,40(sp)
80005f94:	03010413          	addi	s0,sp,48
80005f98:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:263
    UINT32      uwIntSave;
    SEM_CB_S    *pstSemPosted = GET_SEM(uwSemHandle);
80005f9c:	8001e7b7          	lui	a5,0x8001e
80005fa0:	23c7a703          	lw	a4,572(a5) # 8001e23c <__stack_top+0xfffdfc3c>
80005fa4:	fdc42783          	lw	a5,-36(s0)
80005fa8:	00479793          	slli	a5,a5,0x4
80005fac:	00f707b3          	add	a5,a4,a5
80005fb0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:266
    LOS_TASK_CB *pstResumedTask;

    if (uwSemHandle >= LOSCFG_BASE_IPC_SEM_LIMIT)
80005fb4:	fdc42703          	lw	a4,-36(s0)
80005fb8:	00900793          	li	a5,9
80005fbc:	00e7f863          	bleu	a4,a5,80005fcc <LOS_SemPost+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:268
    {
        return LOS_ERRNO_SEM_INVALID;
80005fc0:	020007b7          	lui	a5,0x2000
80005fc4:	70178793          	addi	a5,a5,1793 # 2000701 <RAM_SIZE+0x1f80701>
80005fc8:	1640006f          	j	8000612c <LOS_SemPost+0x1a4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:271
    }

    uwIntSave = LOS_IntLock();
80005fcc:	c2dfb0ef          	jal	ra,80001bf8 <LOS_IntLock>
80005fd0:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:273

    if (OS_SEM_UNUSED == pstSemPosted->usSemStat)
80005fd4:	fec42783          	lw	a5,-20(s0)
80005fd8:	0007c783          	lbu	a5,0(a5)
80005fdc:	00079c63          	bnez	a5,80005ff4 <LOS_SemPost+0x6c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:275
    {
        LOS_IntRestore(uwIntSave);
80005fe0:	fe842503          	lw	a0,-24(s0)
80005fe4:	c35fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:276
        return LOS_ERRNO_SEM_INVALID;
80005fe8:	020007b7          	lui	a5,0x2000
80005fec:	70178793          	addi	a5,a5,1793 # 2000701 <RAM_SIZE+0x1f80701>
80005ff0:	13c0006f          	j	8000612c <LOS_SemPost+0x1a4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:279
    }

    if (OS_SEM_COUNT_MAX == pstSemPosted->uwSemCount )
80005ff4:	fec42783          	lw	a5,-20(s0)
80005ff8:	0027d703          	lhu	a4,2(a5)
80005ffc:	000107b7          	lui	a5,0x10
80006000:	ffe78793          	addi	a5,a5,-2 # fffe <OS_TASK_STATUS_NOT_RUNNING+0xff0f>
80006004:	00f71c63          	bne	a4,a5,8000601c <LOS_SemPost+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:281
    {
        (VOID)LOS_IntRestore(uwIntSave);
80006008:	fe842503          	lw	a0,-24(s0)
8000600c:	c0dfb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:282
        return LOS_ERRNO_SEM_OVERFLOW;
80006010:	020007b7          	lui	a5,0x2000
80006014:	70878793          	addi	a5,a5,1800 # 2000708 <RAM_SIZE+0x1f80708>
80006018:	1140006f          	j	8000612c <LOS_SemPost+0x1a4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:284
    }
    if (!LOS_ListEmpty(&pstSemPosted->stSemList))
8000601c:	fec42783          	lw	a5,-20(s0)
80006020:	00878793          	addi	a5,a5,8
80006024:	00078513          	mv	a0,a5
80006028:	a45ff0ef          	jal	ra,80005a6c <LOS_ListEmpty>
8000602c:	00050793          	mv	a5,a0
80006030:	0c079a63          	bnez	a5,80006104 <LOS_SemPost+0x17c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:286
    {
        pstResumedTask = OS_TCB_FROM_PENDLIST(LOS_DL_LIST_FIRST(&(pstSemPosted->stSemList))); /*lint !e413*/
80006034:	fec42783          	lw	a5,-20(s0)
80006038:	00c7a783          	lw	a5,12(a5)
8000603c:	fc478793          	addi	a5,a5,-60
80006040:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:287
        LOS_ListDelete(LOS_DL_LIST_FIRST(&(pstSemPosted->stSemList)));
80006044:	fec42783          	lw	a5,-20(s0)
80006048:	00c7a783          	lw	a5,12(a5)
8000604c:	00078513          	mv	a0,a5
80006050:	9c1ff0ef          	jal	ra,80005a10 <LOS_ListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:289
        LOS_ASSERT_COND(pstResumedTask->usTaskStatus & OS_TASK_STATUS_PEND);
        pstResumedTask->usTaskStatus &= (~OS_TASK_STATUS_PEND);
80006054:	fe442783          	lw	a5,-28(s0)
80006058:	0047d783          	lhu	a5,4(a5)
8000605c:	ff77f793          	andi	a5,a5,-9
80006060:	01079713          	slli	a4,a5,0x10
80006064:	01075713          	srli	a4,a4,0x10
80006068:	fe442783          	lw	a5,-28(s0)
8000606c:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:290
        if (pstResumedTask->usTaskStatus & OS_TASK_STATUS_TIMEOUT)
80006070:	fe442783          	lw	a5,-28(s0)
80006074:	0047d783          	lhu	a5,4(a5)
80006078:	0407f793          	andi	a5,a5,64
8000607c:	02078463          	beqz	a5,800060a4 <LOS_SemPost+0x11c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:292
        {
            osTimerListDelete(pstResumedTask);
80006080:	fe442503          	lw	a0,-28(s0)
80006084:	42c010ef          	jal	ra,800074b0 <osTimerListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:293
            pstResumedTask->usTaskStatus &= (~OS_TASK_STATUS_TIMEOUT);
80006088:	fe442783          	lw	a5,-28(s0)
8000608c:	0047d783          	lhu	a5,4(a5)
80006090:	fbf7f793          	andi	a5,a5,-65
80006094:	01079713          	slli	a4,a5,0x10
80006098:	01075713          	srli	a4,a4,0x10
8000609c:	fe442783          	lw	a5,-28(s0)
800060a0:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:296
        }

        pstResumedTask->pTaskSem = NULL;
800060a4:	fe442783          	lw	a5,-28(s0)
800060a8:	0007ac23          	sw	zero,24(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:297
        if (!(pstResumedTask->usTaskStatus & OS_TASK_STATUS_SUSPEND))
800060ac:	fe442783          	lw	a5,-28(s0)
800060b0:	0047d783          	lhu	a5,4(a5)
800060b4:	0027f793          	andi	a5,a5,2
800060b8:	02079e63          	bnez	a5,800060f4 <LOS_SemPost+0x16c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:299
        {
            pstResumedTask->usTaskStatus |= OS_TASK_STATUS_READY;
800060bc:	fe442783          	lw	a5,-28(s0)
800060c0:	0047d783          	lhu	a5,4(a5)
800060c4:	0047e793          	ori	a5,a5,4
800060c8:	01079713          	slli	a4,a5,0x10
800060cc:	01075713          	srli	a4,a4,0x10
800060d0:	fe442783          	lw	a5,-28(s0)
800060d4:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:300
            LOS_PriqueueEnqueue(&pstResumedTask->stPendList, pstResumedTask->usPriority);
800060d8:	fe442783          	lw	a5,-28(s0)
800060dc:	03c78713          	addi	a4,a5,60
800060e0:	fe442783          	lw	a5,-28(s0)
800060e4:	0067d783          	lhu	a5,6(a5)
800060e8:	00078593          	mv	a1,a5
800060ec:	00070513          	mv	a0,a4
800060f0:	26c000ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:303
        }

        (VOID)LOS_IntRestore(uwIntSave);
800060f4:	fe842503          	lw	a0,-24(s0)
800060f8:	b21fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:304
        LOS_Schedule();
800060fc:	c49fb0ef          	jal	ra,80001d44 <LOS_Schedule>
80006100:	0280006f          	j	80006128 <LOS_SemPost+0x1a0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:308
    }
    else
    {
        pstSemPosted->uwSemCount++;
80006104:	fec42783          	lw	a5,-20(s0)
80006108:	0027d783          	lhu	a5,2(a5)
8000610c:	00178793          	addi	a5,a5,1
80006110:	01079713          	slli	a4,a5,0x10
80006114:	01075713          	srli	a4,a4,0x10
80006118:	fec42783          	lw	a5,-20(s0)
8000611c:	00e79123          	sh	a4,2(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:309
        (VOID)LOS_IntRestore(uwIntSave);
80006120:	fe842503          	lw	a0,-24(s0)
80006124:	af5fb0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:312
    }

    return LOS_OK;
80006128:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/ipc/los_sem.c:313
}
8000612c:	00078513          	mv	a0,a5
80006130:	02c12083          	lw	ra,44(sp)
80006134:	02812403          	lw	s0,40(sp)
80006138:	03010113          	addi	sp,sp,48
8000613c:	00008067          	ret
80006140:	0000                	unimp
	...

80006144 <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:81
{
80006144:	fe010113          	addi	sp,sp,-32
80006148:	00812e23          	sw	s0,28(sp)
8000614c:	02010413          	addi	s0,sp,32
80006150:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:82
    pstList->pstNext = pstList;
80006154:	fec42783          	lw	a5,-20(s0)
80006158:	fec42703          	lw	a4,-20(s0)
8000615c:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:83
    pstList->pstPrev = pstList;
80006160:	fec42783          	lw	a5,-20(s0)
80006164:	fec42703          	lw	a4,-20(s0)
80006168:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:84
}
8000616c:	00000013          	nop
80006170:	01c12403          	lw	s0,28(sp)
80006174:	02010113          	addi	sp,sp,32
80006178:	00008067          	ret
8000617c:	0000                	unimp
	...

80006180 <LOS_ListAdd>:
LOS_ListAdd():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:130
{
80006180:	fe010113          	addi	sp,sp,-32
80006184:	00812e23          	sw	s0,28(sp)
80006188:	02010413          	addi	s0,sp,32
8000618c:	fea42623          	sw	a0,-20(s0)
80006190:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:131
    pstNode->pstNext = pstList->pstNext;
80006194:	fec42783          	lw	a5,-20(s0)
80006198:	0047a703          	lw	a4,4(a5)
8000619c:	fe842783          	lw	a5,-24(s0)
800061a0:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:132
    pstNode->pstPrev = pstList;
800061a4:	fe842783          	lw	a5,-24(s0)
800061a8:	fec42703          	lw	a4,-20(s0)
800061ac:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:133
    pstList->pstNext->pstPrev = pstNode;
800061b0:	fec42783          	lw	a5,-20(s0)
800061b4:	0047a783          	lw	a5,4(a5)
800061b8:	fe842703          	lw	a4,-24(s0)
800061bc:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:134
    pstList->pstNext = pstNode;
800061c0:	fec42783          	lw	a5,-20(s0)
800061c4:	fe842703          	lw	a4,-24(s0)
800061c8:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:135
}
800061cc:	00000013          	nop
800061d0:	01c12403          	lw	s0,28(sp)
800061d4:	02010113          	addi	sp,sp,32
800061d8:	00008067          	ret
800061dc:	0000                	unimp
	...

800061e0 <LOS_ListTailInsert>:
LOS_ListTailInsert():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:158
{
800061e0:	fe010113          	addi	sp,sp,-32
800061e4:	00112e23          	sw	ra,28(sp)
800061e8:	00812c23          	sw	s0,24(sp)
800061ec:	02010413          	addi	s0,sp,32
800061f0:	fea42623          	sw	a0,-20(s0)
800061f4:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:159
    LOS_ListAdd(pstList->pstPrev, pstNode);
800061f8:	fec42783          	lw	a5,-20(s0)
800061fc:	0007a783          	lw	a5,0(a5)
80006200:	fe842583          	lw	a1,-24(s0)
80006204:	00078513          	mv	a0,a5
80006208:	f79ff0ef          	jal	ra,80006180 <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:160
}
8000620c:	00000013          	nop
80006210:	01c12083          	lw	ra,28(sp)
80006214:	01812403          	lw	s0,24(sp)
80006218:	02010113          	addi	sp,sp,32
8000621c:	00008067          	ret
80006220:	0000                	unimp
	...

80006224 <LOS_ListDelete>:
LOS_ListDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:184
{
80006224:	fe010113          	addi	sp,sp,-32
80006228:	00812e23          	sw	s0,28(sp)
8000622c:	02010413          	addi	s0,sp,32
80006230:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:185
    pstNode->pstNext->pstPrev = pstNode->pstPrev;
80006234:	fec42783          	lw	a5,-20(s0)
80006238:	0047a783          	lw	a5,4(a5)
8000623c:	fec42703          	lw	a4,-20(s0)
80006240:	00072703          	lw	a4,0(a4)
80006244:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:186
    pstNode->pstPrev->pstNext = pstNode->pstNext;
80006248:	fec42783          	lw	a5,-20(s0)
8000624c:	0007a783          	lw	a5,0(a5)
80006250:	fec42703          	lw	a4,-20(s0)
80006254:	00472703          	lw	a4,4(a4)
80006258:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:187
    pstNode->pstNext = (LOS_DL_LIST *)NULL;
8000625c:	fec42783          	lw	a5,-20(s0)
80006260:	0007a223          	sw	zero,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:188
    pstNode->pstPrev = (LOS_DL_LIST *)NULL;
80006264:	fec42783          	lw	a5,-20(s0)
80006268:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:189
}
8000626c:	00000013          	nop
80006270:	01c12403          	lw	s0,28(sp)
80006274:	02010113          	addi	sp,sp,32
80006278:	00008067          	ret
8000627c:	0000                	unimp
	...

80006280 <LOS_ListEmpty>:
LOS_ListEmpty():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:214
{
80006280:	fe010113          	addi	sp,sp,-32
80006284:	00812e23          	sw	s0,28(sp)
80006288:	02010413          	addi	s0,sp,32
8000628c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:215
    return (BOOL)(pstNode->pstNext == pstNode);
80006290:	fec42783          	lw	a5,-20(s0)
80006294:	0047a783          	lw	a5,4(a5)
80006298:	fec42703          	lw	a4,-20(s0)
8000629c:	40f707b3          	sub	a5,a4,a5
800062a0:	0017b793          	seqz	a5,a5
800062a4:	0ff7f793          	andi	a5,a5,255
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:216
}
800062a8:	00078513          	mv	a0,a5
800062ac:	01c12403          	lw	s0,28(sp)
800062b0:	02010113          	addi	sp,sp,32
800062b4:	00008067          	ret
800062b8:	0000                	unimp
	...

800062bc <osPriqueueInit>:
osPriqueueInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:45
#include "los_memory.h"

LITE_OS_SEC_BSS LOS_DL_LIST *g_pstLosPriorityQueueList;

VOID osPriqueueInit(VOID)
{
800062bc:	fe010113          	addi	sp,sp,-32
800062c0:	00112e23          	sw	ra,28(sp)
800062c4:	00812c23          	sw	s0,24(sp)
800062c8:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:46
    UINT32 uwPri = 0;
800062cc:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:47
    UINT32 uwSize = 0;
800062d0:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:49

    uwSize = LOS_PRIORITY_QUEUE_PRIORITYNUM * sizeof(LOS_DL_LIST);
800062d4:	10000793          	li	a5,256
800062d8:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:50
    g_pstLosPriorityQueueList = (LOS_DL_LIST *)LOS_MemAlloc(m_aucSysMem0, uwSize);
800062dc:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
800062e0:	fe842583          	lw	a1,-24(s0)
800062e4:	00078513          	mv	a0,a5
800062e8:	fd5fc0ef          	jal	ra,800032bc <LOS_MemAlloc>
800062ec:	00050713          	mv	a4,a0
800062f0:	8001e7b7          	lui	a5,0x8001e
800062f4:	24e7a023          	sw	a4,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:51
    if (NULL == g_pstLosPriorityQueueList)
800062f8:	8001e7b7          	lui	a5,0x8001e
800062fc:	2407a783          	lw	a5,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
80006300:	04078263          	beqz	a5,80006344 <osPriqueueInit+0x88>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:56
    {
        return;
    }

    for (uwPri = 0; uwPri < LOS_PRIORITY_QUEUE_PRIORITYNUM; ++uwPri)
80006304:	fe042623          	sw	zero,-20(s0)
80006308:	02c0006f          	j	80006334 <osPriqueueInit+0x78>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:58 (discriminator 3)
    {
        LOS_ListInit(&g_pstLosPriorityQueueList[uwPri]);
8000630c:	8001e7b7          	lui	a5,0x8001e
80006310:	2407a703          	lw	a4,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
80006314:	fec42783          	lw	a5,-20(s0)
80006318:	00379793          	slli	a5,a5,0x3
8000631c:	00f707b3          	add	a5,a4,a5
80006320:	00078513          	mv	a0,a5
80006324:	e21ff0ef          	jal	ra,80006144 <LOS_ListInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:56 (discriminator 3)
    for (uwPri = 0; uwPri < LOS_PRIORITY_QUEUE_PRIORITYNUM; ++uwPri)
80006328:	fec42783          	lw	a5,-20(s0)
8000632c:	00178793          	addi	a5,a5,1
80006330:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:56 (discriminator 1)
80006334:	fec42703          	lw	a4,-20(s0)
80006338:	01f00793          	li	a5,31
8000633c:	fce7f8e3          	bleu	a4,a5,8000630c <osPriqueueInit+0x50>
80006340:	0080006f          	j	80006348 <osPriqueueInit+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:53
        return;
80006344:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:60
    }
}
80006348:	01c12083          	lw	ra,28(sp)
8000634c:	01812403          	lw	s0,24(sp)
80006350:	02010113          	addi	sp,sp,32
80006354:	00008067          	ret
80006358:	0000                	unimp
	...

8000635c <LOS_PriqueueEnqueue>:
LOS_PriqueueEnqueue():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:63

VOID LOS_PriqueueEnqueue(LOS_DL_LIST *ptrPQItem, UINT32 uwPri)
{
8000635c:	fe010113          	addi	sp,sp,-32
80006360:	00112e23          	sw	ra,28(sp)
80006364:	00812c23          	sw	s0,24(sp)
80006368:	02010413          	addi	s0,sp,32
8000636c:	fea42623          	sw	a0,-20(s0)
80006370:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:64
    LOS_ListTailInsert(&g_pstLosPriorityQueueList[uwPri], ptrPQItem);
80006374:	8001e7b7          	lui	a5,0x8001e
80006378:	2407a703          	lw	a4,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
8000637c:	fe842783          	lw	a5,-24(s0)
80006380:	00379793          	slli	a5,a5,0x3
80006384:	00f707b3          	add	a5,a4,a5
80006388:	fec42583          	lw	a1,-20(s0)
8000638c:	00078513          	mv	a0,a5
80006390:	e51ff0ef          	jal	ra,800061e0 <LOS_ListTailInsert>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:65
}
80006394:	00000013          	nop
80006398:	01c12083          	lw	ra,28(sp)
8000639c:	01812403          	lw	s0,24(sp)
800063a0:	02010113          	addi	sp,sp,32
800063a4:	00008067          	ret
800063a8:	0000                	unimp
	...

800063ac <LOS_PriqueueDequeue>:
LOS_PriqueueDequeue():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:68

VOID LOS_PriqueueDequeue(LOS_DL_LIST *ptrPQItem)
{
800063ac:	fe010113          	addi	sp,sp,-32
800063b0:	00112e23          	sw	ra,28(sp)
800063b4:	00812c23          	sw	s0,24(sp)
800063b8:	02010413          	addi	s0,sp,32
800063bc:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:69
    LOS_ListDelete(ptrPQItem);
800063c0:	fec42503          	lw	a0,-20(s0)
800063c4:	e61ff0ef          	jal	ra,80006224 <LOS_ListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:70
}
800063c8:	00000013          	nop
800063cc:	01c12083          	lw	ra,28(sp)
800063d0:	01812403          	lw	s0,24(sp)
800063d4:	02010113          	addi	sp,sp,32
800063d8:	00008067          	ret
800063dc:	0000                	unimp
	...

800063e0 <LOS_PriqueueTop>:
LOS_PriqueueTop():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:73

LOS_DL_LIST *LOS_PriqueueTop(VOID)
{
800063e0:	fe010113          	addi	sp,sp,-32
800063e4:	00112e23          	sw	ra,28(sp)
800063e8:	00812c23          	sw	s0,24(sp)
800063ec:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:74
    UINT32 uwPri = 0;
800063f0:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:76

    for (uwPri = 0; uwPri < LOS_PRIORITY_QUEUE_PRIORITYNUM; ++uwPri)
800063f4:	fe042623          	sw	zero,-20(s0)
800063f8:	0500006f          	j	80006448 <LOS_PriqueueTop+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:78
    {
        if (!LOS_ListEmpty(&g_pstLosPriorityQueueList[uwPri]))
800063fc:	8001e7b7          	lui	a5,0x8001e
80006400:	2407a703          	lw	a4,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
80006404:	fec42783          	lw	a5,-20(s0)
80006408:	00379793          	slli	a5,a5,0x3
8000640c:	00f707b3          	add	a5,a4,a5
80006410:	00078513          	mv	a0,a5
80006414:	e6dff0ef          	jal	ra,80006280 <LOS_ListEmpty>
80006418:	00050793          	mv	a5,a0
8000641c:	02079063          	bnez	a5,8000643c <LOS_PriqueueTop+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:80
        {
            return LOS_DL_LIST_FIRST(&g_pstLosPriorityQueueList[uwPri]);
80006420:	8001e7b7          	lui	a5,0x8001e
80006424:	2407a703          	lw	a4,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
80006428:	fec42783          	lw	a5,-20(s0)
8000642c:	00379793          	slli	a5,a5,0x3
80006430:	00f707b3          	add	a5,a4,a5
80006434:	0047a783          	lw	a5,4(a5)
80006438:	0200006f          	j	80006458 <LOS_PriqueueTop+0x78>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:76 (discriminator 2)
    for (uwPri = 0; uwPri < LOS_PRIORITY_QUEUE_PRIORITYNUM; ++uwPri)
8000643c:	fec42783          	lw	a5,-20(s0)
80006440:	00178793          	addi	a5,a5,1
80006444:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:76 (discriminator 1)
80006448:	fec42703          	lw	a4,-20(s0)
8000644c:	01f00793          	li	a5,31
80006450:	fae7f6e3          	bleu	a4,a5,800063fc <LOS_PriqueueTop+0x1c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:84
        }
    }

    return (LOS_DL_LIST *)NULL;
80006454:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:85
}
80006458:	00078513          	mv	a0,a5
8000645c:	01c12083          	lw	ra,28(sp)
80006460:	01812403          	lw	s0,24(sp)
80006464:	02010113          	addi	sp,sp,32
80006468:	00008067          	ret
8000646c:	0000                	unimp
	...

80006470 <LOS_PriqueueSize>:
LOS_PriqueueSize():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:88

UINT32 LOS_PriqueueSize(UINT32 uwPri)
{
80006470:	fd010113          	addi	sp,sp,-48
80006474:	02812623          	sw	s0,44(sp)
80006478:	03010413          	addi	s0,sp,48
8000647c:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:89
    UINT32      uwItemCnt = 0;
80006480:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:90
    LOS_DL_LIST *pstCurPQNode = (LOS_DL_LIST *)NULL;
80006484:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:92

    LOS_DL_LIST_FOR_EACH(pstCurPQNode, &g_pstLosPriorityQueueList[uwPri])
80006488:	8001e7b7          	lui	a5,0x8001e
8000648c:	2407a703          	lw	a4,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
80006490:	fdc42783          	lw	a5,-36(s0)
80006494:	00379793          	slli	a5,a5,0x3
80006498:	00f707b3          	add	a5,a4,a5
8000649c:	0047a783          	lw	a5,4(a5)
800064a0:	fef42423          	sw	a5,-24(s0)
800064a4:	01c0006f          	j	800064c0 <LOS_PriqueueSize+0x50>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:94 (discriminator 3)
    {
        ++uwItemCnt;
800064a8:	fec42783          	lw	a5,-20(s0)
800064ac:	00178793          	addi	a5,a5,1
800064b0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:92 (discriminator 3)
    LOS_DL_LIST_FOR_EACH(pstCurPQNode, &g_pstLosPriorityQueueList[uwPri])
800064b4:	fe842783          	lw	a5,-24(s0)
800064b8:	0047a783          	lw	a5,4(a5)
800064bc:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:92 (discriminator 1)
800064c0:	8001e7b7          	lui	a5,0x8001e
800064c4:	2407a703          	lw	a4,576(a5) # 8001e240 <__stack_top+0xfffdfc40>
800064c8:	fdc42783          	lw	a5,-36(s0)
800064cc:	00379793          	slli	a5,a5,0x3
800064d0:	00f707b3          	add	a5,a4,a5
800064d4:	fe842703          	lw	a4,-24(s0)
800064d8:	fcf718e3          	bne	a4,a5,800064a8 <LOS_PriqueueSize+0x38>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:97
    }

    return uwItemCnt;
800064dc:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_priqueue.c:98
}
800064e0:	00078513          	mv	a0,a5
800064e4:	02c12403          	lw	s0,44(sp)
800064e8:	03010113          	addi	sp,sp,48
800064ec:	00008067          	ret
800064f0:	0000                	unimp
	...

800064f4 <osSwTmrTask>:
osSwTmrTask():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:354

    if (m_pstSwtmrSortList->uwCount == 0)
    {
        osSwTmrTimeoutHandle();
    }
}
800064f4:	fe010113          	addi	sp,sp,-32
800064f8:	00112e23          	sw	ra,28(sp)
800064fc:	00812c23          	sw	s0,24(sp)
80006500:	02010413          	addi	s0,sp,32
80006504:	fe042423          	sw	zero,-24(s0)
80006508:	8001e7b7          	lui	a5,0x8001e
8000650c:	24c7a783          	lw	a5,588(a5) # 8001e24c <__stack_top+0xfffdfc4c>
80006510:	fe840713          	addi	a4,s0,-24
80006514:	fff00693          	li	a3,-1
80006518:	00400613          	li	a2,4
8000651c:	00070593          	mv	a1,a4
80006520:	00078513          	mv	a0,a5
80006524:	d59fe0ef          	jal	ra,8000527c <LOS_QueueRead>
80006528:	fea42623          	sw	a0,-20(s0)
8000652c:	fec42783          	lw	a5,-20(s0)
80006530:	fc079ce3          	bnez	a5,80006508 <osSwTmrTask+0x14>
80006534:	fe842783          	lw	a5,-24(s0)
80006538:	fc0788e3          	beqz	a5,80006508 <osSwTmrTask+0x14>
8000653c:	fe842783          	lw	a5,-24(s0)
80006540:	0007a783          	lw	a5,0(a5)
80006544:	fef42023          	sw	a5,-32(s0)
80006548:	fe842783          	lw	a5,-24(s0)
8000654c:	0047a783          	lw	a5,4(a5)
80006550:	fef42223          	sw	a5,-28(s0)
80006554:	fe842783          	lw	a5,-24(s0)
80006558:	00078593          	mv	a1,a5
8000655c:	8001e7b7          	lui	a5,0x8001e
80006560:	25478513          	addi	a0,a5,596 # 8001e254 <__stack_top+0xfffdfc54>
80006564:	968fc0ef          	jal	ra,800026cc <LOS_MemboxFree>
80006568:	fe042783          	lw	a5,-32(s0)
8000656c:	f8078ee3          	beqz	a5,80006508 <osSwTmrTask+0x14>
80006570:	fe042703          	lw	a4,-32(s0)
80006574:	fe442783          	lw	a5,-28(s0)
80006578:	00078513          	mv	a0,a5
8000657c:	000700e7          	jalr	a4
80006580:	f89ff06f          	j	80006508 <osSwTmrTask+0x14>
80006584:	0000                	unimp
	...

80006588 <osSwTmrTaskCreate>:
osSwTmrTaskCreate():
80006588:	fc010113          	addi	sp,sp,-64
8000658c:	02112e23          	sw	ra,60(sp)
80006590:	02812c23          	sw	s0,56(sp)
80006594:	04010413          	addi	s0,sp,64
80006598:	fc840793          	addi	a5,s0,-56
8000659c:	02400613          	li	a2,36
800065a0:	00000593          	li	a1,0
800065a4:	00078513          	mv	a0,a5
800065a8:	624040ef          	jal	ra,8000abcc <memset>
800065ac:	800067b7          	lui	a5,0x80006
800065b0:	4f478793          	addi	a5,a5,1268 # 800064f4 <__stack_top+0xfffc7ef4>
800065b4:	fcf42423          	sw	a5,-56(s0)
800065b8:	50000793          	li	a5,1280
800065bc:	fef42023          	sw	a5,-32(s0)
800065c0:	8000d7b7          	lui	a5,0x8000d
800065c4:	e7078793          	addi	a5,a5,-400 # 8000ce70 <__stack_top+0xfffce870>
800065c8:	fef42223          	sw	a5,-28(s0)
800065cc:	fc041623          	sh	zero,-52(s0)
800065d0:	08000793          	li	a5,128
800065d4:	fef42423          	sw	a5,-24(s0)
800065d8:	fc840793          	addi	a5,s0,-56
800065dc:	00078593          	mv	a1,a5
800065e0:	8001e7b7          	lui	a5,0x8001e
800065e4:	32878513          	addi	a0,a5,808 # 8001e328 <__stack_top+0xfffdfd28>
800065e8:	489010ef          	jal	ra,80008270 <LOS_TaskCreate>
800065ec:	fea42623          	sw	a0,-20(s0)
800065f0:	fec42783          	lw	a5,-20(s0)
800065f4:	00078513          	mv	a0,a5
800065f8:	03c12083          	lw	ra,60(sp)
800065fc:	03812403          	lw	s0,56(sp)
80006600:	04010113          	addi	sp,sp,64
80006604:	00008067          	ret
80006608:	0000                	unimp
	...

8000660c <osSwTmrInit>:
osSwTmrInit():
8000660c:	fd010113          	addi	sp,sp,-48
80006610:	02112623          	sw	ra,44(sp)
80006614:	02812423          	sw	s0,40(sp)
80006618:	03010413          	addi	s0,sp,48
8000661c:	8001e7b7          	lui	a5,0x8001e
80006620:	2407a823          	sw	zero,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
80006624:	20000793          	li	a5,512
80006628:	fef42023          	sw	a5,-32(s0)
8000662c:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80006630:	fe042583          	lw	a1,-32(s0)
80006634:	00078513          	mv	a0,a5
80006638:	c85fc0ef          	jal	ra,800032bc <LOS_MemAlloc>
8000663c:	fea42423          	sw	a0,-24(s0)
80006640:	fe842783          	lw	a5,-24(s0)
80006644:	00079863          	bnez	a5,80006654 <osSwTmrInit+0x48>
80006648:	020007b7          	lui	a5,0x2000
8000664c:	30778793          	addi	a5,a5,775 # 2000307 <RAM_SIZE+0x1f80307>
80006650:	1180006f          	j	80006768 <osSwTmrInit+0x15c>
80006654:	fe042603          	lw	a2,-32(s0)
80006658:	00000593          	li	a1,0
8000665c:	fe842503          	lw	a0,-24(s0)
80006660:	56c040ef          	jal	ra,8000abcc <memset>
80006664:	8001e7b7          	lui	a5,0x8001e
80006668:	fe842703          	lw	a4,-24(s0)
8000666c:	24e7a423          	sw	a4,584(a5) # 8001e248 <__stack_top+0xfffdfc48>
80006670:	8001e7b7          	lui	a5,0x8001e
80006674:	fe842703          	lw	a4,-24(s0)
80006678:	24e7a223          	sw	a4,580(a5) # 8001e244 <__stack_top+0xfffdfc44>
8000667c:	fe842783          	lw	a5,-24(s0)
80006680:	00079423          	sh	zero,8(a5)
80006684:	fe842783          	lw	a5,-24(s0)
80006688:	fef42223          	sw	a5,-28(s0)
8000668c:	fe842783          	lw	a5,-24(s0)
80006690:	02078793          	addi	a5,a5,32
80006694:	fef42423          	sw	a5,-24(s0)
80006698:	00100793          	li	a5,1
8000669c:	fef41723          	sh	a5,-18(s0)
800066a0:	03c0006f          	j	800066dc <osSwTmrInit+0xd0>
800066a4:	fe842783          	lw	a5,-24(s0)
800066a8:	fee45703          	lhu	a4,-18(s0)
800066ac:	00e79423          	sh	a4,8(a5)
800066b0:	fe442783          	lw	a5,-28(s0)
800066b4:	fe842703          	lw	a4,-24(s0)
800066b8:	00e7a023          	sw	a4,0(a5)
800066bc:	fe842783          	lw	a5,-24(s0)
800066c0:	fef42223          	sw	a5,-28(s0)
800066c4:	fee45783          	lhu	a5,-18(s0)
800066c8:	00178793          	addi	a5,a5,1
800066cc:	fef41723          	sh	a5,-18(s0)
800066d0:	fe842783          	lw	a5,-24(s0)
800066d4:	02078793          	addi	a5,a5,32
800066d8:	fef42423          	sw	a5,-24(s0)
800066dc:	fee45703          	lhu	a4,-18(s0)
800066e0:	00f00793          	li	a5,15
800066e4:	fce7f0e3          	bleu	a4,a5,800066a4 <osSwTmrInit+0x98>
800066e8:	00800613          	li	a2,8
800066ec:	0d000593          	li	a1,208
800066f0:	8001e7b7          	lui	a5,0x8001e
800066f4:	25478513          	addi	a0,a5,596 # 8001e254 <__stack_top+0xfffdfc54>
800066f8:	dddfb0ef          	jal	ra,800024d4 <LOS_MemboxInit>
800066fc:	fca42e23          	sw	a0,-36(s0)
80006700:	fdc42783          	lw	a5,-36(s0)
80006704:	00078863          	beqz	a5,80006714 <osSwTmrInit+0x108>
80006708:	020007b7          	lui	a5,0x2000
8000670c:	30a78793          	addi	a5,a5,778 # 200030a <RAM_SIZE+0x1f8030a>
80006710:	0580006f          	j	80006768 <osSwTmrInit+0x15c>
80006714:	00400713          	li	a4,4
80006718:	00000693          	li	a3,0
8000671c:	8001e7b7          	lui	a5,0x8001e
80006720:	24c78613          	addi	a2,a5,588 # 8001e24c <__stack_top+0xfffdfc4c>
80006724:	01000593          	li	a1,16
80006728:	00000513          	li	a0,0
8000672c:	a2dfe0ef          	jal	ra,80005158 <LOS_QueueCreate>
80006730:	fca42e23          	sw	a0,-36(s0)
80006734:	fdc42783          	lw	a5,-36(s0)
80006738:	00078863          	beqz	a5,80006748 <osSwTmrInit+0x13c>
8000673c:	020007b7          	lui	a5,0x2000
80006740:	30b78793          	addi	a5,a5,779 # 200030b <RAM_SIZE+0x1f8030b>
80006744:	0240006f          	j	80006768 <osSwTmrInit+0x15c>
80006748:	e41ff0ef          	jal	ra,80006588 <osSwTmrTaskCreate>
8000674c:	fca42e23          	sw	a0,-36(s0)
80006750:	fdc42783          	lw	a5,-36(s0)
80006754:	00078863          	beqz	a5,80006764 <osSwTmrInit+0x158>
80006758:	020007b7          	lui	a5,0x2000
8000675c:	30c78793          	addi	a5,a5,780 # 200030c <RAM_SIZE+0x1f8030c>
80006760:	0080006f          	j	80006768 <osSwTmrInit+0x15c>
80006764:	00000793          	li	a5,0
80006768:	00078513          	mv	a0,a5
8000676c:	02c12083          	lw	ra,44(sp)
80006770:	02812403          	lw	s0,40(sp)
80006774:	03010113          	addi	sp,sp,48
80006778:	00008067          	ret
8000677c:	0000                	unimp
	...

80006780 <osSwTmrStart>:
osSwTmrStart():
80006780:	fd010113          	addi	sp,sp,-48
80006784:	02812623          	sw	s0,44(sp)
80006788:	03010413          	addi	s0,sp,48
8000678c:	fca42e23          	sw	a0,-36(s0)
80006790:	fe042623          	sw	zero,-20(s0)
80006794:	fe042423          	sw	zero,-24(s0)
80006798:	fdc42783          	lw	a5,-36(s0)
8000679c:	0067c783          	lbu	a5,6(a5)
800067a0:	02079a63          	bnez	a5,800067d4 <osSwTmrStart+0x54>
800067a4:	fdc42783          	lw	a5,-36(s0)
800067a8:	0057c783          	lbu	a5,5(a5)
800067ac:	00078a63          	beqz	a5,800067c0 <osSwTmrStart+0x40>
800067b0:	fdc42783          	lw	a5,-36(s0)
800067b4:	0057c703          	lbu	a4,5(a5)
800067b8:	00200793          	li	a5,2
800067bc:	00f71c63          	bne	a4,a5,800067d4 <osSwTmrStart+0x54>
800067c0:	fdc42783          	lw	a5,-36(s0)
800067c4:	0147a703          	lw	a4,20(a5)
800067c8:	fdc42783          	lw	a5,-36(s0)
800067cc:	00e7a623          	sw	a4,12(a5)
800067d0:	0140006f          	j	800067e4 <osSwTmrStart+0x64>
800067d4:	fdc42783          	lw	a5,-36(s0)
800067d8:	0107a703          	lw	a4,16(a5)
800067dc:	fdc42783          	lw	a5,-36(s0)
800067e0:	00e7a623          	sw	a4,12(a5)
800067e4:	8001e7b7          	lui	a5,0x8001e
800067e8:	2507a783          	lw	a5,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
800067ec:	fef42423          	sw	a5,-24(s0)
800067f0:	0480006f          	j	80006838 <osSwTmrStart+0xb8>
800067f4:	fe842783          	lw	a5,-24(s0)
800067f8:	00c7a703          	lw	a4,12(a5)
800067fc:	fdc42783          	lw	a5,-36(s0)
80006800:	00c7a783          	lw	a5,12(a5)
80006804:	04e7e063          	bltu	a5,a4,80006844 <osSwTmrStart+0xc4>
80006808:	fdc42783          	lw	a5,-36(s0)
8000680c:	00c7a703          	lw	a4,12(a5)
80006810:	fe842783          	lw	a5,-24(s0)
80006814:	00c7a783          	lw	a5,12(a5)
80006818:	40f70733          	sub	a4,a4,a5
8000681c:	fdc42783          	lw	a5,-36(s0)
80006820:	00e7a623          	sw	a4,12(a5)
80006824:	fe842783          	lw	a5,-24(s0)
80006828:	fef42623          	sw	a5,-20(s0)
8000682c:	fe842783          	lw	a5,-24(s0)
80006830:	0007a783          	lw	a5,0(a5)
80006834:	fef42423          	sw	a5,-24(s0)
80006838:	fe842783          	lw	a5,-24(s0)
8000683c:	fa079ce3          	bnez	a5,800067f4 <osSwTmrStart+0x74>
80006840:	0080006f          	j	80006848 <osSwTmrStart+0xc8>
80006844:	00000013          	nop
80006848:	fdc42783          	lw	a5,-36(s0)
8000684c:	fe842703          	lw	a4,-24(s0)
80006850:	00e7a023          	sw	a4,0(a5)
80006854:	fe842783          	lw	a5,-24(s0)
80006858:	02078063          	beqz	a5,80006878 <osSwTmrStart+0xf8>
8000685c:	fe842783          	lw	a5,-24(s0)
80006860:	00c7a703          	lw	a4,12(a5)
80006864:	fdc42783          	lw	a5,-36(s0)
80006868:	00c7a783          	lw	a5,12(a5)
8000686c:	40f70733          	sub	a4,a4,a5
80006870:	fe842783          	lw	a5,-24(s0)
80006874:	00e7a623          	sw	a4,12(a5)
80006878:	fec42783          	lw	a5,-20(s0)
8000687c:	00079a63          	bnez	a5,80006890 <osSwTmrStart+0x110>
80006880:	8001e7b7          	lui	a5,0x8001e
80006884:	fdc42703          	lw	a4,-36(s0)
80006888:	24e7a823          	sw	a4,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
8000688c:	0100006f          	j	8000689c <osSwTmrStart+0x11c>
80006890:	fec42783          	lw	a5,-20(s0)
80006894:	fdc42703          	lw	a4,-36(s0)
80006898:	00e7a023          	sw	a4,0(a5)
8000689c:	fdc42783          	lw	a5,-36(s0)
800068a0:	00200713          	li	a4,2
800068a4:	00e78223          	sb	a4,4(a5)
800068a8:	00000013          	nop
800068ac:	02c12403          	lw	s0,44(sp)
800068b0:	03010113          	addi	sp,sp,48
800068b4:	00008067          	ret
800068b8:	0000                	unimp
	...

800068bc <osSwtmrDelete>:
osSwtmrDelete():
800068bc:	fe010113          	addi	sp,sp,-32
800068c0:	00812e23          	sw	s0,28(sp)
800068c4:	02010413          	addi	s0,sp,32
800068c8:	fea42623          	sw	a0,-20(s0)
800068cc:	8001e7b7          	lui	a5,0x8001e
800068d0:	2447a703          	lw	a4,580(a5) # 8001e244 <__stack_top+0xfffdfc44>
800068d4:	fec42783          	lw	a5,-20(s0)
800068d8:	00e7a023          	sw	a4,0(a5)
800068dc:	8001e7b7          	lui	a5,0x8001e
800068e0:	fec42703          	lw	a4,-20(s0)
800068e4:	24e7a223          	sw	a4,580(a5) # 8001e244 <__stack_top+0xfffdfc44>
800068e8:	fec42783          	lw	a5,-20(s0)
800068ec:	00078223          	sb	zero,4(a5)
800068f0:	00000013          	nop
800068f4:	01c12403          	lw	s0,28(sp)
800068f8:	02010113          	addi	sp,sp,32
800068fc:	00008067          	ret
80006900:	0000                	unimp
	...

80006904 <osSwTmrTimeoutHandle>:
osSwTmrTimeoutHandle():
80006904:	fe010113          	addi	sp,sp,-32
80006908:	00112e23          	sw	ra,28(sp)
8000690c:	00812c23          	sw	s0,24(sp)
80006910:	02010413          	addi	s0,sp,32
80006914:	8001e7b7          	lui	a5,0x8001e
80006918:	2507a783          	lw	a5,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
8000691c:	fef42623          	sw	a5,-20(s0)
80006920:	1140006f          	j	80006a34 <osSwTmrTimeoutHandle+0x130>
80006924:	fec42783          	lw	a5,-20(s0)
80006928:	0007a703          	lw	a4,0(a5)
8000692c:	8001e7b7          	lui	a5,0x8001e
80006930:	24e7a823          	sw	a4,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
80006934:	8001e7b7          	lui	a5,0x8001e
80006938:	25478513          	addi	a0,a5,596 # 8001e254 <__stack_top+0xfffdfc54>
8000693c:	cd9fb0ef          	jal	ra,80002614 <LOS_MemboxAlloc>
80006940:	fea42423          	sw	a0,-24(s0)
80006944:	fe842783          	lw	a5,-24(s0)
80006948:	04078c63          	beqz	a5,800069a0 <osSwTmrTimeoutHandle+0x9c>
8000694c:	fec42783          	lw	a5,-20(s0)
80006950:	01c7a703          	lw	a4,28(a5)
80006954:	fe842783          	lw	a5,-24(s0)
80006958:	00e7a023          	sw	a4,0(a5)
8000695c:	fec42783          	lw	a5,-20(s0)
80006960:	0187a703          	lw	a4,24(a5)
80006964:	fe842783          	lw	a5,-24(s0)
80006968:	00e7a223          	sw	a4,4(a5)
8000696c:	8001e7b7          	lui	a5,0x8001e
80006970:	24c7a783          	lw	a5,588(a5) # 8001e24c <__stack_top+0xfffdfc4c>
80006974:	00000693          	li	a3,0
80006978:	00400613          	li	a2,4
8000697c:	fe842583          	lw	a1,-24(s0)
80006980:	00078513          	mv	a0,a5
80006984:	b85fe0ef          	jal	ra,80005508 <LOS_QueueWrite>
80006988:	00050793          	mv	a5,a0
8000698c:	00078a63          	beqz	a5,800069a0 <osSwTmrTimeoutHandle+0x9c>
80006990:	fe842583          	lw	a1,-24(s0)
80006994:	8001e7b7          	lui	a5,0x8001e
80006998:	25478513          	addi	a0,a5,596 # 8001e254 <__stack_top+0xfffdfc54>
8000699c:	d31fb0ef          	jal	ra,800026cc <LOS_MemboxFree>
800069a0:	fec42783          	lw	a5,-20(s0)
800069a4:	0057c783          	lbu	a5,5(a5)
800069a8:	06079063          	bnez	a5,80006a08 <osSwTmrTimeoutHandle+0x104>
800069ac:	fec42503          	lw	a0,-20(s0)
800069b0:	f0dff0ef          	jal	ra,800068bc <osSwtmrDelete>
800069b4:	fec42783          	lw	a5,-20(s0)
800069b8:	0087d703          	lhu	a4,8(a5)
800069bc:	000107b7          	lui	a5,0x10
800069c0:	fdf78793          	addi	a5,a5,-33 # ffdf <OS_TASK_STATUS_NOT_RUNNING+0xfef0>
800069c4:	02e7e263          	bltu	a5,a4,800069e8 <osSwTmrTimeoutHandle+0xe4>
800069c8:	fec42783          	lw	a5,-20(s0)
800069cc:	0087d783          	lhu	a5,8(a5)
800069d0:	01078793          	addi	a5,a5,16
800069d4:	01079713          	slli	a4,a5,0x10
800069d8:	01075713          	srli	a4,a4,0x10
800069dc:	fec42783          	lw	a5,-20(s0)
800069e0:	00e79423          	sh	a4,8(a5)
800069e4:	0440006f          	j	80006a28 <osSwTmrTimeoutHandle+0x124>
800069e8:	fec42783          	lw	a5,-20(s0)
800069ec:	0087d783          	lhu	a5,8(a5)
800069f0:	00f7f793          	andi	a5,a5,15
800069f4:	01079713          	slli	a4,a5,0x10
800069f8:	01075713          	srli	a4,a4,0x10
800069fc:	fec42783          	lw	a5,-20(s0)
80006a00:	00e79423          	sh	a4,8(a5)
80006a04:	0240006f          	j	80006a28 <osSwTmrTimeoutHandle+0x124>
80006a08:	fec42783          	lw	a5,-20(s0)
80006a0c:	0067c783          	lbu	a5,6(a5)
80006a10:	00178793          	addi	a5,a5,1
80006a14:	0ff7f713          	andi	a4,a5,255
80006a18:	fec42783          	lw	a5,-20(s0)
80006a1c:	00e78323          	sb	a4,6(a5)
80006a20:	fec42503          	lw	a0,-20(s0)
80006a24:	d5dff0ef          	jal	ra,80006780 <osSwTmrStart>
80006a28:	8001e7b7          	lui	a5,0x8001e
80006a2c:	2507a783          	lw	a5,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
80006a30:	fef42623          	sw	a5,-20(s0)
80006a34:	fec42783          	lw	a5,-20(s0)
80006a38:	00078863          	beqz	a5,80006a48 <osSwTmrTimeoutHandle+0x144>
80006a3c:	fec42783          	lw	a5,-20(s0)
80006a40:	00c7a783          	lw	a5,12(a5)
80006a44:	ee0780e3          	beqz	a5,80006924 <osSwTmrTimeoutHandle+0x20>
80006a48:	00000013          	nop
80006a4c:	01c12083          	lw	ra,28(sp)
80006a50:	01812403          	lw	s0,24(sp)
80006a54:	02010113          	addi	sp,sp,32
80006a58:	00008067          	ret
80006a5c:	0000                	unimp
	...

80006a60 <osSwtmrScan>:
osSwtmrScan():
80006a60:	ff010113          	addi	sp,sp,-16
80006a64:	00112623          	sw	ra,12(sp)
80006a68:	00812423          	sw	s0,8(sp)
80006a6c:	01010413          	addi	s0,sp,16
80006a70:	8001e7b7          	lui	a5,0x8001e
80006a74:	2507a783          	lw	a5,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
80006a78:	02078263          	beqz	a5,80006a9c <osSwtmrScan+0x3c>
80006a7c:	8001e7b7          	lui	a5,0x8001e
80006a80:	2507a783          	lw	a5,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
80006a84:	00c7a703          	lw	a4,12(a5)
80006a88:	fff70713          	addi	a4,a4,-1
80006a8c:	00e7a623          	sw	a4,12(a5)
80006a90:	00c7a783          	lw	a5,12(a5)
80006a94:	00079463          	bnez	a5,80006a9c <osSwtmrScan+0x3c>
80006a98:	e6dff0ef          	jal	ra,80006904 <osSwTmrTimeoutHandle>
80006a9c:	00000793          	li	a5,0
80006aa0:	00078513          	mv	a0,a5
80006aa4:	00c12083          	lw	ra,12(sp)
80006aa8:	00812403          	lw	s0,8(sp)
80006aac:	01010113          	addi	sp,sp,16
80006ab0:	00008067          	ret
80006ab4:	0000                	unimp
	...

80006ab8 <osSwtmrStop>:
osSwtmrStop():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:364
Input      : pstSwtmr
Output     : None
Return     : None
*****************************************************************************/
LITE_OS_SEC_TEXT VOID osSwtmrStop(SWTMR_CTRL_S *pstSwtmr)
{
80006ab8:	fd010113          	addi	sp,sp,-48
80006abc:	02812623          	sw	s0,44(sp)
80006ac0:	03010413          	addi	s0,sp,48
80006ac4:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:365
    SWTMR_CTRL_S *pstPrev = (SWTMR_CTRL_S *)NULL;
80006ac8:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:366
    SWTMR_CTRL_S *pstCur = (SWTMR_CTRL_S *)NULL;
80006acc:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:368

    pstCur = m_pstSwtmrSortList;
80006ad0:	8001e7b7          	lui	a5,0x8001e
80006ad4:	2507a783          	lw	a5,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
80006ad8:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:370

    while (pstCur != pstSwtmr)
80006adc:	0180006f          	j	80006af4 <osSwtmrStop+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:372
    {
        pstPrev = pstCur;
80006ae0:	fe842783          	lw	a5,-24(s0)
80006ae4:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:373
        pstCur = pstCur->pstNext;
80006ae8:	fe842783          	lw	a5,-24(s0)
80006aec:	0007a783          	lw	a5,0(a5)
80006af0:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:370
    while (pstCur != pstSwtmr)
80006af4:	fe842703          	lw	a4,-24(s0)
80006af8:	fdc42783          	lw	a5,-36(s0)
80006afc:	fef712e3          	bne	a4,a5,80006ae0 <osSwtmrStop+0x28>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:376
    }

    if (pstCur->pstNext != NULL)
80006b00:	fe842783          	lw	a5,-24(s0)
80006b04:	0007a783          	lw	a5,0(a5)
80006b08:	02078463          	beqz	a5,80006b30 <osSwtmrStop+0x78>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:378
    {
        pstCur->pstNext->uwCount += pstCur->uwCount;
80006b0c:	fe842783          	lw	a5,-24(s0)
80006b10:	0007a783          	lw	a5,0(a5)
80006b14:	00c7a683          	lw	a3,12(a5)
80006b18:	fe842783          	lw	a5,-24(s0)
80006b1c:	00c7a703          	lw	a4,12(a5)
80006b20:	fe842783          	lw	a5,-24(s0)
80006b24:	0007a783          	lw	a5,0(a5)
80006b28:	00e68733          	add	a4,a3,a4
80006b2c:	00e7a623          	sw	a4,12(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:381
    }

    if (pstPrev == NULL)
80006b30:	fec42783          	lw	a5,-20(s0)
80006b34:	00079c63          	bnez	a5,80006b4c <osSwtmrStop+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:383
    {
        m_pstSwtmrSortList = pstCur->pstNext;
80006b38:	fe842783          	lw	a5,-24(s0)
80006b3c:	0007a703          	lw	a4,0(a5)
80006b40:	8001e7b7          	lui	a5,0x8001e
80006b44:	24e7a823          	sw	a4,592(a5) # 8001e250 <__stack_top+0xfffdfc50>
80006b48:	0140006f          	j	80006b5c <osSwtmrStop+0xa4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:387
    }
    else
    {
        pstPrev->pstNext = pstCur->pstNext;
80006b4c:	fe842783          	lw	a5,-24(s0)
80006b50:	0007a703          	lw	a4,0(a5)
80006b54:	fec42783          	lw	a5,-20(s0)
80006b58:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:390
    }

    pstCur->pstNext = (SWTMR_CTRL_S *)NULL;
80006b5c:	fe842783          	lw	a5,-24(s0)
80006b60:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:391
    pstCur->ucState = OS_SWTMR_STATUS_CREATED;
80006b64:	fe842783          	lw	a5,-24(s0)
80006b68:	00100713          	li	a4,1
80006b6c:	00e78223          	sb	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:392
    pstCur->ucOverrun = 0;
80006b70:	fe842783          	lw	a5,-24(s0)
80006b74:	00078323          	sb	zero,6(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:393
}
80006b78:	00000013          	nop
80006b7c:	02c12403          	lw	s0,44(sp)
80006b80:	03010113          	addi	sp,sp,48
80006b84:	00008067          	ret
80006b88:	0000                	unimp
	...

80006b8c <LOS_SwtmrCreate>:
LOS_SwtmrCreate():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:410
LITE_OS_SEC_TEXT_INIT UINT32 LOS_SwtmrCreate(UINT32  uwInterval,
                                        UINT8           ucMode,
                                        SWTMR_PROC_FUNC pfnHandler,
                                        UINT16          *pusSwTmrID,
                                        UINT32          uwArg)
{
80006b8c:	fc010113          	addi	sp,sp,-64
80006b90:	02112e23          	sw	ra,60(sp)
80006b94:	02812c23          	sw	s0,56(sp)
80006b98:	04010413          	addi	s0,sp,64
80006b9c:	fca42e23          	sw	a0,-36(s0)
80006ba0:	00058793          	mv	a5,a1
80006ba4:	fcc42a23          	sw	a2,-44(s0)
80006ba8:	fcd42823          	sw	a3,-48(s0)
80006bac:	fce42623          	sw	a4,-52(s0)
80006bb0:	fcf40da3          	sb	a5,-37(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:414
    SWTMR_CTRL_S  *pstSwtmr;
    UINTPTR  uvIntSave;

    if (0 == uwInterval)
80006bb4:	fdc42783          	lw	a5,-36(s0)
80006bb8:	00079863          	bnez	a5,80006bc8 <LOS_SwtmrCreate+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:416
    {
        return LOS_ERRNO_SWTMR_INTERVAL_NOT_SUITED;
80006bbc:	020007b7          	lui	a5,0x2000
80006bc0:	30178793          	addi	a5,a5,769 # 2000301 <RAM_SIZE+0x1f80301>
80006bc4:	10c0006f          	j	80006cd0 <LOS_SwtmrCreate+0x144>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:419
    }

    if ((LOS_SWTMR_MODE_ONCE != ucMode) && (LOS_SWTMR_MODE_PERIOD != ucMode))
80006bc8:	fdb44783          	lbu	a5,-37(s0)
80006bcc:	00078e63          	beqz	a5,80006be8 <LOS_SwtmrCreate+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:419 (discriminator 1)
80006bd0:	fdb44703          	lbu	a4,-37(s0)
80006bd4:	00100793          	li	a5,1
80006bd8:	00f70863          	beq	a4,a5,80006be8 <LOS_SwtmrCreate+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:421
    {
        return LOS_ERRNO_SWTMR_MODE_INVALID;
80006bdc:	020007b7          	lui	a5,0x2000
80006be0:	30278793          	addi	a5,a5,770 # 2000302 <RAM_SIZE+0x1f80302>
80006be4:	0ec0006f          	j	80006cd0 <LOS_SwtmrCreate+0x144>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:424
    }

    if (NULL == pfnHandler)
80006be8:	fd442783          	lw	a5,-44(s0)
80006bec:	00079863          	bnez	a5,80006bfc <LOS_SwtmrCreate+0x70>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:426
    {
        return LOS_ERRNO_SWTMR_PTR_NULL;
80006bf0:	020007b7          	lui	a5,0x2000
80006bf4:	30078793          	addi	a5,a5,768 # 2000300 <RAM_SIZE+0x1f80300>
80006bf8:	0d80006f          	j	80006cd0 <LOS_SwtmrCreate+0x144>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:429
    }

    if (NULL == pusSwTmrID)
80006bfc:	fd042783          	lw	a5,-48(s0)
80006c00:	00079863          	bnez	a5,80006c10 <LOS_SwtmrCreate+0x84>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:431
    {
        return LOS_ERRNO_SWTMR_RET_PTR_NULL;
80006c04:	020007b7          	lui	a5,0x2000
80006c08:	30378793          	addi	a5,a5,771 # 2000303 <RAM_SIZE+0x1f80303>
80006c0c:	0c40006f          	j	80006cd0 <LOS_SwtmrCreate+0x144>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:434
    }

    uvIntSave = LOS_IntLock();
80006c10:	fe9fa0ef          	jal	ra,80001bf8 <LOS_IntLock>
80006c14:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:435
    if (NULL == m_pstSwtmrFreeList)
80006c18:	8001e7b7          	lui	a5,0x8001e
80006c1c:	2447a783          	lw	a5,580(a5) # 8001e244 <__stack_top+0xfffdfc44>
80006c20:	00079c63          	bnez	a5,80006c38 <LOS_SwtmrCreate+0xac>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:437
    {
        LOS_IntRestore(uvIntSave);
80006c24:	fec42503          	lw	a0,-20(s0)
80006c28:	ff1fa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:438
        return LOS_ERRNO_SWTMR_MAXSIZE;
80006c2c:	020007b7          	lui	a5,0x2000
80006c30:	30478793          	addi	a5,a5,772 # 2000304 <RAM_SIZE+0x1f80304>
80006c34:	09c0006f          	j	80006cd0 <LOS_SwtmrCreate+0x144>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:441
    }

    pstSwtmr = m_pstSwtmrFreeList;
80006c38:	8001e7b7          	lui	a5,0x8001e
80006c3c:	2447a783          	lw	a5,580(a5) # 8001e244 <__stack_top+0xfffdfc44>
80006c40:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:442
    m_pstSwtmrFreeList = pstSwtmr->pstNext;
80006c44:	fe842783          	lw	a5,-24(s0)
80006c48:	0007a703          	lw	a4,0(a5)
80006c4c:	8001e7b7          	lui	a5,0x8001e
80006c50:	24e7a223          	sw	a4,580(a5) # 8001e244 <__stack_top+0xfffdfc44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:443
    LOS_IntRestore(uvIntSave);
80006c54:	fec42503          	lw	a0,-20(s0)
80006c58:	fc1fa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:444
    pstSwtmr->pfnHandler    = pfnHandler;
80006c5c:	fe842783          	lw	a5,-24(s0)
80006c60:	fd442703          	lw	a4,-44(s0)
80006c64:	00e7ae23          	sw	a4,28(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:445
    pstSwtmr->ucMode        = ucMode;
80006c68:	fe842783          	lw	a5,-24(s0)
80006c6c:	fdb44703          	lbu	a4,-37(s0)
80006c70:	00e782a3          	sb	a4,5(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:446
    pstSwtmr->ucOverrun     = 0;
80006c74:	fe842783          	lw	a5,-24(s0)
80006c78:	00078323          	sb	zero,6(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:447
    pstSwtmr->uwInterval    = uwInterval;
80006c7c:	fe842783          	lw	a5,-24(s0)
80006c80:	fdc42703          	lw	a4,-36(s0)
80006c84:	00e7a823          	sw	a4,16(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:448
    pstSwtmr->uwExpiry      = uwInterval;
80006c88:	fe842783          	lw	a5,-24(s0)
80006c8c:	fdc42703          	lw	a4,-36(s0)
80006c90:	00e7aa23          	sw	a4,20(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:449
    pstSwtmr->pstNext       = (SWTMR_CTRL_S *)NULL;
80006c94:	fe842783          	lw	a5,-24(s0)
80006c98:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:450
    pstSwtmr->uwCount       = 0;
80006c9c:	fe842783          	lw	a5,-24(s0)
80006ca0:	0007a623          	sw	zero,12(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:451
    pstSwtmr->uwArg         = uwArg;
80006ca4:	fe842783          	lw	a5,-24(s0)
80006ca8:	fcc42703          	lw	a4,-52(s0)
80006cac:	00e7ac23          	sw	a4,24(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:452
    pstSwtmr->ucState       = OS_SWTMR_STATUS_CREATED;
80006cb0:	fe842783          	lw	a5,-24(s0)
80006cb4:	00100713          	li	a4,1
80006cb8:	00e78223          	sb	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:453
    *pusSwTmrID = pstSwtmr->usTimerID;
80006cbc:	fe842783          	lw	a5,-24(s0)
80006cc0:	0087d703          	lhu	a4,8(a5)
80006cc4:	fd042783          	lw	a5,-48(s0)
80006cc8:	00e79023          	sh	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:455

    return LOS_OK;
80006ccc:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:456
}
80006cd0:	00078513          	mv	a0,a5
80006cd4:	03c12083          	lw	ra,60(sp)
80006cd8:	03812403          	lw	s0,56(sp)
80006cdc:	04010113          	addi	sp,sp,64
80006ce0:	00008067          	ret
80006ce4:	0000                	unimp
	...

80006ce8 <LOS_SwtmrStart>:
LOS_SwtmrStart():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:466
Input      : usSwTmrID ------- Software timer ID
Output     : None
Return     : LOS_OK on success or error code on failure
*****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_SwtmrStart(UINT16 usSwTmrID)
{
80006ce8:	fd010113          	addi	sp,sp,-48
80006cec:	02112623          	sw	ra,44(sp)
80006cf0:	02812423          	sw	s0,40(sp)
80006cf4:	03010413          	addi	s0,sp,48
80006cf8:	00050793          	mv	a5,a0
80006cfc:	fcf41f23          	sh	a5,-34(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:469
    SWTMR_CTRL_S  *pstSwtmr;
    UINTPTR  uvIntSave;
    UINT32 uwRet = LOS_OK;
80006d00:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:472
    UINT16 usSwTmrCBID;

    if (usSwTmrID >= OS_SWTMR_MAX_TIMERID)
80006d04:	fde45703          	lhu	a4,-34(s0)
80006d08:	000107b7          	lui	a5,0x10
80006d0c:	fef78793          	addi	a5,a5,-17 # ffef <OS_TASK_STATUS_NOT_RUNNING+0xff00>
80006d10:	00e7f863          	bleu	a4,a5,80006d20 <LOS_SwtmrStart+0x38>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:474
    {
        return LOS_ERRNO_SWTMR_ID_INVALID;
80006d14:	020007b7          	lui	a5,0x2000
80006d18:	30578793          	addi	a5,a5,773 # 2000305 <RAM_SIZE+0x1f80305>
80006d1c:	0b00006f          	j	80006dcc <LOS_SwtmrStart+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:477
    }

    uvIntSave = LOS_IntLock();
80006d20:	ed9fa0ef          	jal	ra,80001bf8 <LOS_IntLock>
80006d24:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:478
    usSwTmrCBID = usSwTmrID % LOSCFG_BASE_CORE_SWTMR_LIMIT;
80006d28:	fde45783          	lhu	a5,-34(s0)
80006d2c:	00f7f793          	andi	a5,a5,15
80006d30:	fef41323          	sh	a5,-26(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:479
    pstSwtmr = m_pstSwtmrCBArray + usSwTmrCBID;
80006d34:	8001e7b7          	lui	a5,0x8001e
80006d38:	2487a703          	lw	a4,584(a5) # 8001e248 <__stack_top+0xfffdfc48>
80006d3c:	fe645783          	lhu	a5,-26(s0)
80006d40:	00579793          	slli	a5,a5,0x5
80006d44:	00f707b3          	add	a5,a4,a5
80006d48:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:481

    if (pstSwtmr->usTimerID != usSwTmrID)
80006d4c:	fe042783          	lw	a5,-32(s0)
80006d50:	0087d783          	lhu	a5,8(a5)
80006d54:	fde45703          	lhu	a4,-34(s0)
80006d58:	00f70c63          	beq	a4,a5,80006d70 <LOS_SwtmrStart+0x88>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:483
    {
        LOS_IntRestore(uvIntSave);
80006d5c:	fe842503          	lw	a0,-24(s0)
80006d60:	eb9fa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:484
        return LOS_ERRNO_SWTMR_ID_INVALID;
80006d64:	020007b7          	lui	a5,0x2000
80006d68:	30578793          	addi	a5,a5,773 # 2000305 <RAM_SIZE+0x1f80305>
80006d6c:	0600006f          	j	80006dcc <LOS_SwtmrStart+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:487
    }

    switch (pstSwtmr->ucState)
80006d70:	fe042783          	lw	a5,-32(s0)
80006d74:	0047c783          	lbu	a5,4(a5)
80006d78:	00100713          	li	a4,1
80006d7c:	02e78463          	beq	a5,a4,80006da4 <LOS_SwtmrStart+0xbc>
80006d80:	00200713          	li	a4,2
80006d84:	00e78c63          	beq	a5,a4,80006d9c <LOS_SwtmrStart+0xb4>
80006d88:	02079463          	bnez	a5,80006db0 <LOS_SwtmrStart+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:490
    {
    case OS_SWTMR_STATUS_UNUSED:
        uwRet = LOS_ERRNO_SWTMR_NOT_CREATED;
80006d8c:	020007b7          	lui	a5,0x2000
80006d90:	30678793          	addi	a5,a5,774 # 2000306 <RAM_SIZE+0x1f80306>
80006d94:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:491
        break;
80006d98:	0280006f          	j	80006dc0 <LOS_SwtmrStart+0xd8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:493
    case OS_SWTMR_STATUS_TICKING:
        osSwtmrStop(pstSwtmr);
80006d9c:	fe042503          	lw	a0,-32(s0)
80006da0:	d19ff0ef          	jal	ra,80006ab8 <osSwtmrStop>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:495
    case OS_SWTMR_STATUS_CREATED: /*lint !e616*/
        osSwTmrStart(pstSwtmr);
80006da4:	fe042503          	lw	a0,-32(s0)
80006da8:	9d9ff0ef          	jal	ra,80006780 <osSwTmrStart>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:496
        break;
80006dac:	0140006f          	j	80006dc0 <LOS_SwtmrStart+0xd8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:498
    default:
        uwRet = LOS_ERRNO_SWTMR_STATUS_INVALID;
80006db0:	020007b7          	lui	a5,0x2000
80006db4:	30e78793          	addi	a5,a5,782 # 200030e <RAM_SIZE+0x1f8030e>
80006db8:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:499
        break;
80006dbc:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:502
    }

    LOS_IntRestore(uvIntSave);
80006dc0:	fe842503          	lw	a0,-24(s0)
80006dc4:	e55fa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:503
    return uwRet;
80006dc8:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:504
}
80006dcc:	00078513          	mv	a0,a5
80006dd0:	02c12083          	lw	ra,44(sp)
80006dd4:	02812403          	lw	s0,40(sp)
80006dd8:	03010113          	addi	sp,sp,48
80006ddc:	00008067          	ret
80006de0:	0000                	unimp
	...

80006de4 <LOS_SwtmrStop>:
LOS_SwtmrStop():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:514
Input      : usSwTmrID ------- Software timer ID
Output     : None
Return     : LOS_OK on success or error code on failure
*****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_SwtmrStop(UINT16 usSwTmrID)
{
80006de4:	fd010113          	addi	sp,sp,-48
80006de8:	02112623          	sw	ra,44(sp)
80006dec:	02812423          	sw	s0,40(sp)
80006df0:	03010413          	addi	s0,sp,48
80006df4:	00050793          	mv	a5,a0
80006df8:	fcf41f23          	sh	a5,-34(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:517
    SWTMR_CTRL_S *pstSwtmr;
    UINTPTR uvIntSave;
    UINT32 uwRet = LOS_OK;
80006dfc:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:520
    UINT16 usSwTmrCBID;

    if (usSwTmrID >= OS_SWTMR_MAX_TIMERID)
80006e00:	fde45703          	lhu	a4,-34(s0)
80006e04:	000107b7          	lui	a5,0x10
80006e08:	fef78793          	addi	a5,a5,-17 # ffef <OS_TASK_STATUS_NOT_RUNNING+0xff00>
80006e0c:	00e7f863          	bleu	a4,a5,80006e1c <LOS_SwtmrStop+0x38>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:522
    {
        return LOS_ERRNO_SWTMR_ID_INVALID;
80006e10:	020007b7          	lui	a5,0x2000
80006e14:	30578793          	addi	a5,a5,773 # 2000305 <RAM_SIZE+0x1f80305>
80006e18:	0b80006f          	j	80006ed0 <LOS_SwtmrStop+0xec>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:525
    }

    uvIntSave = LOS_IntLock();
80006e1c:	dddfa0ef          	jal	ra,80001bf8 <LOS_IntLock>
80006e20:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:526
    usSwTmrCBID = usSwTmrID % LOSCFG_BASE_CORE_SWTMR_LIMIT;
80006e24:	fde45783          	lhu	a5,-34(s0)
80006e28:	00f7f793          	andi	a5,a5,15
80006e2c:	fef41323          	sh	a5,-26(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:527
    pstSwtmr = m_pstSwtmrCBArray + usSwTmrCBID;
80006e30:	8001e7b7          	lui	a5,0x8001e
80006e34:	2487a703          	lw	a4,584(a5) # 8001e248 <__stack_top+0xfffdfc48>
80006e38:	fe645783          	lhu	a5,-26(s0)
80006e3c:	00579793          	slli	a5,a5,0x5
80006e40:	00f707b3          	add	a5,a4,a5
80006e44:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:529

    if (pstSwtmr->usTimerID != usSwTmrID)
80006e48:	fe042783          	lw	a5,-32(s0)
80006e4c:	0087d783          	lhu	a5,8(a5)
80006e50:	fde45703          	lhu	a4,-34(s0)
80006e54:	00f70c63          	beq	a4,a5,80006e6c <LOS_SwtmrStop+0x88>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:531
    {
        LOS_IntRestore(uvIntSave);
80006e58:	fe842503          	lw	a0,-24(s0)
80006e5c:	dbdfa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:532
        return LOS_ERRNO_SWTMR_ID_INVALID;
80006e60:	020007b7          	lui	a5,0x2000
80006e64:	30578793          	addi	a5,a5,773 # 2000305 <RAM_SIZE+0x1f80305>
80006e68:	0680006f          	j	80006ed0 <LOS_SwtmrStop+0xec>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:535
    }

    switch (pstSwtmr->ucState)
80006e6c:	fe042783          	lw	a5,-32(s0)
80006e70:	0047c783          	lbu	a5,4(a5)
80006e74:	00100713          	li	a4,1
80006e78:	02e78063          	beq	a5,a4,80006e98 <LOS_SwtmrStop+0xb4>
80006e7c:	00200713          	li	a4,2
80006e80:	02e78463          	beq	a5,a4,80006ea8 <LOS_SwtmrStop+0xc4>
80006e84:	02079863          	bnez	a5,80006eb4 <LOS_SwtmrStop+0xd0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:538
    {
    case OS_SWTMR_STATUS_UNUSED:
        uwRet = LOS_ERRNO_SWTMR_NOT_CREATED;
80006e88:	020007b7          	lui	a5,0x2000
80006e8c:	30678793          	addi	a5,a5,774 # 2000306 <RAM_SIZE+0x1f80306>
80006e90:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:539
        break;
80006e94:	0300006f          	j	80006ec4 <LOS_SwtmrStop+0xe0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:541
    case OS_SWTMR_STATUS_CREATED:
        uwRet = LOS_ERRNO_SWTMR_NOT_STARTED;
80006e98:	020007b7          	lui	a5,0x2000
80006e9c:	30d78793          	addi	a5,a5,781 # 200030d <RAM_SIZE+0x1f8030d>
80006ea0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:542
        break;
80006ea4:	0200006f          	j	80006ec4 <LOS_SwtmrStop+0xe0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:544
    case OS_SWTMR_STATUS_TICKING:
        osSwtmrStop(pstSwtmr);
80006ea8:	fe042503          	lw	a0,-32(s0)
80006eac:	c0dff0ef          	jal	ra,80006ab8 <osSwtmrStop>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:545
        break;
80006eb0:	0140006f          	j	80006ec4 <LOS_SwtmrStop+0xe0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:547
    default:
        uwRet = LOS_ERRNO_SWTMR_STATUS_INVALID;
80006eb4:	020007b7          	lui	a5,0x2000
80006eb8:	30e78793          	addi	a5,a5,782 # 200030e <RAM_SIZE+0x1f8030e>
80006ebc:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:548
        break;
80006ec0:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:551
    }

    LOS_IntRestore(uvIntSave);
80006ec4:	fe842503          	lw	a0,-24(s0)
80006ec8:	d51fa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:552
    return uwRet;
80006ecc:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:553
}
80006ed0:	00078513          	mv	a0,a5
80006ed4:	02c12083          	lw	ra,44(sp)
80006ed8:	02812403          	lw	s0,40(sp)
80006edc:	03010113          	addi	sp,sp,48
80006ee0:	00008067          	ret
80006ee4:	0000                	unimp
	...

80006ee8 <LOS_SwtmrDelete>:
LOS_SwtmrDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:563
Input      : usSwTmrID ------- Software timer ID
Output     : None
Return     : LOS_OK on success or error code on failure
*****************************************************************************/
LITE_OS_SEC_TEXT UINT32 LOS_SwtmrDelete(UINT16 usSwTmrID)
{
80006ee8:	fd010113          	addi	sp,sp,-48
80006eec:	02112623          	sw	ra,44(sp)
80006ef0:	02812423          	sw	s0,40(sp)
80006ef4:	03010413          	addi	s0,sp,48
80006ef8:	00050793          	mv	a5,a0
80006efc:	fcf41f23          	sh	a5,-34(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:566
    SWTMR_CTRL_S  *pstSwtmr;
    UINTPTR  uvIntSave;
    UINT32 uwRet = LOS_OK;
80006f00:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:569
    UINT16 usSwTmrCBID;

    if (usSwTmrID >= OS_SWTMR_MAX_TIMERID)
80006f04:	fde45703          	lhu	a4,-34(s0)
80006f08:	000107b7          	lui	a5,0x10
80006f0c:	fef78793          	addi	a5,a5,-17 # ffef <OS_TASK_STATUS_NOT_RUNNING+0xff00>
80006f10:	00e7f863          	bleu	a4,a5,80006f20 <LOS_SwtmrDelete+0x38>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:571
    {
        return LOS_ERRNO_SWTMR_ID_INVALID;
80006f14:	020007b7          	lui	a5,0x2000
80006f18:	30578793          	addi	a5,a5,773 # 2000305 <RAM_SIZE+0x1f80305>
80006f1c:	0b00006f          	j	80006fcc <LOS_SwtmrDelete+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:574
    }

    uvIntSave = LOS_IntLock();
80006f20:	cd9fa0ef          	jal	ra,80001bf8 <LOS_IntLock>
80006f24:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:575
    usSwTmrCBID = usSwTmrID % LOSCFG_BASE_CORE_SWTMR_LIMIT;
80006f28:	fde45783          	lhu	a5,-34(s0)
80006f2c:	00f7f793          	andi	a5,a5,15
80006f30:	fef41323          	sh	a5,-26(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:576
    pstSwtmr = m_pstSwtmrCBArray + usSwTmrCBID;
80006f34:	8001e7b7          	lui	a5,0x8001e
80006f38:	2487a703          	lw	a4,584(a5) # 8001e248 <__stack_top+0xfffdfc48>
80006f3c:	fe645783          	lhu	a5,-26(s0)
80006f40:	00579793          	slli	a5,a5,0x5
80006f44:	00f707b3          	add	a5,a4,a5
80006f48:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:578

    if (pstSwtmr->usTimerID != usSwTmrID)
80006f4c:	fe042783          	lw	a5,-32(s0)
80006f50:	0087d783          	lhu	a5,8(a5)
80006f54:	fde45703          	lhu	a4,-34(s0)
80006f58:	00f70c63          	beq	a4,a5,80006f70 <LOS_SwtmrDelete+0x88>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:580
    {
        LOS_IntRestore(uvIntSave);
80006f5c:	fe842503          	lw	a0,-24(s0)
80006f60:	cb9fa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:581
        return LOS_ERRNO_SWTMR_ID_INVALID;
80006f64:	020007b7          	lui	a5,0x2000
80006f68:	30578793          	addi	a5,a5,773 # 2000305 <RAM_SIZE+0x1f80305>
80006f6c:	0600006f          	j	80006fcc <LOS_SwtmrDelete+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:584
    }

    switch (pstSwtmr->ucState)
80006f70:	fe042783          	lw	a5,-32(s0)
80006f74:	0047c783          	lbu	a5,4(a5)
80006f78:	00100713          	li	a4,1
80006f7c:	02e78463          	beq	a5,a4,80006fa4 <LOS_SwtmrDelete+0xbc>
80006f80:	00200713          	li	a4,2
80006f84:	00e78c63          	beq	a5,a4,80006f9c <LOS_SwtmrDelete+0xb4>
80006f88:	02079463          	bnez	a5,80006fb0 <LOS_SwtmrDelete+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:587
    {
    case OS_SWTMR_STATUS_UNUSED:
        uwRet = LOS_ERRNO_SWTMR_NOT_CREATED;
80006f8c:	020007b7          	lui	a5,0x2000
80006f90:	30678793          	addi	a5,a5,774 # 2000306 <RAM_SIZE+0x1f80306>
80006f94:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:588
        break;
80006f98:	0280006f          	j	80006fc0 <LOS_SwtmrDelete+0xd8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:590
    case OS_SWTMR_STATUS_TICKING:
        osSwtmrStop(pstSwtmr);
80006f9c:	fe042503          	lw	a0,-32(s0)
80006fa0:	b19ff0ef          	jal	ra,80006ab8 <osSwtmrStop>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:592
    case OS_SWTMR_STATUS_CREATED:  /*lint !e616*/
        osSwtmrDelete(pstSwtmr);
80006fa4:	fe042503          	lw	a0,-32(s0)
80006fa8:	915ff0ef          	jal	ra,800068bc <osSwtmrDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:593
        break;
80006fac:	0140006f          	j	80006fc0 <LOS_SwtmrDelete+0xd8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:595
    default:
        uwRet = LOS_ERRNO_SWTMR_STATUS_INVALID;
80006fb0:	020007b7          	lui	a5,0x2000
80006fb4:	30e78793          	addi	a5,a5,782 # 200030e <RAM_SIZE+0x1f8030e>
80006fb8:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:596
        break;
80006fbc:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:599
    }

    LOS_IntRestore(uvIntSave);
80006fc0:	fe842503          	lw	a0,-24(s0)
80006fc4:	c55fa0ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:600
    return uwRet;
80006fc8:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_swtmr.c:601
}
80006fcc:	00078513          	mv	a0,a5
80006fd0:	02c12083          	lw	ra,44(sp)
80006fd4:	02812403          	lw	s0,40(sp)
80006fd8:	03010113          	addi	sp,sp,48
80006fdc:	00008067          	ret
80006fe0:	0000                	unimp
	...

80006fe4 <LOS_TickCountGet>:
LOS_TickCountGet():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_sys.c:68
Input      : None
Output     : None
Return     : current tick
*****************************************************************************/
LITE_OS_SEC_TEXT_MINOR UINT64 LOS_TickCountGet (VOID)
{
80006fe4:	ff010113          	addi	sp,sp,-16
80006fe8:	00812623          	sw	s0,12(sp)
80006fec:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_sys.c:69
    return g_ullTickCount;
80006ff0:	8001e7b7          	lui	a5,0x8001e
80006ff4:	36878793          	addi	a5,a5,872 # 8001e368 <__stack_top+0xfffdfd68>
80006ff8:	0047a803          	lw	a6,4(a5)
80006ffc:	0007a783          	lw	a5,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_sys.c:70
}
80007000:	00078513          	mv	a0,a5
80007004:	00080593          	mv	a1,a6
80007008:	00c12403          	lw	s0,12(sp)
8000700c:	01010113          	addi	sp,sp,16
80007010:	00008067          	ret
80007014:	0000                	unimp
	...

80007018 <LOS_CyclePerTickGet>:
LOS_CyclePerTickGet():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_sys.c:80
Input      : None
Output     : None
Return     : cycle number corresponding to each tick
*****************************************************************************/
LITE_OS_SEC_TEXT_MINOR UINT32 LOS_CyclePerTickGet(VOID)
{
80007018:	ff010113          	addi	sp,sp,-16
8000701c:	00812623          	sw	s0,12(sp)
80007020:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_sys.c:81
    return OS_SYS_CLOCK / LOSCFG_BASE_CORE_TICK_PER_SECOND;/*lint !e160*/
80007024:	000147b7          	lui	a5,0x14
80007028:	43878793          	addi	a5,a5,1080 # 14438 <HEAP_SIZE+0x4438>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_sys.c:82
}
8000702c:	00078513          	mv	a0,a5
80007030:	00c12403          	lw	s0,12(sp)
80007034:	01010113          	addi	sp,sp,16
80007038:	00008067          	ret
8000703c:	0000                	unimp
	...

80007040 <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:988
LITE_OS_SEC_TEXT_MINOR UINT32 LOS_CurTaskPriSet(UINT16 usTaskPrio)
{
    UINT32 uwRet;
    uwRet = LOS_TaskPriSet(g_stLosTask.pstRunTask->uwTaskID, usTaskPrio);
    return uwRet;
}
80007040:	fe010113          	addi	sp,sp,-32
80007044:	00812e23          	sw	s0,28(sp)
80007048:	02010413          	addi	s0,sp,32
8000704c:	fea42623          	sw	a0,-20(s0)
80007050:	fec42783          	lw	a5,-20(s0)
80007054:	fec42703          	lw	a4,-20(s0)
80007058:	00e7a223          	sw	a4,4(a5)
8000705c:	fec42783          	lw	a5,-20(s0)
80007060:	fec42703          	lw	a4,-20(s0)
80007064:	00e7a023          	sw	a4,0(a5)
80007068:	00000013          	nop
8000706c:	01c12403          	lw	s0,28(sp)
80007070:	02010113          	addi	sp,sp,32
80007074:	00008067          	ret
80007078:	0000                	unimp
	...

8000707c <LOS_ListAdd>:
LOS_ListAdd():
8000707c:	fe010113          	addi	sp,sp,-32
80007080:	00812e23          	sw	s0,28(sp)
80007084:	02010413          	addi	s0,sp,32
80007088:	fea42623          	sw	a0,-20(s0)
8000708c:	feb42423          	sw	a1,-24(s0)
80007090:	fec42783          	lw	a5,-20(s0)
80007094:	0047a703          	lw	a4,4(a5)
80007098:	fe842783          	lw	a5,-24(s0)
8000709c:	00e7a223          	sw	a4,4(a5)
800070a0:	fe842783          	lw	a5,-24(s0)
800070a4:	fec42703          	lw	a4,-20(s0)
800070a8:	00e7a023          	sw	a4,0(a5)
800070ac:	fec42783          	lw	a5,-20(s0)
800070b0:	0047a783          	lw	a5,4(a5)
800070b4:	fe842703          	lw	a4,-24(s0)
800070b8:	00e7a023          	sw	a4,0(a5)
800070bc:	fec42783          	lw	a5,-20(s0)
800070c0:	fe842703          	lw	a4,-24(s0)
800070c4:	00e7a223          	sw	a4,4(a5)
800070c8:	00000013          	nop
800070cc:	01c12403          	lw	s0,28(sp)
800070d0:	02010113          	addi	sp,sp,32
800070d4:	00008067          	ret
800070d8:	0000                	unimp
	...

800070dc <LOS_ListTailInsert>:
LOS_ListTailInsert():
800070dc:	fe010113          	addi	sp,sp,-32
800070e0:	00112e23          	sw	ra,28(sp)
800070e4:	00812c23          	sw	s0,24(sp)
800070e8:	02010413          	addi	s0,sp,32
800070ec:	fea42623          	sw	a0,-20(s0)
800070f0:	feb42423          	sw	a1,-24(s0)
800070f4:	fec42783          	lw	a5,-20(s0)
800070f8:	0007a783          	lw	a5,0(a5)
800070fc:	fe842583          	lw	a1,-24(s0)
80007100:	00078513          	mv	a0,a5
80007104:	f79ff0ef          	jal	ra,8000707c <LOS_ListAdd>
80007108:	00000013          	nop
8000710c:	01c12083          	lw	ra,28(sp)
80007110:	01812403          	lw	s0,24(sp)
80007114:	02010113          	addi	sp,sp,32
80007118:	00008067          	ret
8000711c:	0000                	unimp
	...

80007120 <LOS_ListDelete>:
LOS_ListDelete():
80007120:	fe010113          	addi	sp,sp,-32
80007124:	00812e23          	sw	s0,28(sp)
80007128:	02010413          	addi	s0,sp,32
8000712c:	fea42623          	sw	a0,-20(s0)
80007130:	fec42783          	lw	a5,-20(s0)
80007134:	0047a783          	lw	a5,4(a5)
80007138:	fec42703          	lw	a4,-20(s0)
8000713c:	00072703          	lw	a4,0(a4)
80007140:	00e7a023          	sw	a4,0(a5)
80007144:	fec42783          	lw	a5,-20(s0)
80007148:	0007a783          	lw	a5,0(a5)
8000714c:	fec42703          	lw	a4,-20(s0)
80007150:	00472703          	lw	a4,4(a4)
80007154:	00e7a223          	sw	a4,4(a5)
80007158:	fec42783          	lw	a5,-20(s0)
8000715c:	0007a223          	sw	zero,4(a5)
80007160:	fec42783          	lw	a5,-20(s0)
80007164:	0007a023          	sw	zero,0(a5)
80007168:	00000013          	nop
8000716c:	01c12403          	lw	s0,28(sp)
80007170:	02010113          	addi	sp,sp,32
80007174:	00008067          	ret
80007178:	0000                	unimp
	...

8000717c <LOS_ListEmpty>:
LOS_ListEmpty():
8000717c:	fe010113          	addi	sp,sp,-32
80007180:	00812e23          	sw	s0,28(sp)
80007184:	02010413          	addi	s0,sp,32
80007188:	fea42623          	sw	a0,-20(s0)
8000718c:	fec42783          	lw	a5,-20(s0)
80007190:	0047a783          	lw	a5,4(a5)
80007194:	fec42703          	lw	a4,-20(s0)
80007198:	40f707b3          	sub	a5,a4,a5
8000719c:	0017b793          	seqz	a5,a5
800071a0:	0ff7f793          	andi	a5,a5,255
800071a4:	00078513          	mv	a0,a5
800071a8:	01c12403          	lw	s0,28(sp)
800071ac:	02010113          	addi	sp,sp,32
800071b0:	00008067          	ret
800071b4:	0000                	unimp
	...

800071b8 <osIdleTask>:
osIdleTask():
800071b8:	ff010113          	addi	sp,sp,-16
800071bc:	00812623          	sw	s0,12(sp)
800071c0:	01010413          	addi	s0,sp,16
800071c4:	0000006f          	j	800071c4 <osIdleTask+0xc>
800071c8:	0000                	unimp
	...

800071cc <osTaskPriModify>:
osTaskPriModify():
800071cc:	fe010113          	addi	sp,sp,-32
800071d0:	00112e23          	sw	ra,28(sp)
800071d4:	00812c23          	sw	s0,24(sp)
800071d8:	02010413          	addi	s0,sp,32
800071dc:	fea42623          	sw	a0,-20(s0)
800071e0:	00058793          	mv	a5,a1
800071e4:	fef41523          	sh	a5,-22(s0)
800071e8:	fec42783          	lw	a5,-20(s0)
800071ec:	0047d783          	lhu	a5,4(a5)
800071f0:	0047f793          	andi	a5,a5,4
800071f4:	06078c63          	beqz	a5,8000726c <osTaskPriModify+0xa0>
800071f8:	fec42783          	lw	a5,-20(s0)
800071fc:	03c78793          	addi	a5,a5,60
80007200:	00078513          	mv	a0,a5
80007204:	9a8ff0ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80007208:	fec42783          	lw	a5,-20(s0)
8000720c:	0047d783          	lhu	a5,4(a5)
80007210:	ffb7f793          	andi	a5,a5,-5
80007214:	01079713          	slli	a4,a5,0x10
80007218:	01075713          	srli	a4,a4,0x10
8000721c:	fec42783          	lw	a5,-20(s0)
80007220:	00e79223          	sh	a4,4(a5)
80007224:	fec42783          	lw	a5,-20(s0)
80007228:	fea45703          	lhu	a4,-22(s0)
8000722c:	00e79323          	sh	a4,6(a5)
80007230:	fec42783          	lw	a5,-20(s0)
80007234:	0047d783          	lhu	a5,4(a5)
80007238:	0047e793          	ori	a5,a5,4
8000723c:	01079713          	slli	a4,a5,0x10
80007240:	01075713          	srli	a4,a4,0x10
80007244:	fec42783          	lw	a5,-20(s0)
80007248:	00e79223          	sh	a4,4(a5)
8000724c:	fec42783          	lw	a5,-20(s0)
80007250:	03c78713          	addi	a4,a5,60
80007254:	fec42783          	lw	a5,-20(s0)
80007258:	0067d783          	lhu	a5,6(a5)
8000725c:	00078593          	mv	a1,a5
80007260:	00070513          	mv	a0,a4
80007264:	8f8ff0ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
80007268:	0100006f          	j	80007278 <osTaskPriModify+0xac>
8000726c:	fec42783          	lw	a5,-20(s0)
80007270:	fea45703          	lhu	a4,-22(s0)
80007274:	00e79323          	sh	a4,6(a5)
80007278:	00000013          	nop
8000727c:	01c12083          	lw	ra,28(sp)
80007280:	01812403          	lw	s0,24(sp)
80007284:	02010113          	addi	sp,sp,32
80007288:	00008067          	ret
8000728c:	0000                	unimp
	...

80007290 <osTaskAdd2TimerList>:
osTaskAdd2TimerList():
80007290:	fd010113          	addi	sp,sp,-48
80007294:	02112623          	sw	ra,44(sp)
80007298:	02812423          	sw	s0,40(sp)
8000729c:	03010413          	addi	s0,sp,48
800072a0:	fca42e23          	sw	a0,-36(s0)
800072a4:	fcb42c23          	sw	a1,-40(s0)
800072a8:	fd842783          	lw	a5,-40(s0)
800072ac:	01f7f793          	andi	a5,a5,31
800072b0:	fef42223          	sw	a5,-28(s0)
800072b4:	fd842783          	lw	a5,-40(s0)
800072b8:	0057d793          	srli	a5,a5,0x5
800072bc:	fef42423          	sw	a5,-24(s0)
800072c0:	fe442783          	lw	a5,-28(s0)
800072c4:	00079863          	bnez	a5,800072d4 <osTaskAdd2TimerList+0x44>
800072c8:	fe842783          	lw	a5,-24(s0)
800072cc:	fff78793          	addi	a5,a5,-1
800072d0:	fef42423          	sw	a5,-24(s0)
800072d4:	fdc42783          	lw	a5,-36(s0)
800072d8:	04c7a703          	lw	a4,76(a5)
800072dc:	f80007b7          	lui	a5,0xf8000
800072e0:	00f77733          	and	a4,a4,a5
800072e4:	fe842783          	lw	a5,-24(s0)
800072e8:	00f76733          	or	a4,a4,a5
800072ec:	fdc42783          	lw	a5,-36(s0)
800072f0:	04e7a623          	sw	a4,76(a5) # f800004c <__stack_top+0x77fc1a4c>
800072f4:	8001e7b7          	lui	a5,0x8001e
800072f8:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
800072fc:	0047d783          	lhu	a5,4(a5)
80007300:	00078713          	mv	a4,a5
80007304:	fe442783          	lw	a5,-28(s0)
80007308:	00e787b3          	add	a5,a5,a4
8000730c:	fef42223          	sw	a5,-28(s0)
80007310:	fe442783          	lw	a5,-28(s0)
80007314:	01f7f793          	andi	a5,a5,31
80007318:	fef42223          	sw	a5,-28(s0)
8000731c:	fdc42783          	lw	a5,-36(s0)
80007320:	04c7a703          	lw	a4,76(a5)
80007324:	080007b7          	lui	a5,0x8000
80007328:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
8000732c:	00f77733          	and	a4,a4,a5
80007330:	fe442783          	lw	a5,-28(s0)
80007334:	01b79793          	slli	a5,a5,0x1b
80007338:	00f76733          	or	a4,a4,a5
8000733c:	fdc42783          	lw	a5,-36(s0)
80007340:	04e7a623          	sw	a4,76(a5)
80007344:	8001e7b7          	lui	a5,0x8001e
80007348:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
8000734c:	0007a703          	lw	a4,0(a5)
80007350:	fe442783          	lw	a5,-28(s0)
80007354:	00379793          	slli	a5,a5,0x3
80007358:	00f707b3          	add	a5,a4,a5
8000735c:	fef42023          	sw	a5,-32(s0)
80007360:	fe042783          	lw	a5,-32(s0)
80007364:	0047a783          	lw	a5,4(a5)
80007368:	fe042703          	lw	a4,-32(s0)
8000736c:	00f71e63          	bne	a4,a5,80007388 <osTaskAdd2TimerList+0xf8>
80007370:	fdc42783          	lw	a5,-36(s0)
80007374:	04478793          	addi	a5,a5,68
80007378:	00078593          	mv	a1,a5
8000737c:	fe042503          	lw	a0,-32(s0)
80007380:	d5dff0ef          	jal	ra,800070dc <LOS_ListTailInsert>
80007384:	1140006f          	j	80007498 <osTaskAdd2TimerList+0x208>
80007388:	fe042783          	lw	a5,-32(s0)
8000738c:	0047a783          	lw	a5,4(a5)
80007390:	fbc78793          	addi	a5,a5,-68
80007394:	fef42623          	sw	a5,-20(s0)
80007398:	fec42783          	lw	a5,-20(s0)
8000739c:	04c7a703          	lw	a4,76(a5)
800073a0:	080007b7          	lui	a5,0x8000
800073a4:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
800073a8:	00f77733          	and	a4,a4,a5
800073ac:	fdc42783          	lw	a5,-36(s0)
800073b0:	04c7a683          	lw	a3,76(a5)
800073b4:	080007b7          	lui	a5,0x8000
800073b8:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
800073bc:	00f6f7b3          	and	a5,a3,a5
800073c0:	04e7e863          	bltu	a5,a4,80007410 <osTaskAdd2TimerList+0x180>
800073c4:	fdc42783          	lw	a5,-36(s0)
800073c8:	04c7a703          	lw	a4,76(a5)
800073cc:	f80007b7          	lui	a5,0xf8000
800073d0:	00f77733          	and	a4,a4,a5
800073d4:	fdc42783          	lw	a5,-36(s0)
800073d8:	04c7a683          	lw	a3,76(a5) # f800004c <__stack_top+0x77fc1a4c>
800073dc:	080007b7          	lui	a5,0x8000
800073e0:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
800073e4:	00f6f6b3          	and	a3,a3,a5
800073e8:	fec42783          	lw	a5,-20(s0)
800073ec:	04c7a603          	lw	a2,76(a5)
800073f0:	080007b7          	lui	a5,0x8000
800073f4:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
800073f8:	00f677b3          	and	a5,a2,a5
800073fc:	40f687b3          	sub	a5,a3,a5
80007400:	00f76733          	or	a4,a4,a5
80007404:	fdc42783          	lw	a5,-36(s0)
80007408:	04e7a623          	sw	a4,76(a5)
8000740c:	0500006f          	j	8000745c <osTaskAdd2TimerList+0x1cc>
80007410:	fec42783          	lw	a5,-20(s0)
80007414:	04c7a703          	lw	a4,76(a5)
80007418:	f80007b7          	lui	a5,0xf8000
8000741c:	00f77733          	and	a4,a4,a5
80007420:	fec42783          	lw	a5,-20(s0)
80007424:	04c7a683          	lw	a3,76(a5) # f800004c <__stack_top+0x77fc1a4c>
80007428:	080007b7          	lui	a5,0x8000
8000742c:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
80007430:	00f6f6b3          	and	a3,a3,a5
80007434:	fdc42783          	lw	a5,-36(s0)
80007438:	04c7a603          	lw	a2,76(a5)
8000743c:	080007b7          	lui	a5,0x8000
80007440:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
80007444:	00f677b3          	and	a5,a2,a5
80007448:	40f687b3          	sub	a5,a3,a5
8000744c:	00f76733          	or	a4,a4,a5
80007450:	fec42783          	lw	a5,-20(s0)
80007454:	04e7a623          	sw	a4,76(a5)
80007458:	0240006f          	j	8000747c <osTaskAdd2TimerList+0x1ec>
8000745c:	fec42783          	lw	a5,-20(s0)
80007460:	0487a783          	lw	a5,72(a5)
80007464:	fbc78793          	addi	a5,a5,-68
80007468:	fef42623          	sw	a5,-20(s0)
8000746c:	fec42783          	lw	a5,-20(s0)
80007470:	04478793          	addi	a5,a5,68
80007474:	fe042703          	lw	a4,-32(s0)
80007478:	f2f710e3          	bne	a4,a5,80007398 <osTaskAdd2TimerList+0x108>
8000747c:	fec42783          	lw	a5,-20(s0)
80007480:	04478713          	addi	a4,a5,68
80007484:	fdc42783          	lw	a5,-36(s0)
80007488:	04478793          	addi	a5,a5,68
8000748c:	00078593          	mv	a1,a5
80007490:	00070513          	mv	a0,a4
80007494:	c49ff0ef          	jal	ra,800070dc <LOS_ListTailInsert>
80007498:	00000013          	nop
8000749c:	02c12083          	lw	ra,44(sp)
800074a0:	02812403          	lw	s0,40(sp)
800074a4:	03010113          	addi	sp,sp,48
800074a8:	00008067          	ret
800074ac:	0000                	unimp
	...

800074b0 <osTimerListDelete>:
osTimerListDelete():
800074b0:	fd010113          	addi	sp,sp,-48
800074b4:	02112623          	sw	ra,44(sp)
800074b8:	02812423          	sw	s0,40(sp)
800074bc:	03010413          	addi	s0,sp,48
800074c0:	fca42e23          	sw	a0,-36(s0)
800074c4:	fdc42783          	lw	a5,-36(s0)
800074c8:	04c7a783          	lw	a5,76(a5)
800074cc:	01b7d793          	srli	a5,a5,0x1b
800074d0:	fef42623          	sw	a5,-20(s0)
800074d4:	8001e7b7          	lui	a5,0x8001e
800074d8:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
800074dc:	0007a703          	lw	a4,0(a5)
800074e0:	fec42783          	lw	a5,-20(s0)
800074e4:	00379793          	slli	a5,a5,0x3
800074e8:	00f707b3          	add	a5,a4,a5
800074ec:	fef42423          	sw	a5,-24(s0)
800074f0:	fdc42783          	lw	a5,-36(s0)
800074f4:	0487a783          	lw	a5,72(a5)
800074f8:	fe842703          	lw	a4,-24(s0)
800074fc:	04f70e63          	beq	a4,a5,80007558 <osTimerListDelete+0xa8>
80007500:	fdc42783          	lw	a5,-36(s0)
80007504:	0487a783          	lw	a5,72(a5)
80007508:	fbc78793          	addi	a5,a5,-68
8000750c:	fef42223          	sw	a5,-28(s0)
80007510:	fe442783          	lw	a5,-28(s0)
80007514:	04c7a703          	lw	a4,76(a5)
80007518:	f80007b7          	lui	a5,0xf8000
8000751c:	00f77733          	and	a4,a4,a5
80007520:	fe442783          	lw	a5,-28(s0)
80007524:	04c7a683          	lw	a3,76(a5) # f800004c <__stack_top+0x77fc1a4c>
80007528:	080007b7          	lui	a5,0x8000
8000752c:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
80007530:	00f6f6b3          	and	a3,a3,a5
80007534:	fdc42783          	lw	a5,-36(s0)
80007538:	04c7a603          	lw	a2,76(a5)
8000753c:	080007b7          	lui	a5,0x8000
80007540:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
80007544:	00f677b3          	and	a5,a2,a5
80007548:	00f687b3          	add	a5,a3,a5
8000754c:	00f76733          	or	a4,a4,a5
80007550:	fe442783          	lw	a5,-28(s0)
80007554:	04e7a623          	sw	a4,76(a5)
80007558:	fdc42783          	lw	a5,-36(s0)
8000755c:	04478793          	addi	a5,a5,68
80007560:	00078513          	mv	a0,a5
80007564:	bbdff0ef          	jal	ra,80007120 <LOS_ListDelete>
80007568:	00000013          	nop
8000756c:	02c12083          	lw	ra,44(sp)
80007570:	02812403          	lw	s0,40(sp)
80007574:	03010113          	addi	sp,sp,48
80007578:	00008067          	ret
8000757c:	0000                	unimp
	...

80007580 <osTaskScan>:
osTaskScan():
80007580:	fe010113          	addi	sp,sp,-32
80007584:	00112e23          	sw	ra,28(sp)
80007588:	00812c23          	sw	s0,24(sp)
8000758c:	02010413          	addi	s0,sp,32
80007590:	fe042423          	sw	zero,-24(s0)
80007594:	8001e7b7          	lui	a5,0x8001e
80007598:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
8000759c:	0047d783          	lhu	a5,4(a5)
800075a0:	00178713          	addi	a4,a5,1
800075a4:	41f75793          	srai	a5,a4,0x1f
800075a8:	01b7d793          	srli	a5,a5,0x1b
800075ac:	00f70733          	add	a4,a4,a5
800075b0:	01f77713          	andi	a4,a4,31
800075b4:	40f707b3          	sub	a5,a4,a5
800075b8:	01079713          	slli	a4,a5,0x10
800075bc:	01075713          	srli	a4,a4,0x10
800075c0:	8001e7b7          	lui	a5,0x8001e
800075c4:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
800075c8:	00e79223          	sh	a4,4(a5)
800075cc:	8001e7b7          	lui	a5,0x8001e
800075d0:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
800075d4:	0007a703          	lw	a4,0(a5)
800075d8:	8001e7b7          	lui	a5,0x8001e
800075dc:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
800075e0:	0047d783          	lhu	a5,4(a5)
800075e4:	00379793          	slli	a5,a5,0x3
800075e8:	00f707b3          	add	a5,a4,a5
800075ec:	fef42223          	sw	a5,-28(s0)
800075f0:	fe442783          	lw	a5,-28(s0)
800075f4:	0047a783          	lw	a5,4(a5)
800075f8:	fe442703          	lw	a4,-28(s0)
800075fc:	1cf70e63          	beq	a4,a5,800077d8 <osTaskScan+0x258>
80007600:	fe442783          	lw	a5,-28(s0)
80007604:	0047a783          	lw	a5,4(a5)
80007608:	fbc78793          	addi	a5,a5,-68
8000760c:	fef42623          	sw	a5,-20(s0)
80007610:	1a80006f          	j	800077b8 <osTaskScan+0x238>
80007614:	fec42783          	lw	a5,-20(s0)
80007618:	0047d783          	lhu	a5,4(a5)
8000761c:	fef41123          	sh	a5,-30(s0)
80007620:	fec42783          	lw	a5,-20(s0)
80007624:	04c7a703          	lw	a4,76(a5)
80007628:	080007b7          	lui	a5,0x8000
8000762c:	fff78793          	addi	a5,a5,-1 # 7ffffff <RAM_SIZE+0x7f7ffff>
80007630:	00f777b3          	and	a5,a4,a5
80007634:	00078e63          	beqz	a5,80007650 <osTaskScan+0xd0>
80007638:	fec42783          	lw	a5,-20(s0)
8000763c:	04c7a783          	lw	a5,76(a5)
80007640:	fff78713          	addi	a4,a5,-1
80007644:	fec42783          	lw	a5,-20(s0)
80007648:	04e7a623          	sw	a4,76(a5)
8000764c:	17c0006f          	j	800077c8 <osTaskScan+0x248>
80007650:	fec42783          	lw	a5,-20(s0)
80007654:	04478793          	addi	a5,a5,68
80007658:	00078513          	mv	a0,a5
8000765c:	ac5ff0ef          	jal	ra,80007120 <LOS_ListDelete>
80007660:	fe245783          	lhu	a5,-30(s0)
80007664:	0087f793          	andi	a5,a5,8
80007668:	01079793          	slli	a5,a5,0x10
8000766c:	0107d793          	srli	a5,a5,0x10
80007670:	04078263          	beqz	a5,800076b4 <osTaskScan+0x134>
80007674:	fec42783          	lw	a5,-20(s0)
80007678:	0047d783          	lhu	a5,4(a5)
8000767c:	ff77f793          	andi	a5,a5,-9
80007680:	01079713          	slli	a4,a5,0x10
80007684:	01075713          	srli	a4,a4,0x10
80007688:	fec42783          	lw	a5,-20(s0)
8000768c:	00e79223          	sh	a4,4(a5)
80007690:	fec42783          	lw	a5,-20(s0)
80007694:	03c78793          	addi	a5,a5,60
80007698:	00078513          	mv	a0,a5
8000769c:	a85ff0ef          	jal	ra,80007120 <LOS_ListDelete>
800076a0:	fec42783          	lw	a5,-20(s0)
800076a4:	0007ac23          	sw	zero,24(a5)
800076a8:	fec42783          	lw	a5,-20(s0)
800076ac:	0207a223          	sw	zero,36(a5)
800076b0:	0a40006f          	j	80007754 <osTaskScan+0x1d4>
800076b4:	fe245783          	lhu	a5,-30(s0)
800076b8:	4007f793          	andi	a5,a5,1024
800076bc:	01079793          	slli	a5,a5,0x10
800076c0:	0107d793          	srli	a5,a5,0x10
800076c4:	02078263          	beqz	a5,800076e8 <osTaskScan+0x168>
800076c8:	fec42783          	lw	a5,-20(s0)
800076cc:	0047d783          	lhu	a5,4(a5)
800076d0:	bff7f793          	andi	a5,a5,-1025
800076d4:	01079713          	slli	a4,a5,0x10
800076d8:	01075713          	srli	a4,a4,0x10
800076dc:	fec42783          	lw	a5,-20(s0)
800076e0:	00e79223          	sh	a4,4(a5)
800076e4:	0700006f          	j	80007754 <osTaskScan+0x1d4>
800076e8:	fe245703          	lhu	a4,-30(s0)
800076ec:	000027b7          	lui	a5,0x2
800076f0:	00f777b3          	and	a5,a4,a5
800076f4:	01079793          	slli	a5,a5,0x10
800076f8:	0107d793          	srli	a5,a5,0x10
800076fc:	02078e63          	beqz	a5,80007738 <osTaskScan+0x1b8>
80007700:	fec42783          	lw	a5,-20(s0)
80007704:	03c78793          	addi	a5,a5,60 # 203c <OS_TASK_STATUS_NOT_RUNNING+0x1f4d>
80007708:	00078513          	mv	a0,a5
8000770c:	a15ff0ef          	jal	ra,80007120 <LOS_ListDelete>
80007710:	fec42783          	lw	a5,-20(s0)
80007714:	0047d703          	lhu	a4,4(a5)
80007718:	ffffe7b7          	lui	a5,0xffffe
8000771c:	fff78793          	addi	a5,a5,-1 # ffffdfff <__stack_top+0x7ffbf9ff>
80007720:	00f777b3          	and	a5,a4,a5
80007724:	01079713          	slli	a4,a5,0x10
80007728:	01075713          	srli	a4,a4,0x10
8000772c:	fec42783          	lw	a5,-20(s0)
80007730:	00e79223          	sh	a4,4(a5)
80007734:	0200006f          	j	80007754 <osTaskScan+0x1d4>
80007738:	fec42783          	lw	a5,-20(s0)
8000773c:	0047d783          	lhu	a5,4(a5)
80007740:	fdf7f793          	andi	a5,a5,-33
80007744:	01079713          	slli	a4,a5,0x10
80007748:	01075713          	srli	a4,a4,0x10
8000774c:	fec42783          	lw	a5,-20(s0)
80007750:	00e79223          	sh	a4,4(a5)
80007754:	fe245783          	lhu	a5,-30(s0)
80007758:	0027f793          	andi	a5,a5,2
8000775c:	01079793          	slli	a5,a5,0x10
80007760:	0107d793          	srli	a5,a5,0x10
80007764:	04079263          	bnez	a5,800077a8 <osTaskScan+0x228>
80007768:	fec42783          	lw	a5,-20(s0)
8000776c:	0047d783          	lhu	a5,4(a5)
80007770:	0047e793          	ori	a5,a5,4
80007774:	01079713          	slli	a4,a5,0x10
80007778:	01075713          	srli	a4,a4,0x10
8000777c:	fec42783          	lw	a5,-20(s0)
80007780:	00e79223          	sh	a4,4(a5)
80007784:	fec42783          	lw	a5,-20(s0)
80007788:	03c78713          	addi	a4,a5,60
8000778c:	fec42783          	lw	a5,-20(s0)
80007790:	0067d783          	lhu	a5,6(a5)
80007794:	00078593          	mv	a1,a5
80007798:	00070513          	mv	a0,a4
8000779c:	bc1fe0ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
800077a0:	00100793          	li	a5,1
800077a4:	fef42423          	sw	a5,-24(s0)
800077a8:	fe442783          	lw	a5,-28(s0)
800077ac:	0047a783          	lw	a5,4(a5)
800077b0:	fbc78793          	addi	a5,a5,-68
800077b4:	fef42623          	sw	a5,-20(s0)
800077b8:	fec42783          	lw	a5,-20(s0)
800077bc:	04478793          	addi	a5,a5,68
800077c0:	fe442703          	lw	a4,-28(s0)
800077c4:	e4f718e3          	bne	a4,a5,80007614 <osTaskScan+0x94>
800077c8:	fe842783          	lw	a5,-24(s0)
800077cc:	00078863          	beqz	a5,800077dc <osTaskScan+0x25c>
800077d0:	d74fa0ef          	jal	ra,80001d44 <LOS_Schedule>
800077d4:	0080006f          	j	800077dc <osTaskScan+0x25c>
800077d8:	00000013          	nop
800077dc:	01c12083          	lw	ra,28(sp)
800077e0:	01812403          	lw	s0,24(sp)
800077e4:	02010113          	addi	sp,sp,32
800077e8:	00008067          	ret
800077ec:	0000                	unimp
	...

800077f0 <osTaskInit>:
osTaskInit():
800077f0:	fe010113          	addi	sp,sp,-32
800077f4:	00112e23          	sw	ra,28(sp)
800077f8:	00812c23          	sw	s0,24(sp)
800077fc:	02010413          	addi	s0,sp,32
80007800:	8001e7b7          	lui	a5,0x8001e
80007804:	3407a783          	lw	a5,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
80007808:	00178713          	addi	a4,a5,1
8000780c:	06800793          	li	a5,104
80007810:	02f707b3          	mul	a5,a4,a5
80007814:	fef42223          	sw	a5,-28(s0)
80007818:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
8000781c:	fe442583          	lw	a1,-28(s0)
80007820:	00078513          	mv	a0,a5
80007824:	a99fb0ef          	jal	ra,800032bc <LOS_MemAlloc>
80007828:	00050713          	mv	a4,a0
8000782c:	8001e7b7          	lui	a5,0x8001e
80007830:	32e7ae23          	sw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
80007834:	8001e7b7          	lui	a5,0x8001e
80007838:	33c7a783          	lw	a5,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
8000783c:	00079863          	bnez	a5,8000784c <osTaskInit+0x5c>
80007840:	030007b7          	lui	a5,0x3000
80007844:	20078793          	addi	a5,a5,512 # 3000200 <RAM_SIZE+0x2f80200>
80007848:	1dc0006f          	j	80007a24 <osTaskInit+0x234>
8000784c:	8001e7b7          	lui	a5,0x8001e
80007850:	33c7a783          	lw	a5,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
80007854:	fe442603          	lw	a2,-28(s0)
80007858:	00000593          	li	a1,0
8000785c:	00078513          	mv	a0,a5
80007860:	36c030ef          	jal	ra,8000abcc <memset>
80007864:	8001e7b7          	lui	a5,0x8001e
80007868:	35c78513          	addi	a0,a5,860 # 8001e35c <__stack_top+0xfffdfd5c>
8000786c:	fd4ff0ef          	jal	ra,80007040 <LOS_ListInit>
80007870:	8001e7b7          	lui	a5,0x8001e
80007874:	35478513          	addi	a0,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
80007878:	fc8ff0ef          	jal	ra,80007040 <LOS_ListInit>
8000787c:	8001e7b7          	lui	a5,0x8001e
80007880:	32c78513          	addi	a0,a5,812 # 8001e32c <__stack_top+0xfffdfd2c>
80007884:	fbcff0ef          	jal	ra,80007040 <LOS_ListInit>
80007888:	fe042623          	sw	zero,-20(s0)
8000788c:	07c0006f          	j	80007908 <osTaskInit+0x118>
80007890:	8001e7b7          	lui	a5,0x8001e
80007894:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
80007898:	fec42683          	lw	a3,-20(s0)
8000789c:	06800793          	li	a5,104
800078a0:	02f687b3          	mul	a5,a3,a5
800078a4:	00f707b3          	add	a5,a4,a5
800078a8:	00100713          	li	a4,1
800078ac:	00e79223          	sh	a4,4(a5)
800078b0:	8001e7b7          	lui	a5,0x8001e
800078b4:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
800078b8:	fec42683          	lw	a3,-20(s0)
800078bc:	06800793          	li	a5,104
800078c0:	02f687b3          	mul	a5,a3,a5
800078c4:	00f707b3          	add	a5,a4,a5
800078c8:	fec42703          	lw	a4,-20(s0)
800078cc:	00e7a823          	sw	a4,16(a5)
800078d0:	8001e7b7          	lui	a5,0x8001e
800078d4:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
800078d8:	fec42683          	lw	a3,-20(s0)
800078dc:	06800793          	li	a5,104
800078e0:	02f687b3          	mul	a5,a3,a5
800078e4:	00f707b3          	add	a5,a4,a5
800078e8:	03c78793          	addi	a5,a5,60
800078ec:	00078593          	mv	a1,a5
800078f0:	8001e7b7          	lui	a5,0x8001e
800078f4:	35478513          	addi	a0,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
800078f8:	fe4ff0ef          	jal	ra,800070dc <LOS_ListTailInsert>
800078fc:	fec42783          	lw	a5,-20(s0)
80007900:	00178793          	addi	a5,a5,1
80007904:	fef42623          	sw	a5,-20(s0)
80007908:	fec42703          	lw	a4,-20(s0)
8000790c:	00f00793          	li	a5,15
80007910:	f8e7f0e3          	bleu	a4,a5,80007890 <osTaskInit+0xa0>
80007914:	00800613          	li	a2,8
80007918:	00000593          	li	a1,0
8000791c:	8001e7b7          	lui	a5,0x8001e
80007920:	34878513          	addi	a0,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007924:	2a8030ef          	jal	ra,8000abcc <memset>
80007928:	8001e7b7          	lui	a5,0x8001e
8000792c:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
80007930:	8001e7b7          	lui	a5,0x8001e
80007934:	3407a683          	lw	a3,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
80007938:	06800793          	li	a5,104
8000793c:	02f687b3          	mul	a5,a3,a5
80007940:	00f70733          	add	a4,a4,a5
80007944:	8001e7b7          	lui	a5,0x8001e
80007948:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
8000794c:	00e7a023          	sw	a4,0(a5)
80007950:	8001e7b7          	lui	a5,0x8001e
80007954:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007958:	0007a783          	lw	a5,0(a5)
8000795c:	fec42703          	lw	a4,-20(s0)
80007960:	00e7a823          	sw	a4,16(a5)
80007964:	8001e7b7          	lui	a5,0x8001e
80007968:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
8000796c:	0007a783          	lw	a5,0(a5)
80007970:	01100713          	li	a4,17
80007974:	00e79223          	sh	a4,4(a5)
80007978:	8001e7b7          	lui	a5,0x8001e
8000797c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007980:	0007a783          	lw	a5,0(a5)
80007984:	02000713          	li	a4,32
80007988:	00e79323          	sh	a4,6(a5)
8000798c:	931fe0ef          	jal	ra,800062bc <osPriqueueInit>
80007990:	10000793          	li	a5,256
80007994:	fef42223          	sw	a5,-28(s0)
80007998:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
8000799c:	fe442583          	lw	a1,-28(s0)
800079a0:	00078513          	mv	a0,a5
800079a4:	919fb0ef          	jal	ra,800032bc <LOS_MemAlloc>
800079a8:	fea42423          	sw	a0,-24(s0)
800079ac:	fe842783          	lw	a5,-24(s0)
800079b0:	00079863          	bnez	a5,800079c0 <osTaskInit+0x1d0>
800079b4:	030007b7          	lui	a5,0x3000
800079b8:	20078793          	addi	a5,a5,512 # 3000200 <RAM_SIZE+0x2f80200>
800079bc:	0680006f          	j	80007a24 <osTaskInit+0x234>
800079c0:	fe442603          	lw	a2,-28(s0)
800079c4:	00000593          	li	a1,0
800079c8:	fe842503          	lw	a0,-24(s0)
800079cc:	200030ef          	jal	ra,8000abcc <memset>
800079d0:	8001e7b7          	lui	a5,0x8001e
800079d4:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
800079d8:	fe842703          	lw	a4,-24(s0)
800079dc:	00e7a023          	sw	a4,0(a5)
800079e0:	8001e7b7          	lui	a5,0x8001e
800079e4:	33478793          	addi	a5,a5,820 # 8001e334 <__stack_top+0xfffdfd34>
800079e8:	00079223          	sh	zero,4(a5)
800079ec:	fe042623          	sw	zero,-20(s0)
800079f0:	0240006f          	j	80007a14 <osTaskInit+0x224>
800079f4:	fe842503          	lw	a0,-24(s0)
800079f8:	e48ff0ef          	jal	ra,80007040 <LOS_ListInit>
800079fc:	fec42783          	lw	a5,-20(s0)
80007a00:	00178793          	addi	a5,a5,1
80007a04:	fef42623          	sw	a5,-20(s0)
80007a08:	fe842783          	lw	a5,-24(s0)
80007a0c:	00878793          	addi	a5,a5,8
80007a10:	fef42423          	sw	a5,-24(s0)
80007a14:	fec42703          	lw	a4,-20(s0)
80007a18:	01f00793          	li	a5,31
80007a1c:	fce7fce3          	bleu	a4,a5,800079f4 <osTaskInit+0x204>
80007a20:	00000793          	li	a5,0
80007a24:	00078513          	mv	a0,a5
80007a28:	01c12083          	lw	ra,28(sp)
80007a2c:	01812403          	lw	s0,24(sp)
80007a30:	02010113          	addi	sp,sp,32
80007a34:	00008067          	ret
80007a38:	0000                	unimp
	...

80007a3c <osIdleTaskCreate>:
osIdleTaskCreate():
80007a3c:	fc010113          	addi	sp,sp,-64
80007a40:	02112e23          	sw	ra,60(sp)
80007a44:	02812c23          	sw	s0,56(sp)
80007a48:	04010413          	addi	s0,sp,64
80007a4c:	fc840793          	addi	a5,s0,-56
80007a50:	02400613          	li	a2,36
80007a54:	00000593          	li	a1,0
80007a58:	00078513          	mv	a0,a5
80007a5c:	170030ef          	jal	ra,8000abcc <memset>
80007a60:	800077b7          	lui	a5,0x80007
80007a64:	1b878793          	addi	a5,a5,440 # 800071b8 <__stack_top+0xfffc8bb8>
80007a68:	fcf42423          	sw	a5,-56(s0)
80007a6c:	50000793          	li	a5,1280
80007a70:	fef42023          	sw	a5,-32(s0)
80007a74:	8000d7b7          	lui	a5,0x8000d
80007a78:	e7c78793          	addi	a5,a5,-388 # 8000ce7c <__stack_top+0xfffce87c>
80007a7c:	fef42223          	sw	a5,-28(s0)
80007a80:	01f00793          	li	a5,31
80007a84:	fcf41623          	sh	a5,-52(s0)
80007a88:	fc840793          	addi	a5,s0,-56
80007a8c:	00078593          	mv	a1,a5
80007a90:	8001e7b7          	lui	a5,0x8001e
80007a94:	32478513          	addi	a0,a5,804 # 8001e324 <__stack_top+0xfffdfd24>
80007a98:	7d8000ef          	jal	ra,80008270 <LOS_TaskCreate>
80007a9c:	fea42623          	sw	a0,-20(s0)
80007aa0:	fec42783          	lw	a5,-20(s0)
80007aa4:	00078663          	beqz	a5,80007ab0 <osIdleTaskCreate+0x74>
80007aa8:	fec42783          	lw	a5,-20(s0)
80007aac:	0080006f          	j	80007ab4 <osIdleTaskCreate+0x78>
80007ab0:	00000793          	li	a5,0
80007ab4:	00078513          	mv	a0,a5
80007ab8:	03c12083          	lw	ra,60(sp)
80007abc:	03812403          	lw	s0,56(sp)
80007ac0:	04010113          	addi	sp,sp,64
80007ac4:	00008067          	ret
80007ac8:	0000                	unimp
	...

80007acc <osTaskSelfDelete>:
osTaskSelfDelete():
80007acc:	fd010113          	addi	sp,sp,-48
80007ad0:	02112623          	sw	ra,44(sp)
80007ad4:	02812423          	sw	s0,40(sp)
80007ad8:	03010413          	addi	s0,sp,48
80007adc:	fca42e23          	sw	a0,-36(s0)
80007ae0:	fcb42c23          	sw	a1,-40(s0)
80007ae4:	8001e7b7          	lui	a5,0x8001e
80007ae8:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
80007aec:	fdc42683          	lw	a3,-36(s0)
80007af0:	06800793          	li	a5,104
80007af4:	02f687b3          	mul	a5,a3,a5
80007af8:	00f707b3          	add	a5,a4,a5
80007afc:	fef42623          	sw	a5,-20(s0)
80007b00:	fec42783          	lw	a5,-20(s0)
80007b04:	0047d783          	lhu	a5,4(a5)
80007b08:	fef41523          	sh	a5,-22(s0)
80007b0c:	fea45783          	lhu	a5,-22(s0)
80007b10:	0047f793          	andi	a5,a5,4
80007b14:	01079793          	slli	a5,a5,0x10
80007b18:	0107d793          	srli	a5,a5,0x10
80007b1c:	02078a63          	beqz	a5,80007b50 <osTaskSelfDelete+0x84>
80007b20:	fec42783          	lw	a5,-20(s0)
80007b24:	03c78793          	addi	a5,a5,60
80007b28:	00078513          	mv	a0,a5
80007b2c:	881fe0ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80007b30:	fec42783          	lw	a5,-20(s0)
80007b34:	0047d783          	lhu	a5,4(a5)
80007b38:	ffb7f793          	andi	a5,a5,-5
80007b3c:	01079713          	slli	a4,a5,0x10
80007b40:	01075713          	srli	a4,a4,0x10
80007b44:	fec42783          	lw	a5,-20(s0)
80007b48:	00e79223          	sh	a4,4(a5)
80007b4c:	04c0006f          	j	80007b98 <osTaskSelfDelete+0xcc>
80007b50:	fea45703          	lhu	a4,-22(s0)
80007b54:	000027b7          	lui	a5,0x2
80007b58:	00878793          	addi	a5,a5,8 # 2008 <OS_TASK_STATUS_NOT_RUNNING+0x1f19>
80007b5c:	00f777b3          	and	a5,a4,a5
80007b60:	01079793          	slli	a5,a5,0x10
80007b64:	0107d793          	srli	a5,a5,0x10
80007b68:	02078863          	beqz	a5,80007b98 <osTaskSelfDelete+0xcc>
80007b6c:	fec42783          	lw	a5,-20(s0)
80007b70:	03c78793          	addi	a5,a5,60
80007b74:	00078513          	mv	a0,a5
80007b78:	da8ff0ef          	jal	ra,80007120 <LOS_ListDelete>
80007b7c:	fea45783          	lhu	a5,-22(s0)
80007b80:	0607f793          	andi	a5,a5,96
80007b84:	01079793          	slli	a5,a5,0x10
80007b88:	0107d793          	srli	a5,a5,0x10
80007b8c:	00078663          	beqz	a5,80007b98 <osTaskSelfDelete+0xcc>
80007b90:	fec42503          	lw	a0,-20(s0)
80007b94:	91dff0ef          	jal	ra,800074b0 <osTimerListDelete>
80007b98:	fec42783          	lw	a5,-20(s0)
80007b9c:	0047d783          	lhu	a5,4(a5)
80007ba0:	ffd7f793          	andi	a5,a5,-3
80007ba4:	01079713          	slli	a4,a5,0x10
80007ba8:	01075713          	srli	a4,a4,0x10
80007bac:	fec42783          	lw	a5,-20(s0)
80007bb0:	00e79223          	sh	a4,4(a5)
80007bb4:	fec42783          	lw	a5,-20(s0)
80007bb8:	0047d783          	lhu	a5,4(a5)
80007bbc:	0017e793          	ori	a5,a5,1
80007bc0:	01079713          	slli	a4,a5,0x10
80007bc4:	01075713          	srli	a4,a4,0x10
80007bc8:	fec42783          	lw	a5,-20(s0)
80007bcc:	00e79223          	sh	a4,4(a5)
80007bd0:	fec42783          	lw	a5,-20(s0)
80007bd4:	fff00713          	li	a4,-1
80007bd8:	04e7a823          	sw	a4,80(a5)
80007bdc:	fec42783          	lw	a5,-20(s0)
80007be0:	0407ae23          	sw	zero,92(a5)
80007be4:	ffcfe0ef          	jal	ra,800063e0 <LOS_PriqueueTop>
80007be8:	00050793          	mv	a5,a0
80007bec:	fc478713          	addi	a4,a5,-60
80007bf0:	8001e7b7          	lui	a5,0x8001e
80007bf4:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007bf8:	00e7a223          	sw	a4,4(a5)
80007bfc:	fec42783          	lw	a5,-20(s0)
80007c00:	0047d783          	lhu	a5,4(a5)
80007c04:	0107f793          	andi	a5,a5,16
80007c08:	01079793          	slli	a5,a5,0x10
80007c0c:	0107d793          	srli	a5,a5,0x10
80007c10:	0c078063          	beqz	a5,80007cd0 <osTaskSelfDelete+0x204>
80007c14:	fec42783          	lw	a5,-20(s0)
80007c18:	03c78793          	addi	a5,a5,60
80007c1c:	00078593          	mv	a1,a5
80007c20:	8001e7b7          	lui	a5,0x8001e
80007c24:	32c78513          	addi	a0,a5,812 # 8001e32c <__stack_top+0xfffdfd2c>
80007c28:	cb4ff0ef          	jal	ra,800070dc <LOS_ListTailInsert>
80007c2c:	8001e7b7          	lui	a5,0x8001e
80007c30:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
80007c34:	8001e7b7          	lui	a5,0x8001e
80007c38:	3407a683          	lw	a3,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
80007c3c:	06800793          	li	a5,104
80007c40:	02f687b3          	mul	a5,a3,a5
80007c44:	00f70733          	add	a4,a4,a5
80007c48:	8001e7b7          	lui	a5,0x8001e
80007c4c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007c50:	00e7a023          	sw	a4,0(a5)
80007c54:	8001e7b7          	lui	a5,0x8001e
80007c58:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007c5c:	0007a783          	lw	a5,0(a5)
80007c60:	fdc42703          	lw	a4,-36(s0)
80007c64:	00e7a823          	sw	a4,16(a5)
80007c68:	8001e7b7          	lui	a5,0x8001e
80007c6c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007c70:	0007a783          	lw	a5,0(a5)
80007c74:	fec42703          	lw	a4,-20(s0)
80007c78:	00475703          	lhu	a4,4(a4)
80007c7c:	00e79223          	sh	a4,4(a5)
80007c80:	8001e7b7          	lui	a5,0x8001e
80007c84:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007c88:	0007a783          	lw	a5,0(a5)
80007c8c:	fec42703          	lw	a4,-20(s0)
80007c90:	00c72703          	lw	a4,12(a4)
80007c94:	00e7a623          	sw	a4,12(a5)
80007c98:	8001e7b7          	lui	a5,0x8001e
80007c9c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80007ca0:	0007a783          	lw	a5,0(a5)
80007ca4:	fec42703          	lw	a4,-20(s0)
80007ca8:	03872703          	lw	a4,56(a4)
80007cac:	02e7ac23          	sw	a4,56(a5)
80007cb0:	fec42783          	lw	a5,-20(s0)
80007cb4:	00100713          	li	a4,1
80007cb8:	00e79223          	sh	a4,4(a5)
80007cbc:	fd842503          	lw	a0,-40(s0)
80007cc0:	f59f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80007cc4:	854fa0ef          	jal	ra,80001d18 <osSchedule>
80007cc8:	00000793          	li	a5,0
80007ccc:	03c0006f          	j	80007d08 <osTaskSelfDelete+0x23c>
80007cd0:	fec42783          	lw	a5,-20(s0)
80007cd4:	0047d783          	lhu	a5,4(a5)
80007cd8:	0017f793          	andi	a5,a5,1
80007cdc:	01079793          	slli	a5,a5,0x10
80007ce0:	0107d793          	srli	a5,a5,0x10
80007ce4:	00078c63          	beqz	a5,80007cfc <osTaskSelfDelete+0x230>
80007ce8:	fd842503          	lw	a0,-40(s0)
80007cec:	f2df90ef          	jal	ra,80001c18 <LOS_IntRestore>
80007cf0:	828fa0ef          	jal	ra,80001d18 <osSchedule>
80007cf4:	00000793          	li	a5,0
80007cf8:	0100006f          	j	80007d08 <osTaskSelfDelete+0x23c>
80007cfc:	fd842503          	lw	a0,-40(s0)
80007d00:	f19f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80007d04:	00000793          	li	a5,0
80007d08:	00078513          	mv	a0,a5
80007d0c:	02c12083          	lw	ra,44(sp)
80007d10:	02812403          	lw	s0,40(sp)
80007d14:	03010113          	addi	sp,sp,48
80007d18:	00008067          	ret
80007d1c:	0000                	unimp
	...

80007d20 <osTaskEntry>:
osTaskEntry():
80007d20:	fd010113          	addi	sp,sp,-48
80007d24:	02112623          	sw	ra,44(sp)
80007d28:	02812423          	sw	s0,40(sp)
80007d2c:	03010413          	addi	s0,sp,48
80007d30:	fca42e23          	sw	a0,-36(s0)
80007d34:	8001e7b7          	lui	a5,0x8001e
80007d38:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
80007d3c:	fdc42683          	lw	a3,-36(s0)
80007d40:	06800793          	li	a5,104
80007d44:	02f687b3          	mul	a5,a3,a5
80007d48:	00f707b3          	add	a5,a4,a5
80007d4c:	fef42623          	sw	a5,-20(s0)
80007d50:	fec42783          	lw	a5,-20(s0)
80007d54:	01c7a783          	lw	a5,28(a5)
80007d58:	04078463          	beqz	a5,80007da0 <osTaskEntry+0x80>
80007d5c:	fec42783          	lw	a5,-20(s0)
80007d60:	0147a803          	lw	a6,20(a5)
80007d64:	fec42783          	lw	a5,-20(s0)
80007d68:	0287a703          	lw	a4,40(a5)
80007d6c:	fec42783          	lw	a5,-20(s0)
80007d70:	02c7a583          	lw	a1,44(a5)
80007d74:	fec42783          	lw	a5,-20(s0)
80007d78:	0307a603          	lw	a2,48(a5)
80007d7c:	fec42783          	lw	a5,-20(s0)
80007d80:	0347a783          	lw	a5,52(a5)
80007d84:	00078693          	mv	a3,a5
80007d88:	00070513          	mv	a0,a4
80007d8c:	000800e7          	jalr	a6
80007d90:	00050713          	mv	a4,a0
80007d94:	fec42783          	lw	a5,-20(s0)
80007d98:	02e7a023          	sw	a4,32(a5)
80007d9c:	0380006f          	j	80007dd4 <osTaskEntry+0xb4>
80007da0:	fec42783          	lw	a5,-20(s0)
80007da4:	0147a803          	lw	a6,20(a5)
80007da8:	fec42783          	lw	a5,-20(s0)
80007dac:	0287a703          	lw	a4,40(a5)
80007db0:	fec42783          	lw	a5,-20(s0)
80007db4:	02c7a583          	lw	a1,44(a5)
80007db8:	fec42783          	lw	a5,-20(s0)
80007dbc:	0307a603          	lw	a2,48(a5)
80007dc0:	fec42783          	lw	a5,-20(s0)
80007dc4:	0347a783          	lw	a5,52(a5)
80007dc8:	00078693          	mv	a3,a5
80007dcc:	00070513          	mv	a0,a4
80007dd0:	000800e7          	jalr	a6
80007dd4:	fec42783          	lw	a5,-20(s0)
80007dd8:	0047d783          	lhu	a5,4(a5)
80007ddc:	0807f793          	andi	a5,a5,128
80007de0:	02078663          	beqz	a5,80007e0c <osTaskEntry+0xec>
80007de4:	e15f90ef          	jal	ra,80001bf8 <LOS_IntLock>
80007de8:	fea42423          	sw	a0,-24(s0)
80007dec:	8001e7b7          	lui	a5,0x8001e
80007df0:	34079223          	sh	zero,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80007df4:	fec42783          	lw	a5,-20(s0)
80007df8:	0107a783          	lw	a5,16(a5)
80007dfc:	fe842583          	lw	a1,-24(s0)
80007e00:	00078513          	mv	a0,a5
80007e04:	cc9ff0ef          	jal	ra,80007acc <osTaskSelfDelete>
80007e08:	0940006f          	j	80007e9c <osTaskEntry+0x17c>
80007e0c:	dedf90ef          	jal	ra,80001bf8 <LOS_IntLock>
80007e10:	fea42423          	sw	a0,-24(s0)
80007e14:	8001e7b7          	lui	a5,0x8001e
80007e18:	34079223          	sh	zero,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80007e1c:	fe842503          	lw	a0,-24(s0)
80007e20:	df9f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80007e24:	639000ef          	jal	ra,80008c5c <LOS_TaskLock>
80007e28:	fec42783          	lw	a5,-20(s0)
80007e2c:	01c7a783          	lw	a5,28(a5)
80007e30:	02078063          	beqz	a5,80007e50 <osTaskEntry+0x130>
80007e34:	fec42783          	lw	a5,-20(s0)
80007e38:	01c7a783          	lw	a5,28(a5)
80007e3c:	0047a783          	lw	a5,4(a5)
80007e40:	00078513          	mv	a0,a5
80007e44:	944fe0ef          	jal	ra,80005f88 <LOS_SemPost>
80007e48:	fec42783          	lw	a5,-20(s0)
80007e4c:	0007ae23          	sw	zero,28(a5)
80007e50:	fec42783          	lw	a5,-20(s0)
80007e54:	0047d783          	lhu	a5,4(a5)
80007e58:	0047f793          	andi	a5,a5,4
80007e5c:	01079793          	slli	a5,a5,0x10
80007e60:	0107d793          	srli	a5,a5,0x10
80007e64:	02078863          	beqz	a5,80007e94 <osTaskEntry+0x174>
80007e68:	fec42783          	lw	a5,-20(s0)
80007e6c:	03c78793          	addi	a5,a5,60
80007e70:	00078513          	mv	a0,a5
80007e74:	d38fe0ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80007e78:	fec42783          	lw	a5,-20(s0)
80007e7c:	0047d783          	lhu	a5,4(a5)
80007e80:	ffb7f793          	andi	a5,a5,-5
80007e84:	01079713          	slli	a4,a5,0x10
80007e88:	01075713          	srli	a4,a4,0x10
80007e8c:	fec42783          	lw	a5,-20(s0)
80007e90:	00e79223          	sh	a4,4(a5)
80007e94:	61d000ef          	jal	ra,80008cb0 <LOS_TaskUnlock>
80007e98:	eadf90ef          	jal	ra,80001d44 <LOS_Schedule>
80007e9c:	00000013          	nop
80007ea0:	02c12083          	lw	ra,44(sp)
80007ea4:	02812403          	lw	s0,40(sp)
80007ea8:	03010113          	addi	sp,sp,48
80007eac:	00008067          	ret
80007eb0:	0000                	unimp
	...

80007eb4 <LOS_TaskCreateOnly>:
LOS_TaskCreateOnly():
80007eb4:	fc010113          	addi	sp,sp,-64
80007eb8:	02112e23          	sw	ra,60(sp)
80007ebc:	02812c23          	sw	s0,56(sp)
80007ec0:	02912a23          	sw	s1,52(sp)
80007ec4:	04010413          	addi	s0,sp,64
80007ec8:	fca42623          	sw	a0,-52(s0)
80007ecc:	fcb42423          	sw	a1,-56(s0)
80007ed0:	fe042223          	sw	zero,-28(s0)
80007ed4:	fff00793          	li	a5,-1
80007ed8:	fef42423          	sw	a5,-24(s0)
80007edc:	fcc42783          	lw	a5,-52(s0)
80007ee0:	00079863          	bnez	a5,80007ef0 <LOS_TaskCreateOnly+0x3c>
80007ee4:	020007b7          	lui	a5,0x2000
80007ee8:	20778793          	addi	a5,a5,519 # 2000207 <RAM_SIZE+0x1f80207>
80007eec:	3680006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80007ef0:	fc842783          	lw	a5,-56(s0)
80007ef4:	00079863          	bnez	a5,80007f04 <LOS_TaskCreateOnly+0x50>
80007ef8:	020007b7          	lui	a5,0x2000
80007efc:	20178793          	addi	a5,a5,513 # 2000201 <RAM_SIZE+0x1f80201>
80007f00:	3540006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80007f04:	fc842783          	lw	a5,-56(s0)
80007f08:	01c7a783          	lw	a5,28(a5)
80007f0c:	00079863          	bnez	a5,80007f1c <LOS_TaskCreateOnly+0x68>
80007f10:	020007b7          	lui	a5,0x2000
80007f14:	20578793          	addi	a5,a5,517 # 2000205 <RAM_SIZE+0x1f80205>
80007f18:	33c0006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80007f1c:	fc842783          	lw	a5,-56(s0)
80007f20:	0007a783          	lw	a5,0(a5)
80007f24:	00079863          	bnez	a5,80007f34 <LOS_TaskCreateOnly+0x80>
80007f28:	020007b7          	lui	a5,0x2000
80007f2c:	20478793          	addi	a5,a5,516 # 2000204 <RAM_SIZE+0x1f80204>
80007f30:	3240006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80007f34:	fc842783          	lw	a5,-56(s0)
80007f38:	0047d703          	lhu	a4,4(a5)
80007f3c:	01f00793          	li	a5,31
80007f40:	00e7f863          	bleu	a4,a5,80007f50 <LOS_TaskCreateOnly+0x9c>
80007f44:	020007b7          	lui	a5,0x2000
80007f48:	20378793          	addi	a5,a5,515 # 2000203 <RAM_SIZE+0x1f80203>
80007f4c:	3080006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80007f50:	fc842783          	lw	a5,-56(s0)
80007f54:	0187a703          	lw	a4,24(a5)
80007f58:	000107b7          	lui	a5,0x10
80007f5c:	00e7f863          	bleu	a4,a5,80007f6c <LOS_TaskCreateOnly+0xb8>
80007f60:	020007b7          	lui	a5,0x2000
80007f64:	22078793          	addi	a5,a5,544 # 2000220 <RAM_SIZE+0x1f80220>
80007f68:	2ec0006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80007f6c:	fc842783          	lw	a5,-56(s0)
80007f70:	0187a783          	lw	a5,24(a5)
80007f74:	00079863          	bnez	a5,80007f84 <LOS_TaskCreateOnly+0xd0>
80007f78:	fc842783          	lw	a5,-56(s0)
80007f7c:	50000713          	li	a4,1280
80007f80:	00e7ac23          	sw	a4,24(a5)
80007f84:	fc842783          	lw	a5,-56(s0)
80007f88:	0187a783          	lw	a5,24(a5)
80007f8c:	00800593          	li	a1,8
80007f90:	00078513          	mv	a0,a5
80007f94:	c24fa0ef          	jal	ra,800023b8 <LOS_Align>
80007f98:	00050713          	mv	a4,a0
80007f9c:	fc842783          	lw	a5,-56(s0)
80007fa0:	00e7ac23          	sw	a4,24(a5)
80007fa4:	fc842783          	lw	a5,-56(s0)
80007fa8:	0187a483          	lw	s1,24(a5)
80007fac:	01000593          	li	a1,16
80007fb0:	13000513          	li	a0,304
80007fb4:	c04fa0ef          	jal	ra,800023b8 <LOS_Align>
80007fb8:	00050793          	mv	a5,a0
80007fbc:	00f4f863          	bleu	a5,s1,80007fcc <LOS_TaskCreateOnly+0x118>
80007fc0:	020007b7          	lui	a5,0x2000
80007fc4:	20678793          	addi	a5,a5,518 # 2000206 <RAM_SIZE+0x1f80206>
80007fc8:	28c0006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80007fcc:	c2df90ef          	jal	ra,80001bf8 <LOS_IntLock>
80007fd0:	fea42623          	sw	a0,-20(s0)
80007fd4:	05c0006f          	j	80008030 <LOS_TaskCreateOnly+0x17c>
80007fd8:	8001e7b7          	lui	a5,0x8001e
80007fdc:	32c78793          	addi	a5,a5,812 # 8001e32c <__stack_top+0xfffdfd2c>
80007fe0:	0047a783          	lw	a5,4(a5)
80007fe4:	fc478793          	addi	a5,a5,-60
80007fe8:	fef42023          	sw	a5,-32(s0)
80007fec:	8001e7b7          	lui	a5,0x8001e
80007ff0:	32c78793          	addi	a5,a5,812 # 8001e32c <__stack_top+0xfffdfd2c>
80007ff4:	0047a783          	lw	a5,4(a5)
80007ff8:	00078513          	mv	a0,a5
80007ffc:	924ff0ef          	jal	ra,80007120 <LOS_ListDelete>
80008000:	fe042783          	lw	a5,-32(s0)
80008004:	03c78793          	addi	a5,a5,60
80008008:	00078593          	mv	a1,a5
8000800c:	8001e7b7          	lui	a5,0x8001e
80008010:	35478513          	addi	a0,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
80008014:	868ff0ef          	jal	ra,8000707c <LOS_ListAdd>
80008018:	eb01a703          	lw	a4,-336(gp) # 8000e1e0 <m_aucSysMem0>
8000801c:	fe042783          	lw	a5,-32(s0)
80008020:	00c7a783          	lw	a5,12(a5)
80008024:	00078593          	mv	a1,a5
80008028:	00070513          	mv	a0,a4
8000802c:	c14fb0ef          	jal	ra,80003440 <LOS_MemFree>
80008030:	8001e7b7          	lui	a5,0x8001e
80008034:	32c78513          	addi	a0,a5,812 # 8001e32c <__stack_top+0xfffdfd2c>
80008038:	944ff0ef          	jal	ra,8000717c <LOS_ListEmpty>
8000803c:	00050793          	mv	a5,a0
80008040:	f8078ce3          	beqz	a5,80007fd8 <LOS_TaskCreateOnly+0x124>
80008044:	8001e7b7          	lui	a5,0x8001e
80008048:	35478513          	addi	a0,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
8000804c:	930ff0ef          	jal	ra,8000717c <LOS_ListEmpty>
80008050:	00050793          	mv	a5,a0
80008054:	00078a63          	beqz	a5,80008068 <LOS_TaskCreateOnly+0x1b4>
80008058:	020007b7          	lui	a5,0x2000
8000805c:	21178793          	addi	a5,a5,529 # 2000211 <RAM_SIZE+0x1f80211>
80008060:	fef42423          	sw	a5,-24(s0)
80008064:	1e40006f          	j	80008248 <LOS_TaskCreateOnly+0x394>
80008068:	8001e7b7          	lui	a5,0x8001e
8000806c:	35478793          	addi	a5,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
80008070:	0047a783          	lw	a5,4(a5)
80008074:	fc478793          	addi	a5,a5,-60
80008078:	fef42023          	sw	a5,-32(s0)
8000807c:	8001e7b7          	lui	a5,0x8001e
80008080:	35478793          	addi	a5,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
80008084:	0047a783          	lw	a5,4(a5)
80008088:	00078513          	mv	a0,a5
8000808c:	894ff0ef          	jal	ra,80007120 <LOS_ListDelete>
80008090:	fec42503          	lw	a0,-20(s0)
80008094:	b85f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008098:	fe042783          	lw	a5,-32(s0)
8000809c:	0107a783          	lw	a5,16(a5)
800080a0:	fef42223          	sw	a5,-28(s0)
800080a4:	eb01a703          	lw	a4,-336(gp) # 8000e1e0 <m_aucSysMem0>
800080a8:	fc842783          	lw	a5,-56(s0)
800080ac:	0187a783          	lw	a5,24(a5)
800080b0:	00800613          	li	a2,8
800080b4:	00078593          	mv	a1,a5
800080b8:	00070513          	mv	a0,a4
800080bc:	a78fb0ef          	jal	ra,80003334 <LOS_MemAllocAlign>
800080c0:	fca42e23          	sw	a0,-36(s0)
800080c4:	fdc42783          	lw	a5,-36(s0)
800080c8:	02079a63          	bnez	a5,800080fc <LOS_TaskCreateOnly+0x248>
800080cc:	b2df90ef          	jal	ra,80001bf8 <LOS_IntLock>
800080d0:	fea42623          	sw	a0,-20(s0)
800080d4:	fe042783          	lw	a5,-32(s0)
800080d8:	03c78793          	addi	a5,a5,60
800080dc:	00078593          	mv	a1,a5
800080e0:	8001e7b7          	lui	a5,0x8001e
800080e4:	35478513          	addi	a0,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
800080e8:	f95fe0ef          	jal	ra,8000707c <LOS_ListAdd>
800080ec:	030007b7          	lui	a5,0x3000
800080f0:	20078793          	addi	a5,a5,512 # 3000200 <RAM_SIZE+0x2f80200>
800080f4:	fef42423          	sw	a5,-24(s0)
800080f8:	1500006f          	j	80008248 <LOS_TaskCreateOnly+0x394>
800080fc:	fc842783          	lw	a5,-56(s0)
80008100:	0187a783          	lw	a5,24(a5)
80008104:	fdc42603          	lw	a2,-36(s0)
80008108:	00078593          	mv	a1,a5
8000810c:	fe442503          	lw	a0,-28(s0)
80008110:	cd5f90ef          	jal	ra,80001de4 <osTskStackInit>
80008114:	fca42c23          	sw	a0,-40(s0)
80008118:	fe042783          	lw	a5,-32(s0)
8000811c:	fd842703          	lw	a4,-40(s0)
80008120:	00e7a023          	sw	a4,0(a5)
80008124:	fc842783          	lw	a5,-56(s0)
80008128:	0087a703          	lw	a4,8(a5)
8000812c:	fe042783          	lw	a5,-32(s0)
80008130:	02e7a423          	sw	a4,40(a5)
80008134:	fc842783          	lw	a5,-56(s0)
80008138:	00c7a703          	lw	a4,12(a5)
8000813c:	fe042783          	lw	a5,-32(s0)
80008140:	02e7a623          	sw	a4,44(a5)
80008144:	fc842783          	lw	a5,-56(s0)
80008148:	0107a703          	lw	a4,16(a5)
8000814c:	fe042783          	lw	a5,-32(s0)
80008150:	02e7a823          	sw	a4,48(a5)
80008154:	fc842783          	lw	a5,-56(s0)
80008158:	0147a703          	lw	a4,20(a5)
8000815c:	fe042783          	lw	a5,-32(s0)
80008160:	02e7aa23          	sw	a4,52(a5)
80008164:	fdc42703          	lw	a4,-36(s0)
80008168:	fe042783          	lw	a5,-32(s0)
8000816c:	00e7a623          	sw	a4,12(a5)
80008170:	fc842783          	lw	a5,-56(s0)
80008174:	0187a703          	lw	a4,24(a5)
80008178:	fe042783          	lw	a5,-32(s0)
8000817c:	00e7a423          	sw	a4,8(a5)
80008180:	fe042783          	lw	a5,-32(s0)
80008184:	0007ac23          	sw	zero,24(a5)
80008188:	fe042783          	lw	a5,-32(s0)
8000818c:	0007ae23          	sw	zero,28(a5)
80008190:	fe042783          	lw	a5,-32(s0)
80008194:	0207a223          	sw	zero,36(a5)
80008198:	fe042783          	lw	a5,-32(s0)
8000819c:	00200713          	li	a4,2
800081a0:	00e79223          	sh	a4,4(a5)
800081a4:	fe042783          	lw	a5,-32(s0)
800081a8:	0047d783          	lhu	a5,4(a5)
800081ac:	01079713          	slli	a4,a5,0x10
800081b0:	41075713          	srai	a4,a4,0x10
800081b4:	fc842783          	lw	a5,-56(s0)
800081b8:	0207a783          	lw	a5,32(a5)
800081bc:	00078663          	beqz	a5,800081c8 <LOS_TaskCreateOnly+0x314>
800081c0:	08000793          	li	a5,128
800081c4:	0080006f          	j	800081cc <LOS_TaskCreateOnly+0x318>
800081c8:	00000793          	li	a5,0
800081cc:	00e7e7b3          	or	a5,a5,a4
800081d0:	01079793          	slli	a5,a5,0x10
800081d4:	4107d793          	srai	a5,a5,0x10
800081d8:	01079713          	slli	a4,a5,0x10
800081dc:	01075713          	srli	a4,a4,0x10
800081e0:	fe042783          	lw	a5,-32(s0)
800081e4:	00e79223          	sh	a4,4(a5)
800081e8:	fc842783          	lw	a5,-56(s0)
800081ec:	0047d703          	lhu	a4,4(a5)
800081f0:	fe042783          	lw	a5,-32(s0)
800081f4:	00e79323          	sh	a4,6(a5)
800081f8:	fc842783          	lw	a5,-56(s0)
800081fc:	0007a703          	lw	a4,0(a5)
80008200:	fe042783          	lw	a5,-32(s0)
80008204:	00e7aa23          	sw	a4,20(a5)
80008208:	fe042783          	lw	a5,-32(s0)
8000820c:	fff00713          	li	a4,-1
80008210:	04e7a823          	sw	a4,80(a5)
80008214:	fe042783          	lw	a5,-32(s0)
80008218:	0407ae23          	sw	zero,92(a5)
8000821c:	fc842783          	lw	a5,-56(s0)
80008220:	01c7a703          	lw	a4,28(a5)
80008224:	fe042783          	lw	a5,-32(s0)
80008228:	02e7ac23          	sw	a4,56(a5)
8000822c:	fe042783          	lw	a5,-32(s0)
80008230:	0607a223          	sw	zero,100(a5)
80008234:	fcc42783          	lw	a5,-52(s0)
80008238:	fe442703          	lw	a4,-28(s0)
8000823c:	00e7a023          	sw	a4,0(a5)
80008240:	00000793          	li	a5,0
80008244:	0100006f          	j	80008254 <LOS_TaskCreateOnly+0x3a0>
80008248:	fec42503          	lw	a0,-20(s0)
8000824c:	9cdf90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008250:	fe842783          	lw	a5,-24(s0)
80008254:	00078513          	mv	a0,a5
80008258:	03c12083          	lw	ra,60(sp)
8000825c:	03812403          	lw	s0,56(sp)
80008260:	03412483          	lw	s1,52(sp)
80008264:	04010113          	addi	sp,sp,64
80008268:	00008067          	ret
8000826c:	0000                	unimp
	...

80008270 <LOS_TaskCreate>:
LOS_TaskCreate():
80008270:	fd010113          	addi	sp,sp,-48
80008274:	02112623          	sw	ra,44(sp)
80008278:	02812423          	sw	s0,40(sp)
8000827c:	03010413          	addi	s0,sp,48
80008280:	fca42e23          	sw	a0,-36(s0)
80008284:	fcb42c23          	sw	a1,-40(s0)
80008288:	fe042623          	sw	zero,-20(s0)
8000828c:	fd842583          	lw	a1,-40(s0)
80008290:	fdc42503          	lw	a0,-36(s0)
80008294:	c21ff0ef          	jal	ra,80007eb4 <LOS_TaskCreateOnly>
80008298:	fea42623          	sw	a0,-20(s0)
8000829c:	fec42783          	lw	a5,-20(s0)
800082a0:	00078663          	beqz	a5,800082ac <LOS_TaskCreate+0x3c>
800082a4:	fec42783          	lw	a5,-20(s0)
800082a8:	0f80006f          	j	800083a0 <LOS_TaskCreate+0x130>
800082ac:	8001e7b7          	lui	a5,0x8001e
800082b0:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
800082b4:	fdc42783          	lw	a5,-36(s0)
800082b8:	0007a683          	lw	a3,0(a5)
800082bc:	06800793          	li	a5,104
800082c0:	02f687b3          	mul	a5,a3,a5
800082c4:	00f707b3          	add	a5,a4,a5
800082c8:	fef42423          	sw	a5,-24(s0)
800082cc:	92df90ef          	jal	ra,80001bf8 <LOS_IntLock>
800082d0:	fea42223          	sw	a0,-28(s0)
800082d4:	fe842783          	lw	a5,-24(s0)
800082d8:	0047d783          	lhu	a5,4(a5)
800082dc:	ffd7f793          	andi	a5,a5,-3
800082e0:	01079713          	slli	a4,a5,0x10
800082e4:	01075713          	srli	a4,a4,0x10
800082e8:	fe842783          	lw	a5,-24(s0)
800082ec:	00e79223          	sh	a4,4(a5)
800082f0:	fe842783          	lw	a5,-24(s0)
800082f4:	0047d783          	lhu	a5,4(a5)
800082f8:	0047e793          	ori	a5,a5,4
800082fc:	01079713          	slli	a4,a5,0x10
80008300:	01075713          	srli	a4,a4,0x10
80008304:	fe842783          	lw	a5,-24(s0)
80008308:	00e79223          	sh	a4,4(a5)
8000830c:	fe842783          	lw	a5,-24(s0)
80008310:	03c78713          	addi	a4,a5,60
80008314:	fe842783          	lw	a5,-24(s0)
80008318:	0067d783          	lhu	a5,6(a5)
8000831c:	00078593          	mv	a1,a5
80008320:	00070513          	mv	a0,a4
80008324:	838fe0ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
80008328:	8b8fe0ef          	jal	ra,800063e0 <LOS_PriqueueTop>
8000832c:	00050793          	mv	a5,a0
80008330:	fc478713          	addi	a4,a5,-60
80008334:	8001e7b7          	lui	a5,0x8001e
80008338:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
8000833c:	00e7a223          	sw	a4,4(a5)
80008340:	8001e7b7          	lui	a5,0x8001e
80008344:	3507a783          	lw	a5,848(a5) # 8001e350 <__stack_top+0xfffdfd50>
80008348:	04078663          	beqz	a5,80008394 <LOS_TaskCreate+0x124>
8000834c:	8001e7b7          	lui	a5,0x8001e
80008350:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80008354:	04079063          	bnez	a5,80008394 <LOS_TaskCreate+0x124>
80008358:	8001e7b7          	lui	a5,0x8001e
8000835c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008360:	0007a703          	lw	a4,0(a5)
80008364:	8001e7b7          	lui	a5,0x8001e
80008368:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
8000836c:	0047a783          	lw	a5,4(a5)
80008370:	02f70263          	beq	a4,a5,80008394 <LOS_TaskCreate+0x124>
80008374:	8001e7b7          	lui	a5,0x8001e
80008378:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
8000837c:	00079c63          	bnez	a5,80008394 <LOS_TaskCreate+0x124>
80008380:	fe442503          	lw	a0,-28(s0)
80008384:	895f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008388:	991f90ef          	jal	ra,80001d18 <osSchedule>
8000838c:	00000793          	li	a5,0
80008390:	0100006f          	j	800083a0 <LOS_TaskCreate+0x130>
80008394:	fe442503          	lw	a0,-28(s0)
80008398:	881f90ef          	jal	ra,80001c18 <LOS_IntRestore>
8000839c:	00000793          	li	a5,0
800083a0:	00078513          	mv	a0,a5
800083a4:	02c12083          	lw	ra,44(sp)
800083a8:	02812403          	lw	s0,40(sp)
800083ac:	03010113          	addi	sp,sp,48
800083b0:	00008067          	ret
800083b4:	0000                	unimp
	...

800083b8 <LOS_TaskResume>:
LOS_TaskResume():
800083b8:	fd010113          	addi	sp,sp,-48
800083bc:	02112623          	sw	ra,44(sp)
800083c0:	02812423          	sw	s0,40(sp)
800083c4:	03010413          	addi	s0,sp,48
800083c8:	fca42e23          	sw	a0,-36(s0)
800083cc:	fff00793          	li	a5,-1
800083d0:	fef42623          	sw	a5,-20(s0)
800083d4:	fdc42703          	lw	a4,-36(s0)
800083d8:	00f00793          	li	a5,15
800083dc:	00e7f863          	bleu	a4,a5,800083ec <LOS_TaskResume+0x34>
800083e0:	020007b7          	lui	a5,0x2000
800083e4:	20778793          	addi	a5,a5,519 # 2000207 <RAM_SIZE+0x1f80207>
800083e8:	1440006f          	j	8000852c <LOS_TaskResume+0x174>
800083ec:	8001e7b7          	lui	a5,0x8001e
800083f0:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
800083f4:	fdc42683          	lw	a3,-36(s0)
800083f8:	06800793          	li	a5,104
800083fc:	02f687b3          	mul	a5,a3,a5
80008400:	00f707b3          	add	a5,a4,a5
80008404:	fef42423          	sw	a5,-24(s0)
80008408:	ff0f90ef          	jal	ra,80001bf8 <LOS_IntLock>
8000840c:	fea42223          	sw	a0,-28(s0)
80008410:	fe842783          	lw	a5,-24(s0)
80008414:	0047d783          	lhu	a5,4(a5)
80008418:	fef41123          	sh	a5,-30(s0)
8000841c:	fe245783          	lhu	a5,-30(s0)
80008420:	0017f793          	andi	a5,a5,1
80008424:	01079793          	slli	a5,a5,0x10
80008428:	0107d793          	srli	a5,a5,0x10
8000842c:	00078a63          	beqz	a5,80008440 <LOS_TaskResume+0x88>
80008430:	020007b7          	lui	a5,0x2000
80008434:	20a78793          	addi	a5,a5,522 # 200020a <RAM_SIZE+0x1f8020a>
80008438:	fef42623          	sw	a5,-20(s0)
8000843c:	0e40006f          	j	80008520 <LOS_TaskResume+0x168>
80008440:	fe245783          	lhu	a5,-30(s0)
80008444:	0027f793          	andi	a5,a5,2
80008448:	01079793          	slli	a5,a5,0x10
8000844c:	0107d793          	srli	a5,a5,0x10
80008450:	00079a63          	bnez	a5,80008464 <LOS_TaskResume+0xac>
80008454:	020007b7          	lui	a5,0x2000
80008458:	20978793          	addi	a5,a5,521 # 2000209 <RAM_SIZE+0x1f80209>
8000845c:	fef42623          	sw	a5,-20(s0)
80008460:	0c00006f          	j	80008520 <LOS_TaskResume+0x168>
80008464:	fe842783          	lw	a5,-24(s0)
80008468:	0047d783          	lhu	a5,4(a5)
8000846c:	ffd7f793          	andi	a5,a5,-3
80008470:	01079713          	slli	a4,a5,0x10
80008474:	01075713          	srli	a4,a4,0x10
80008478:	fe842783          	lw	a5,-24(s0)
8000847c:	00e79223          	sh	a4,4(a5)
80008480:	fe842783          	lw	a5,-24(s0)
80008484:	0047d703          	lhu	a4,4(a5)
80008488:	000027b7          	lui	a5,0x2
8000848c:	42a78793          	addi	a5,a5,1066 # 242a <OS_TASK_STATUS_NOT_RUNNING+0x233b>
80008490:	00f777b3          	and	a5,a4,a5
80008494:	01079793          	slli	a5,a5,0x10
80008498:	0107d793          	srli	a5,a5,0x10
8000849c:	06079a63          	bnez	a5,80008510 <LOS_TaskResume+0x158>
800084a0:	fe842783          	lw	a5,-24(s0)
800084a4:	0047d783          	lhu	a5,4(a5)
800084a8:	0047e793          	ori	a5,a5,4
800084ac:	01079713          	slli	a4,a5,0x10
800084b0:	01075713          	srli	a4,a4,0x10
800084b4:	fe842783          	lw	a5,-24(s0)
800084b8:	00e79223          	sh	a4,4(a5)
800084bc:	fe842783          	lw	a5,-24(s0)
800084c0:	03c78713          	addi	a4,a5,60
800084c4:	fe842783          	lw	a5,-24(s0)
800084c8:	0067d783          	lhu	a5,6(a5)
800084cc:	00078593          	mv	a1,a5
800084d0:	00070513          	mv	a0,a4
800084d4:	e89fd0ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
800084d8:	8001e7b7          	lui	a5,0x8001e
800084dc:	3507a783          	lw	a5,848(a5) # 8001e350 <__stack_top+0xfffdfd50>
800084e0:	00078c63          	beqz	a5,800084f8 <LOS_TaskResume+0x140>
800084e4:	fe442503          	lw	a0,-28(s0)
800084e8:	f30f90ef          	jal	ra,80001c18 <LOS_IntRestore>
800084ec:	859f90ef          	jal	ra,80001d44 <LOS_Schedule>
800084f0:	00000793          	li	a5,0
800084f4:	0380006f          	j	8000852c <LOS_TaskResume+0x174>
800084f8:	ee9fd0ef          	jal	ra,800063e0 <LOS_PriqueueTop>
800084fc:	00050793          	mv	a5,a0
80008500:	fc478713          	addi	a4,a5,-60
80008504:	8001e7b7          	lui	a5,0x8001e
80008508:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
8000850c:	00e7a223          	sw	a4,4(a5)
80008510:	fe442503          	lw	a0,-28(s0)
80008514:	f04f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008518:	00000793          	li	a5,0
8000851c:	0100006f          	j	8000852c <LOS_TaskResume+0x174>
80008520:	fe442503          	lw	a0,-28(s0)
80008524:	ef4f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008528:	fec42783          	lw	a5,-20(s0)
8000852c:	00078513          	mv	a0,a5
80008530:	02c12083          	lw	ra,44(sp)
80008534:	02812403          	lw	s0,40(sp)
80008538:	03010113          	addi	sp,sp,48
8000853c:	00008067          	ret
80008540:	0000                	unimp
	...

80008544 <LOS_TaskSuspend>:
LOS_TaskSuspend():
80008544:	fd010113          	addi	sp,sp,-48
80008548:	02112623          	sw	ra,44(sp)
8000854c:	02812423          	sw	s0,40(sp)
80008550:	03010413          	addi	s0,sp,48
80008554:	fca42e23          	sw	a0,-36(s0)
80008558:	fff00793          	li	a5,-1
8000855c:	fef42623          	sw	a5,-20(s0)
80008560:	8001e7b7          	lui	a5,0x8001e
80008564:	3247a783          	lw	a5,804(a5) # 8001e324 <__stack_top+0xfffdfd24>
80008568:	fdc42703          	lw	a4,-36(s0)
8000856c:	00f71863          	bne	a4,a5,8000857c <LOS_TaskSuspend+0x38>
80008570:	020007b7          	lui	a5,0x2000
80008574:	21478793          	addi	a5,a5,532 # 2000214 <RAM_SIZE+0x1f80214>
80008578:	1880006f          	j	80008700 <LOS_TaskSuspend+0x1bc>
8000857c:	8001e7b7          	lui	a5,0x8001e
80008580:	3287a783          	lw	a5,808(a5) # 8001e328 <__stack_top+0xfffdfd28>
80008584:	fdc42703          	lw	a4,-36(s0)
80008588:	00f71863          	bne	a4,a5,80008598 <LOS_TaskSuspend+0x54>
8000858c:	020007b7          	lui	a5,0x2000
80008590:	22178793          	addi	a5,a5,545 # 2000221 <RAM_SIZE+0x1f80221>
80008594:	16c0006f          	j	80008700 <LOS_TaskSuspend+0x1bc>
80008598:	8001e7b7          	lui	a5,0x8001e
8000859c:	3407a783          	lw	a5,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
800085a0:	fdc42703          	lw	a4,-36(s0)
800085a4:	00f76863          	bltu	a4,a5,800085b4 <LOS_TaskSuspend+0x70>
800085a8:	020007b7          	lui	a5,0x2000
800085ac:	20778793          	addi	a5,a5,519 # 2000207 <RAM_SIZE+0x1f80207>
800085b0:	1500006f          	j	80008700 <LOS_TaskSuspend+0x1bc>
800085b4:	8001e7b7          	lui	a5,0x8001e
800085b8:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
800085bc:	fdc42683          	lw	a3,-36(s0)
800085c0:	06800793          	li	a5,104
800085c4:	02f687b3          	mul	a5,a3,a5
800085c8:	00f707b3          	add	a5,a4,a5
800085cc:	fef42423          	sw	a5,-24(s0)
800085d0:	e28f90ef          	jal	ra,80001bf8 <LOS_IntLock>
800085d4:	fea42223          	sw	a0,-28(s0)
800085d8:	fe842783          	lw	a5,-24(s0)
800085dc:	0047d783          	lhu	a5,4(a5)
800085e0:	fef41123          	sh	a5,-30(s0)
800085e4:	fe245783          	lhu	a5,-30(s0)
800085e8:	0017f793          	andi	a5,a5,1
800085ec:	01079793          	slli	a5,a5,0x10
800085f0:	0107d793          	srli	a5,a5,0x10
800085f4:	00078a63          	beqz	a5,80008608 <LOS_TaskSuspend+0xc4>
800085f8:	020007b7          	lui	a5,0x2000
800085fc:	20a78793          	addi	a5,a5,522 # 200020a <RAM_SIZE+0x1f8020a>
80008600:	fef42623          	sw	a5,-20(s0)
80008604:	0f00006f          	j	800086f4 <LOS_TaskSuspend+0x1b0>
80008608:	fe245783          	lhu	a5,-30(s0)
8000860c:	0027f793          	andi	a5,a5,2
80008610:	01079793          	slli	a5,a5,0x10
80008614:	0107d793          	srli	a5,a5,0x10
80008618:	00078a63          	beqz	a5,8000862c <LOS_TaskSuspend+0xe8>
8000861c:	020007b7          	lui	a5,0x2000
80008620:	20878793          	addi	a5,a5,520 # 2000208 <RAM_SIZE+0x1f80208>
80008624:	fef42623          	sw	a5,-20(s0)
80008628:	0cc0006f          	j	800086f4 <LOS_TaskSuspend+0x1b0>
8000862c:	fe245783          	lhu	a5,-30(s0)
80008630:	0107f793          	andi	a5,a5,16
80008634:	01079793          	slli	a5,a5,0x10
80008638:	0107d793          	srli	a5,a5,0x10
8000863c:	02078063          	beqz	a5,8000865c <LOS_TaskSuspend+0x118>
80008640:	8001e7b7          	lui	a5,0x8001e
80008644:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80008648:	00078a63          	beqz	a5,8000865c <LOS_TaskSuspend+0x118>
8000864c:	030007b7          	lui	a5,0x3000
80008650:	21578793          	addi	a5,a5,533 # 3000215 <RAM_SIZE+0x2f80215>
80008654:	fef42623          	sw	a5,-20(s0)
80008658:	09c0006f          	j	800086f4 <LOS_TaskSuspend+0x1b0>
8000865c:	fe245783          	lhu	a5,-30(s0)
80008660:	0047f793          	andi	a5,a5,4
80008664:	01079793          	slli	a5,a5,0x10
80008668:	0107d793          	srli	a5,a5,0x10
8000866c:	02078863          	beqz	a5,8000869c <LOS_TaskSuspend+0x158>
80008670:	fe842783          	lw	a5,-24(s0)
80008674:	03c78793          	addi	a5,a5,60
80008678:	00078513          	mv	a0,a5
8000867c:	d31fd0ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80008680:	fe842783          	lw	a5,-24(s0)
80008684:	0047d783          	lhu	a5,4(a5)
80008688:	ffb7f793          	andi	a5,a5,-5
8000868c:	01079713          	slli	a4,a5,0x10
80008690:	01075713          	srli	a4,a4,0x10
80008694:	fe842783          	lw	a5,-24(s0)
80008698:	00e79223          	sh	a4,4(a5)
8000869c:	fe842783          	lw	a5,-24(s0)
800086a0:	0047d783          	lhu	a5,4(a5)
800086a4:	0027e793          	ori	a5,a5,2
800086a8:	01079713          	slli	a4,a5,0x10
800086ac:	01075713          	srli	a4,a4,0x10
800086b0:	fe842783          	lw	a5,-24(s0)
800086b4:	00e79223          	sh	a4,4(a5)
800086b8:	8001e7b7          	lui	a5,0x8001e
800086bc:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
800086c0:	0007a783          	lw	a5,0(a5)
800086c4:	0107a783          	lw	a5,16(a5)
800086c8:	fdc42703          	lw	a4,-36(s0)
800086cc:	00f71c63          	bne	a4,a5,800086e4 <LOS_TaskSuspend+0x1a0>
800086d0:	fe442503          	lw	a0,-28(s0)
800086d4:	d44f90ef          	jal	ra,80001c18 <LOS_IntRestore>
800086d8:	e6cf90ef          	jal	ra,80001d44 <LOS_Schedule>
800086dc:	00000793          	li	a5,0
800086e0:	0200006f          	j	80008700 <LOS_TaskSuspend+0x1bc>
800086e4:	fe442503          	lw	a0,-28(s0)
800086e8:	d30f90ef          	jal	ra,80001c18 <LOS_IntRestore>
800086ec:	00000793          	li	a5,0
800086f0:	0100006f          	j	80008700 <LOS_TaskSuspend+0x1bc>
800086f4:	fe442503          	lw	a0,-28(s0)
800086f8:	d20f90ef          	jal	ra,80001c18 <LOS_IntRestore>
800086fc:	fec42783          	lw	a5,-20(s0)
80008700:	00078513          	mv	a0,a5
80008704:	02c12083          	lw	ra,44(sp)
80008708:	02812403          	lw	s0,40(sp)
8000870c:	03010113          	addi	sp,sp,48
80008710:	00008067          	ret
80008714:	0000                	unimp
	...

80008718 <LOS_TaskDelete>:
LOS_TaskDelete():
80008718:	fd010113          	addi	sp,sp,-48
8000871c:	02112623          	sw	ra,44(sp)
80008720:	02812423          	sw	s0,40(sp)
80008724:	03010413          	addi	s0,sp,48
80008728:	fca42e23          	sw	a0,-36(s0)
8000872c:	fff00793          	li	a5,-1
80008730:	fef42623          	sw	a5,-20(s0)
80008734:	8001e7b7          	lui	a5,0x8001e
80008738:	3247a783          	lw	a5,804(a5) # 8001e324 <__stack_top+0xfffdfd24>
8000873c:	fdc42703          	lw	a4,-36(s0)
80008740:	00f71863          	bne	a4,a5,80008750 <LOS_TaskDelete+0x38>
80008744:	020007b7          	lui	a5,0x2000
80008748:	21478793          	addi	a5,a5,532 # 2000214 <RAM_SIZE+0x1f80214>
8000874c:	2d40006f          	j	80008a20 <LOS_TaskDelete+0x308>
80008750:	8001e7b7          	lui	a5,0x8001e
80008754:	3407a783          	lw	a5,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
80008758:	fdc42703          	lw	a4,-36(s0)
8000875c:	00f76863          	bltu	a4,a5,8000876c <LOS_TaskDelete+0x54>
80008760:	020007b7          	lui	a5,0x2000
80008764:	20778793          	addi	a5,a5,519 # 2000207 <RAM_SIZE+0x1f80207>
80008768:	2b80006f          	j	80008a20 <LOS_TaskDelete+0x308>
8000876c:	c8cf90ef          	jal	ra,80001bf8 <LOS_IntLock>
80008770:	fea42423          	sw	a0,-24(s0)
80008774:	8001e7b7          	lui	a5,0x8001e
80008778:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
8000877c:	fdc42683          	lw	a3,-36(s0)
80008780:	06800793          	li	a5,104
80008784:	02f687b3          	mul	a5,a3,a5
80008788:	00f707b3          	add	a5,a4,a5
8000878c:	fef42223          	sw	a5,-28(s0)
80008790:	fe442783          	lw	a5,-28(s0)
80008794:	0047d783          	lhu	a5,4(a5)
80008798:	fef41123          	sh	a5,-30(s0)
8000879c:	fe442783          	lw	a5,-28(s0)
800087a0:	0047d783          	lhu	a5,4(a5)
800087a4:	0017f793          	andi	a5,a5,1
800087a8:	01079793          	slli	a5,a5,0x10
800087ac:	0107d793          	srli	a5,a5,0x10
800087b0:	00078a63          	beqz	a5,800087c4 <LOS_TaskDelete+0xac>
800087b4:	020007b7          	lui	a5,0x2000
800087b8:	20a78793          	addi	a5,a5,522 # 200020a <RAM_SIZE+0x1f8020a>
800087bc:	fef42623          	sw	a5,-20(s0)
800087c0:	2540006f          	j	80008a14 <LOS_TaskDelete+0x2fc>
800087c4:	fe245783          	lhu	a5,-30(s0)
800087c8:	0107f793          	andi	a5,a5,16
800087cc:	01079793          	slli	a5,a5,0x10
800087d0:	0107d793          	srli	a5,a5,0x10
800087d4:	02078063          	beqz	a5,800087f4 <LOS_TaskDelete+0xdc>
800087d8:	8001e7b7          	lui	a5,0x8001e
800087dc:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
800087e0:	00078a63          	beqz	a5,800087f4 <LOS_TaskDelete+0xdc>
800087e4:	030007b7          	lui	a5,0x3000
800087e8:	20b78793          	addi	a5,a5,523 # 300020b <RAM_SIZE+0x2f8020b>
800087ec:	fef42623          	sw	a5,-20(s0)
800087f0:	2240006f          	j	80008a14 <LOS_TaskDelete+0x2fc>
800087f4:	fe245783          	lhu	a5,-30(s0)
800087f8:	0047f793          	andi	a5,a5,4
800087fc:	01079793          	slli	a5,a5,0x10
80008800:	0107d793          	srli	a5,a5,0x10
80008804:	02078a63          	beqz	a5,80008838 <LOS_TaskDelete+0x120>
80008808:	fe442783          	lw	a5,-28(s0)
8000880c:	03c78793          	addi	a5,a5,60
80008810:	00078513          	mv	a0,a5
80008814:	b99fd0ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80008818:	fe442783          	lw	a5,-28(s0)
8000881c:	0047d783          	lhu	a5,4(a5)
80008820:	ffb7f793          	andi	a5,a5,-5
80008824:	01079713          	slli	a4,a5,0x10
80008828:	01075713          	srli	a4,a4,0x10
8000882c:	fe442783          	lw	a5,-28(s0)
80008830:	00e79223          	sh	a4,4(a5)
80008834:	0400006f          	j	80008874 <LOS_TaskDelete+0x15c>
80008838:	fe245783          	lhu	a5,-30(s0)
8000883c:	0087f793          	andi	a5,a5,8
80008840:	01079793          	slli	a5,a5,0x10
80008844:	0107d793          	srli	a5,a5,0x10
80008848:	00079e63          	bnez	a5,80008864 <LOS_TaskDelete+0x14c>
8000884c:	fe245703          	lhu	a4,-30(s0)
80008850:	000027b7          	lui	a5,0x2
80008854:	00f777b3          	and	a5,a4,a5
80008858:	01079793          	slli	a5,a5,0x10
8000885c:	0107d793          	srli	a5,a5,0x10
80008860:	00078a63          	beqz	a5,80008874 <LOS_TaskDelete+0x15c>
80008864:	fe442783          	lw	a5,-28(s0)
80008868:	03c78793          	addi	a5,a5,60 # 203c <OS_TASK_STATUS_NOT_RUNNING+0x1f4d>
8000886c:	00078513          	mv	a0,a5
80008870:	8b1fe0ef          	jal	ra,80007120 <LOS_ListDelete>
80008874:	fe245783          	lhu	a5,-30(s0)
80008878:	0607f793          	andi	a5,a5,96
8000887c:	01079793          	slli	a5,a5,0x10
80008880:	0107d793          	srli	a5,a5,0x10
80008884:	00078663          	beqz	a5,80008890 <LOS_TaskDelete+0x178>
80008888:	fe442503          	lw	a0,-28(s0)
8000888c:	c25fe0ef          	jal	ra,800074b0 <osTimerListDelete>
80008890:	fe442783          	lw	a5,-28(s0)
80008894:	0047d783          	lhu	a5,4(a5)
80008898:	ffd7f793          	andi	a5,a5,-3
8000889c:	01079713          	slli	a4,a5,0x10
800088a0:	01075713          	srli	a4,a4,0x10
800088a4:	fe442783          	lw	a5,-28(s0)
800088a8:	00e79223          	sh	a4,4(a5)
800088ac:	fe442783          	lw	a5,-28(s0)
800088b0:	0047d783          	lhu	a5,4(a5)
800088b4:	0017e793          	ori	a5,a5,1
800088b8:	01079713          	slli	a4,a5,0x10
800088bc:	01075713          	srli	a4,a4,0x10
800088c0:	fe442783          	lw	a5,-28(s0)
800088c4:	00e79223          	sh	a4,4(a5)
800088c8:	fe442783          	lw	a5,-28(s0)
800088cc:	fff00713          	li	a4,-1
800088d0:	04e7a823          	sw	a4,80(a5)
800088d4:	fe442783          	lw	a5,-28(s0)
800088d8:	0407ae23          	sw	zero,92(a5)
800088dc:	b05fd0ef          	jal	ra,800063e0 <LOS_PriqueueTop>
800088e0:	00050793          	mv	a5,a0
800088e4:	fc478713          	addi	a4,a5,-60
800088e8:	8001e7b7          	lui	a5,0x8001e
800088ec:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
800088f0:	00e7a223          	sw	a4,4(a5)
800088f4:	fe442783          	lw	a5,-28(s0)
800088f8:	0047d783          	lhu	a5,4(a5)
800088fc:	0107f793          	andi	a5,a5,16
80008900:	01079793          	slli	a5,a5,0x10
80008904:	0107d793          	srli	a5,a5,0x10
80008908:	0c078063          	beqz	a5,800089c8 <LOS_TaskDelete+0x2b0>
8000890c:	fe442783          	lw	a5,-28(s0)
80008910:	03c78793          	addi	a5,a5,60
80008914:	00078593          	mv	a1,a5
80008918:	8001e7b7          	lui	a5,0x8001e
8000891c:	32c78513          	addi	a0,a5,812 # 8001e32c <__stack_top+0xfffdfd2c>
80008920:	fbcfe0ef          	jal	ra,800070dc <LOS_ListTailInsert>
80008924:	8001e7b7          	lui	a5,0x8001e
80008928:	33c7a703          	lw	a4,828(a5) # 8001e33c <__stack_top+0xfffdfd3c>
8000892c:	8001e7b7          	lui	a5,0x8001e
80008930:	3407a683          	lw	a3,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
80008934:	06800793          	li	a5,104
80008938:	02f687b3          	mul	a5,a3,a5
8000893c:	00f70733          	add	a4,a4,a5
80008940:	8001e7b7          	lui	a5,0x8001e
80008944:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008948:	00e7a023          	sw	a4,0(a5)
8000894c:	8001e7b7          	lui	a5,0x8001e
80008950:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008954:	0007a783          	lw	a5,0(a5)
80008958:	fdc42703          	lw	a4,-36(s0)
8000895c:	00e7a823          	sw	a4,16(a5)
80008960:	8001e7b7          	lui	a5,0x8001e
80008964:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008968:	0007a783          	lw	a5,0(a5)
8000896c:	fe442703          	lw	a4,-28(s0)
80008970:	00475703          	lhu	a4,4(a4)
80008974:	00e79223          	sh	a4,4(a5)
80008978:	8001e7b7          	lui	a5,0x8001e
8000897c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008980:	0007a783          	lw	a5,0(a5)
80008984:	fe442703          	lw	a4,-28(s0)
80008988:	00c72703          	lw	a4,12(a4)
8000898c:	00e7a623          	sw	a4,12(a5)
80008990:	8001e7b7          	lui	a5,0x8001e
80008994:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008998:	0007a783          	lw	a5,0(a5)
8000899c:	fe442703          	lw	a4,-28(s0)
800089a0:	03872703          	lw	a4,56(a4)
800089a4:	02e7ac23          	sw	a4,56(a5)
800089a8:	fe442783          	lw	a5,-28(s0)
800089ac:	00100713          	li	a4,1
800089b0:	00e79223          	sh	a4,4(a5)
800089b4:	fe842503          	lw	a0,-24(s0)
800089b8:	a60f90ef          	jal	ra,80001c18 <LOS_IntRestore>
800089bc:	b5cf90ef          	jal	ra,80001d18 <osSchedule>
800089c0:	00000793          	li	a5,0
800089c4:	05c0006f          	j	80008a20 <LOS_TaskDelete+0x308>
800089c8:	fe442783          	lw	a5,-28(s0)
800089cc:	00100713          	li	a4,1
800089d0:	00e79223          	sh	a4,4(a5)
800089d4:	fe442783          	lw	a5,-28(s0)
800089d8:	03c78793          	addi	a5,a5,60
800089dc:	00078593          	mv	a1,a5
800089e0:	8001e7b7          	lui	a5,0x8001e
800089e4:	35478513          	addi	a0,a5,852 # 8001e354 <__stack_top+0xfffdfd54>
800089e8:	e94fe0ef          	jal	ra,8000707c <LOS_ListAdd>
800089ec:	eb01a703          	lw	a4,-336(gp) # 8000e1e0 <m_aucSysMem0>
800089f0:	fe442783          	lw	a5,-28(s0)
800089f4:	00c7a783          	lw	a5,12(a5)
800089f8:	00078593          	mv	a1,a5
800089fc:	00070513          	mv	a0,a4
80008a00:	a41fa0ef          	jal	ra,80003440 <LOS_MemFree>
80008a04:	fe842503          	lw	a0,-24(s0)
80008a08:	a10f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008a0c:	00000793          	li	a5,0
80008a10:	0100006f          	j	80008a20 <LOS_TaskDelete+0x308>
80008a14:	fe842503          	lw	a0,-24(s0)
80008a18:	a00f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008a1c:	fec42783          	lw	a5,-20(s0)
80008a20:	00078513          	mv	a0,a5
80008a24:	02c12083          	lw	ra,44(sp)
80008a28:	02812403          	lw	s0,40(sp)
80008a2c:	03010113          	addi	sp,sp,48
80008a30:	00008067          	ret
80008a34:	0000                	unimp
	...

80008a38 <LOS_TaskDelay>:
LOS_TaskDelay():
80008a38:	fd010113          	addi	sp,sp,-48
80008a3c:	02112623          	sw	ra,44(sp)
80008a40:	02812423          	sw	s0,40(sp)
80008a44:	03010413          	addi	s0,sp,48
80008a48:	fca42e23          	sw	a0,-36(s0)
80008a4c:	ddc1a783          	lw	a5,-548(gp) # 8000e10c <g_vuwIntCount>
80008a50:	00078863          	beqz	a5,80008a60 <LOS_TaskDelay+0x28>
80008a54:	030007b7          	lui	a5,0x3000
80008a58:	20d78793          	addi	a5,a5,525 # 300020d <RAM_SIZE+0x2f8020d>
80008a5c:	0d00006f          	j	80008b2c <LOS_TaskDelay+0xf4>
80008a60:	8001e7b7          	lui	a5,0x8001e
80008a64:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80008a68:	00078863          	beqz	a5,80008a78 <LOS_TaskDelay+0x40>
80008a6c:	020007b7          	lui	a5,0x2000
80008a70:	20e78793          	addi	a5,a5,526 # 200020e <RAM_SIZE+0x1f8020e>
80008a74:	0b80006f          	j	80008b2c <LOS_TaskDelay+0xf4>
80008a78:	fdc42783          	lw	a5,-36(s0)
80008a7c:	00079863          	bnez	a5,80008a8c <LOS_TaskDelay+0x54>
80008a80:	0c4000ef          	jal	ra,80008b44 <LOS_TaskYield>
80008a84:	00050793          	mv	a5,a0
80008a88:	0a40006f          	j	80008b2c <LOS_TaskDelay+0xf4>
80008a8c:	96cf90ef          	jal	ra,80001bf8 <LOS_IntLock>
80008a90:	fea42623          	sw	a0,-20(s0)
80008a94:	8001e7b7          	lui	a5,0x8001e
80008a98:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008a9c:	0007a783          	lw	a5,0(a5)
80008aa0:	03c78793          	addi	a5,a5,60
80008aa4:	00078513          	mv	a0,a5
80008aa8:	905fd0ef          	jal	ra,800063ac <LOS_PriqueueDequeue>
80008aac:	8001e7b7          	lui	a5,0x8001e
80008ab0:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008ab4:	0007a783          	lw	a5,0(a5)
80008ab8:	0047d703          	lhu	a4,4(a5)
80008abc:	8001e7b7          	lui	a5,0x8001e
80008ac0:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008ac4:	0007a783          	lw	a5,0(a5)
80008ac8:	ffb77713          	andi	a4,a4,-5
80008acc:	01071713          	slli	a4,a4,0x10
80008ad0:	01075713          	srli	a4,a4,0x10
80008ad4:	00e79223          	sh	a4,4(a5)
80008ad8:	8001e7b7          	lui	a5,0x8001e
80008adc:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008ae0:	0007a783          	lw	a5,0(a5)
80008ae4:	fdc42583          	lw	a1,-36(s0)
80008ae8:	00078513          	mv	a0,a5
80008aec:	fa4fe0ef          	jal	ra,80007290 <osTaskAdd2TimerList>
80008af0:	8001e7b7          	lui	a5,0x8001e
80008af4:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008af8:	0007a783          	lw	a5,0(a5)
80008afc:	0047d703          	lhu	a4,4(a5)
80008b00:	8001e7b7          	lui	a5,0x8001e
80008b04:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008b08:	0007a783          	lw	a5,0(a5)
80008b0c:	02076713          	ori	a4,a4,32
80008b10:	01071713          	slli	a4,a4,0x10
80008b14:	01075713          	srli	a4,a4,0x10
80008b18:	00e79223          	sh	a4,4(a5)
80008b1c:	fec42503          	lw	a0,-20(s0)
80008b20:	8f8f90ef          	jal	ra,80001c18 <LOS_IntRestore>
80008b24:	a20f90ef          	jal	ra,80001d44 <LOS_Schedule>
80008b28:	00000793          	li	a5,0
80008b2c:	00078513          	mv	a0,a5
80008b30:	02c12083          	lw	ra,44(sp)
80008b34:	02812403          	lw	s0,40(sp)
80008b38:	03010113          	addi	sp,sp,48
80008b3c:	00008067          	ret
80008b40:	0000                	unimp
	...

80008b44 <LOS_TaskYield>:
LOS_TaskYield():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:999
               uwNextTask
 Output      : None
 Return      : LOS_OK on success or error code on failure
 *****************************************************************************/
LITE_OS_SEC_TEXT_MINOR UINT32 LOS_TaskYield(VOID)
{
80008b44:	fe010113          	addi	sp,sp,-32
80008b48:	00112e23          	sw	ra,28(sp)
80008b4c:	00812c23          	sw	s0,24(sp)
80008b50:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1000
    UINT32 uwTskCount = 0;
80008b54:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1003
    UINTPTR uvIntSave;

    if(g_stLosTask.pstRunTask->uwTaskID >= g_uwTskMaxNum)
80008b58:	8001e7b7          	lui	a5,0x8001e
80008b5c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008b60:	0007a783          	lw	a5,0(a5)
80008b64:	0107a703          	lw	a4,16(a5)
80008b68:	8001e7b7          	lui	a5,0x8001e
80008b6c:	3407a783          	lw	a5,832(a5) # 8001e340 <__stack_top+0xfffdfd40>
80008b70:	00f76863          	bltu	a4,a5,80008b80 <LOS_TaskYield+0x3c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1005
    {
        return LOS_ERRNO_TSK_ID_INVALID;
80008b74:	020007b7          	lui	a5,0x2000
80008b78:	20778793          	addi	a5,a5,519 # 2000207 <RAM_SIZE+0x1f80207>
80008b7c:	0c80006f          	j	80008c44 <LOS_TaskYield+0x100>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1007
    }
    uvIntSave = LOS_IntLock();
80008b80:	878f90ef          	jal	ra,80001bf8 <LOS_IntLock>
80008b84:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1008
    uwTskCount = LOS_PriqueueSize(g_stLosTask.pstRunTask->usPriority);
80008b88:	8001e7b7          	lui	a5,0x8001e
80008b8c:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008b90:	0007a783          	lw	a5,0(a5)
80008b94:	0067d783          	lhu	a5,6(a5)
80008b98:	00078513          	mv	a0,a5
80008b9c:	8d5fd0ef          	jal	ra,80006470 <LOS_PriqueueSize>
80008ba0:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1009
    if (uwTskCount > 1)
80008ba4:	fec42703          	lw	a4,-20(s0)
80008ba8:	00100793          	li	a5,1
80008bac:	08e7f463          	bleu	a4,a5,80008c34 <LOS_TaskYield+0xf0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1011
    {
        LOS_ListDelete(&(g_stLosTask.pstRunTask->stPendList));
80008bb0:	8001e7b7          	lui	a5,0x8001e
80008bb4:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008bb8:	0007a783          	lw	a5,0(a5)
80008bbc:	03c78793          	addi	a5,a5,60
80008bc0:	00078513          	mv	a0,a5
80008bc4:	d5cfe0ef          	jal	ra,80007120 <LOS_ListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1012
        g_stLosTask.pstRunTask->usTaskStatus |= OS_TASK_STATUS_READY;
80008bc8:	8001e7b7          	lui	a5,0x8001e
80008bcc:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008bd0:	0007a783          	lw	a5,0(a5)
80008bd4:	0047d703          	lhu	a4,4(a5)
80008bd8:	8001e7b7          	lui	a5,0x8001e
80008bdc:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008be0:	0007a783          	lw	a5,0(a5)
80008be4:	00476713          	ori	a4,a4,4
80008be8:	01071713          	slli	a4,a4,0x10
80008bec:	01075713          	srli	a4,a4,0x10
80008bf0:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1013
        LOS_PriqueueEnqueue(&(g_stLosTask.pstRunTask->stPendList), g_stLosTask.pstRunTask->usPriority);
80008bf4:	8001e7b7          	lui	a5,0x8001e
80008bf8:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008bfc:	0007a783          	lw	a5,0(a5)
80008c00:	03c78713          	addi	a4,a5,60
80008c04:	8001e7b7          	lui	a5,0x8001e
80008c08:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008c0c:	0007a783          	lw	a5,0(a5)
80008c10:	0067d783          	lhu	a5,6(a5)
80008c14:	00078593          	mv	a1,a5
80008c18:	00070513          	mv	a0,a4
80008c1c:	f40fd0ef          	jal	ra,8000635c <LOS_PriqueueEnqueue>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1021
    {
        (VOID)LOS_IntRestore(uvIntSave);
        return LOS_ERRNO_TSK_YIELD_NOT_ENOUGH_TASK;
    }

    (VOID)LOS_IntRestore(uvIntSave);
80008c20:	fe842503          	lw	a0,-24(s0)
80008c24:	ff5f80ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1022
    LOS_Schedule();
80008c28:	91cf90ef          	jal	ra,80001d44 <LOS_Schedule>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1023
    return LOS_OK;
80008c2c:	00000793          	li	a5,0
80008c30:	0140006f          	j	80008c44 <LOS_TaskYield+0x100>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1017
        (VOID)LOS_IntRestore(uvIntSave);
80008c34:	fe842503          	lw	a0,-24(s0)
80008c38:	fe1f80ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1018
        return LOS_ERRNO_TSK_YIELD_NOT_ENOUGH_TASK;
80008c3c:	020007b7          	lui	a5,0x2000
80008c40:	21078793          	addi	a5,a5,528 # 2000210 <RAM_SIZE+0x1f80210>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1024
}
80008c44:	00078513          	mv	a0,a5
80008c48:	01c12083          	lw	ra,28(sp)
80008c4c:	01812403          	lw	s0,24(sp)
80008c50:	02010113          	addi	sp,sp,32
80008c54:	00008067          	ret
80008c58:	0000                	unimp
	...

80008c5c <LOS_TaskLock>:
LOS_TaskLock():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1034
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT_MINOR VOID LOS_TaskLock(VOID)
{
80008c5c:	fe010113          	addi	sp,sp,-32
80008c60:	00112e23          	sw	ra,28(sp)
80008c64:	00812c23          	sw	s0,24(sp)
80008c68:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1037
    UINTPTR uvIntSave;

    uvIntSave = LOS_IntLock();
80008c6c:	f8df80ef          	jal	ra,80001bf8 <LOS_IntLock>
80008c70:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1038
    g_usLosTaskLock++;
80008c74:	8001e7b7          	lui	a5,0x8001e
80008c78:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80008c7c:	00178793          	addi	a5,a5,1
80008c80:	01079713          	slli	a4,a5,0x10
80008c84:	01075713          	srli	a4,a4,0x10
80008c88:	8001e7b7          	lui	a5,0x8001e
80008c8c:	34e79223          	sh	a4,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1039
    (VOID)LOS_IntRestore(uvIntSave);
80008c90:	fec42503          	lw	a0,-20(s0)
80008c94:	f85f80ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1040
}
80008c98:	00000013          	nop
80008c9c:	01c12083          	lw	ra,28(sp)
80008ca0:	01812403          	lw	s0,24(sp)
80008ca4:	02010113          	addi	sp,sp,32
80008ca8:	00008067          	ret
80008cac:	0000                	unimp
	...

80008cb0 <LOS_TaskUnlock>:
LOS_TaskUnlock():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1050
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
LITE_OS_SEC_TEXT_MINOR VOID LOS_TaskUnlock(VOID)
{
80008cb0:	fe010113          	addi	sp,sp,-32
80008cb4:	00112e23          	sw	ra,28(sp)
80008cb8:	00812c23          	sw	s0,24(sp)
80008cbc:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1053
    UINTPTR uvIntSave;

    uvIntSave = LOS_IntLock();
80008cc0:	f39f80ef          	jal	ra,80001bf8 <LOS_IntLock>
80008cc4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1054
    if (g_usLosTaskLock > 0)
80008cc8:	8001e7b7          	lui	a5,0x8001e
80008ccc:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80008cd0:	02078e63          	beqz	a5,80008d0c <LOS_TaskUnlock+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1056
    {
        g_usLosTaskLock--;
80008cd4:	8001e7b7          	lui	a5,0x8001e
80008cd8:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80008cdc:	fff78793          	addi	a5,a5,-1
80008ce0:	01079713          	slli	a4,a5,0x10
80008ce4:	01075713          	srli	a4,a4,0x10
80008ce8:	8001e7b7          	lui	a5,0x8001e
80008cec:	34e79223          	sh	a4,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1057
        if (0 == g_usLosTaskLock)
80008cf0:	8001e7b7          	lui	a5,0x8001e
80008cf4:	3447d783          	lhu	a5,836(a5) # 8001e344 <__stack_top+0xfffdfd44>
80008cf8:	00079a63          	bnez	a5,80008d0c <LOS_TaskUnlock+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1059
        {
            (VOID)LOS_IntRestore(uvIntSave);
80008cfc:	fec42503          	lw	a0,-20(s0)
80008d00:	f19f80ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1060
            LOS_Schedule();
80008d04:	840f90ef          	jal	ra,80001d44 <LOS_Schedule>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1061
            return;
80008d08:	00c0006f          	j	80008d14 <LOS_TaskUnlock+0x64>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1065
        }
    }

    (VOID)LOS_IntRestore(uvIntSave);
80008d0c:	fec42503          	lw	a0,-20(s0)
80008d10:	f09f80ef          	jal	ra,80001c18 <LOS_IntRestore>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_task.c:1066
}
80008d14:	01c12083          	lw	ra,28(sp)
80008d18:	01812403          	lw	s0,24(sp)
80008d1c:	02010113          	addi	sp,sp,32
80008d20:	00008067          	ret
80008d24:	0000                	unimp
	...

80008d28 <osTickHandler>:
osTickHandler():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_tick.c:61
 Output      : None
 Return      : None
 *****************************************************************************/
extern void hal_clock_irqclear(void);
LITE_OS_SEC_TEXT VOID osTickHandler(VOID)
{
80008d28:	ff010113          	addi	sp,sp,-16
80008d2c:	00112623          	sw	ra,12(sp)
80008d30:	00812423          	sw	s0,8(sp)
80008d34:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_tick.c:62
    g_ullTickCount ++;
80008d38:	8001e7b7          	lui	a5,0x8001e
80008d3c:	36878793          	addi	a5,a5,872 # 8001e368 <__stack_top+0xfffdfd68>
80008d40:	0047a803          	lw	a6,4(a5)
80008d44:	0007a783          	lw	a5,0(a5)
80008d48:	00100593          	li	a1,1
80008d4c:	00000613          	li	a2,0
80008d50:	00b786b3          	add	a3,a5,a1
80008d54:	00068513          	mv	a0,a3
80008d58:	00f53533          	sltu	a0,a0,a5
80008d5c:	00c80733          	add	a4,a6,a2
80008d60:	00e507b3          	add	a5,a0,a4
80008d64:	00078713          	mv	a4,a5
80008d68:	00068793          	mv	a5,a3
80008d6c:	00070813          	mv	a6,a4
80008d70:	8001e737          	lui	a4,0x8001e
80008d74:	36870713          	addi	a4,a4,872 # 8001e368 <__stack_top+0xfffdfd68>
80008d78:	00f72023          	sw	a5,0(a4)
80008d7c:	01072223          	sw	a6,4(a4)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_tick.c:65

    #if(LOSCFG_BASE_CORE_TIMESLICE == YES)
    osTimesliceCheck();
80008d80:	060000ef          	jal	ra,80008de0 <osTimesliceCheck>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_tick.c:68
    #endif

    osTaskScan();   //task timeout scan
80008d84:	ffcfe0ef          	jal	ra,80007580 <osTaskScan>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_tick.c:71

    #if (LOSCFG_BASE_CORE_SWTMR == YES)
    if (osSwtmrScan() != LOS_OK){
80008d88:	cd9fd0ef          	jal	ra,80006a60 <osSwtmrScan>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_tick.c:75
        PRINT_ERR("%s, %d\n", __FUNCTION__, __LINE__);
    }
    #endif
}
80008d8c:	00000013          	nop
80008d90:	00c12083          	lw	ra,12(sp)
80008d94:	00812403          	lw	s0,8(sp)
80008d98:	01010113          	addi	sp,sp,16
80008d9c:	00008067          	ret
80008da0:	0000                	unimp
	...

80008da4 <osTimesliceInit>:
osTimesliceInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:57
 Input        : None
 Output       : None
 Return       : None
 *****************************************************************************/
LITE_OS_SEC_TEXT_INIT VOID osTimesliceInit(VOID)
{
80008da4:	ff010113          	addi	sp,sp,-16
80008da8:	00812623          	sw	s0,12(sp)
80008dac:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:58
    g_stTaskTimeSlice.pstTask = (LOS_TASK_CB *)NULL;
80008db0:	8001e7b7          	lui	a5,0x8001e
80008db4:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008db8:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:59
    g_stTaskTimeSlice.usTout = LOSCFG_BASE_CORE_TIMESLICE_TIMEOUT;
80008dbc:	8001e7b7          	lui	a5,0x8001e
80008dc0:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008dc4:	00a00713          	li	a4,10
80008dc8:	00e79323          	sh	a4,6(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:60
}
80008dcc:	00000013          	nop
80008dd0:	00c12403          	lw	s0,12(sp)
80008dd4:	01010113          	addi	sp,sp,16
80008dd8:	00008067          	ret
80008ddc:	0000                	unimp
	...

80008de0 <osTimesliceCheck>:
osTimesliceCheck():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:70
 Input        : None
 Output       : None
 Return       : None
 *****************************************************************************/
LITE_OS_SEC_TEXT VOID osTimesliceCheck(VOID)
{
80008de0:	ff010113          	addi	sp,sp,-16
80008de4:	00112623          	sw	ra,12(sp)
80008de8:	00812423          	sw	s0,8(sp)
80008dec:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:71
    if (g_stTaskTimeSlice.pstTask != g_stLosTask.pstRunTask)
80008df0:	8001e7b7          	lui	a5,0x8001e
80008df4:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008df8:	0007a703          	lw	a4,0(a5)
80008dfc:	8001e7b7          	lui	a5,0x8001e
80008e00:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008e04:	0007a783          	lw	a5,0(a5)
80008e08:	06f70263          	beq	a4,a5,80008e6c <osTimesliceCheck+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:73
    {
        g_stTaskTimeSlice.pstTask = g_stLosTask.pstRunTask;
80008e0c:	8001e7b7          	lui	a5,0x8001e
80008e10:	34878793          	addi	a5,a5,840 # 8001e348 <__stack_top+0xfffdfd48>
80008e14:	0007a703          	lw	a4,0(a5)
80008e18:	8001e7b7          	lui	a5,0x8001e
80008e1c:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008e20:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:74
        g_stTaskTimeSlice.usTime = (UINT16)g_ullTickCount + g_stTaskTimeSlice.usTout - 1;
80008e24:	8001e7b7          	lui	a5,0x8001e
80008e28:	36878793          	addi	a5,a5,872 # 8001e368 <__stack_top+0xfffdfd68>
80008e2c:	0047a803          	lw	a6,4(a5)
80008e30:	0007a783          	lw	a5,0(a5)
80008e34:	01079713          	slli	a4,a5,0x10
80008e38:	01075713          	srli	a4,a4,0x10
80008e3c:	8001e7b7          	lui	a5,0x8001e
80008e40:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008e44:	0067d783          	lhu	a5,6(a5)
80008e48:	00f707b3          	add	a5,a4,a5
80008e4c:	01079793          	slli	a5,a5,0x10
80008e50:	0107d793          	srli	a5,a5,0x10
80008e54:	fff78793          	addi	a5,a5,-1
80008e58:	01079713          	slli	a4,a5,0x10
80008e5c:	01075713          	srli	a4,a4,0x10
80008e60:	8001e7b7          	lui	a5,0x8001e
80008e64:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008e68:	00e79223          	sh	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:77
    }

    if (g_stTaskTimeSlice.usTime == (UINT16)g_ullTickCount)
80008e6c:	8001e7b7          	lui	a5,0x8001e
80008e70:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008e74:	0047d703          	lhu	a4,4(a5)
80008e78:	8001e7b7          	lui	a5,0x8001e
80008e7c:	36878793          	addi	a5,a5,872 # 8001e368 <__stack_top+0xfffdfd68>
80008e80:	0047a803          	lw	a6,4(a5)
80008e84:	0007a783          	lw	a5,0(a5)
80008e88:	01079793          	slli	a5,a5,0x10
80008e8c:	0107d793          	srli	a5,a5,0x10
80008e90:	00f71a63          	bne	a4,a5,80008ea4 <osTimesliceCheck+0xc4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:79
    {
        g_stTaskTimeSlice.pstTask = (LOS_TASK_CB *)NULL;
80008e94:	8001e7b7          	lui	a5,0x8001e
80008e98:	37878793          	addi	a5,a5,888 # 8001e378 <__stack_top+0xfffdfd78>
80008e9c:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:80
        if (LOS_TaskYield() != LOS_OK)
80008ea0:	ca5ff0ef          	jal	ra,80008b44 <LOS_TaskYield>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../kernel/base/core/los_timeslice.c:85
        {
            PRINT_INFO("%s, %d\n", __FUNCTION__, __LINE__);
        }
    } /*lint !e548*/
}
80008ea4:	00000013          	nop
80008ea8:	00c12083          	lw	ra,12(sp)
80008eac:	00812403          	lw	s0,8(sp)
80008eb0:	01010113          	addi	sp,sp,16
80008eb4:	00008067          	ret
80008eb8:	0000                	unimp
	...

80008ebc <Example_Dyn_Mem>:
Example_Dyn_Mem():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:50
#endif /* __cpluscplus */
#endif /* __cpluscplus */


UINT32 Example_Dyn_Mem(VOID)
{
80008ebc:	fe010113          	addi	sp,sp,-32
80008ec0:	00112e23          	sw	ra,28(sp)
80008ec4:	00812c23          	sw	s0,24(sp)
80008ec8:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:51
    UINT32 *p_num = NULL;
80008ecc:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:54
    UINT32 uwRet;

    LOS_Inspect_delim();
80008ed0:	3dd010ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:56

    uwRet = LOS_MemInit(m_aucSysMem0, OS_SYS_MEM_SIZE);
80008ed4:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80008ed8:	000105b7          	lui	a1,0x10
80008edc:	00078513          	mv	a0,a5
80008ee0:	a60fa0ef          	jal	ra,80003140 <LOS_MemInit>
80008ee4:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:58

    if (LOS_OK == uwRet)
80008ee8:	fe842783          	lw	a5,-24(s0)
80008eec:	02079863          	bnez	a5,80008f1c <Example_Dyn_Mem+0x60>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:60
    {
        dprintf("mempool init ok!\n");
80008ef0:	8000d7b7          	lui	a5,0x8000d
80008ef4:	e8878513          	addi	a0,a5,-376 # 8000ce88 <__stack_top+0xfffce888>
80008ef8:	b6df80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:68
    {
        dprintf("mempool init failed!\n");
        return LOS_NOK;
    }
    /*分配内存*/
    p_num = (UINT32*)LOS_MemAlloc(m_aucSysMem0, 4);
80008efc:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80008f00:	00400593          	li	a1,4
80008f04:	00078513          	mv	a0,a5
80008f08:	bb4fa0ef          	jal	ra,800032bc <LOS_MemAlloc>
80008f0c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:69
    if (NULL == p_num)
80008f10:	fec42783          	lw	a5,-20(s0)
80008f14:	02079863          	bnez	a5,80008f44 <Example_Dyn_Mem+0x88>
80008f18:	0180006f          	j	80008f30 <Example_Dyn_Mem+0x74>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:64
        dprintf("mempool init failed!\n");
80008f1c:	8000d7b7          	lui	a5,0x8000d
80008f20:	e9c78513          	addi	a0,a5,-356 # 8000ce9c <__stack_top+0xfffce89c>
80008f24:	b41f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:65
        return LOS_NOK;
80008f28:	00100793          	li	a5,1
80008f2c:	0a00006f          	j	80008fcc <Example_Dyn_Mem+0x110>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:71
    {
        dprintf("mem alloc failed!\n");
80008f30:	8000d7b7          	lui	a5,0x8000d
80008f34:	eb478513          	addi	a0,a5,-332 # 8000ceb4 <__stack_top+0xfffce8b4>
80008f38:	b2df80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:72
        return LOS_NOK;
80008f3c:	00100793          	li	a5,1
80008f40:	08c0006f          	j	80008fcc <Example_Dyn_Mem+0x110>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:74
    }
    dprintf("mem alloc ok\n");
80008f44:	8000d7b7          	lui	a5,0x8000d
80008f48:	ec878513          	addi	a0,a5,-312 # 8000cec8 <__stack_top+0xfffce8c8>
80008f4c:	b19f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:76
    /*赋值*/
    *p_num = 828;
80008f50:	fec42783          	lw	a5,-20(s0)
80008f54:	33c00713          	li	a4,828
80008f58:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:77
    dprintf("*p_num = %d\n", *p_num);
80008f5c:	fec42783          	lw	a5,-20(s0)
80008f60:	0007a783          	lw	a5,0(a5)
80008f64:	00078593          	mv	a1,a5
80008f68:	8000d7b7          	lui	a5,0x8000d
80008f6c:	ed878513          	addi	a0,a5,-296 # 8000ced8 <__stack_top+0xfffce8d8>
80008f70:	af5f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:79
    /*释放内存*/
    uwRet = LOS_MemFree(m_aucSysMem0, p_num);
80008f74:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80008f78:	fec42583          	lw	a1,-20(s0)
80008f7c:	00078513          	mv	a0,a5
80008f80:	cc0fa0ef          	jal	ra,80003440 <LOS_MemFree>
80008f84:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:80
    if (LOS_OK == uwRet)
80008f88:	fe842783          	lw	a5,-24(s0)
80008f8c:	02079263          	bnez	a5,80008fb0 <Example_Dyn_Mem+0xf4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:82
    {
        dprintf("mem free ok!\n");
80008f90:	8000d7b7          	lui	a5,0x8000d
80008f94:	ee878513          	addi	a0,a5,-280 # 8000cee8 <__stack_top+0xfffce8e8>
80008f98:	acdf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:83
        LOS_InspectStatusSetByID(LOS_INSPECT_DMEM,LOS_INSPECT_STU_SUCCESS);
80008f9c:	00000593          	li	a1,0
80008fa0:	00900513          	li	a0,9
80008fa4:	5ec010ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:91
    {
        dprintf("mem free failed!\n");
        LOS_InspectStatusSetByID(LOS_INSPECT_DMEM,LOS_INSPECT_STU_ERROR);
        return LOS_NOK;
    }
    return LOS_OK;
80008fa8:	00000793          	li	a5,0
80008fac:	0200006f          	j	80008fcc <Example_Dyn_Mem+0x110>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:87
        dprintf("mem free failed!\n");
80008fb0:	8000d7b7          	lui	a5,0x8000d
80008fb4:	ef878513          	addi	a0,a5,-264 # 8000cef8 <__stack_top+0xfffce8f8>
80008fb8:	aadf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:88
        LOS_InspectStatusSetByID(LOS_INSPECT_DMEM,LOS_INSPECT_STU_ERROR);
80008fbc:	00100593          	li	a1,1
80008fc0:	00900513          	li	a0,9
80008fc4:	5cc010ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:89
        return LOS_NOK;
80008fc8:	00100793          	li	a5,1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_dynamic_mem.c:92
}
80008fcc:	00078513          	mv	a0,a5
80008fd0:	01c12083          	lw	ra,28(sp)
80008fd4:	01812403          	lw	s0,24(sp)
80008fd8:	02010113          	addi	sp,sp,32
80008fdc:	00008067          	ret
80008fe0:	0000                	unimp
	...

80008fe4 <Example_Event>:
Example_Event():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:64
/*等待的事件类型*/
#define event_wait 0x00000001

/*用例任务入口函数*/
VOID Example_Event(VOID)
{
80008fe4:	fe010113          	addi	sp,sp,-32
80008fe8:	00112e23          	sw	ra,28(sp)
80008fec:	00812c23          	sw	s0,24(sp)
80008ff0:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:69
    UINT32 uwEvent;

    /*超时 等待方式读事件,超时时间为100 Tick
    若100 Tick 后未读取到指定事件，读事件超时，任务直接唤醒*/
    dprintf("Example_Event wait event 0x%x \n",event_wait);
80008ff4:	00100593          	li	a1,1
80008ff8:	8000d7b7          	lui	a5,0x8000d
80008ffc:	f0c78513          	addi	a0,a5,-244 # 8000cf0c <__stack_top+0xfffce90c>
80009000:	a65f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:71

    uwEvent = LOS_EventRead(&example_event, event_wait, LOS_WAITMODE_AND, 100);
80009004:	06400693          	li	a3,100
80009008:	00400613          	li	a2,4
8000900c:	00100593          	li	a1,1
80009010:	8001e7b7          	lui	a5,0x8001e
80009014:	38078513          	addi	a0,a5,896 # 8001e380 <__stack_top+0xfffdfd80>
80009018:	d21fa0ef          	jal	ra,80003d38 <LOS_EventRead>
8000901c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:72
    if(uwEvent == event_wait)
80009020:	fec42703          	lw	a4,-20(s0)
80009024:	00100793          	li	a5,1
80009028:	02f71263          	bne	a4,a5,8000904c <Example_Event+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:74
    {
        dprintf("Example_Event,read event :0x%x\n",uwEvent);
8000902c:	fec42583          	lw	a1,-20(s0)
80009030:	8000d7b7          	lui	a5,0x8000d
80009034:	f2c78513          	addi	a0,a5,-212 # 8000cf2c <__stack_top+0xfffce92c>
80009038:	a2df80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:75
        LOS_InspectStatusSetByID(LOS_INSPECT_EVENT,LOS_INSPECT_STU_SUCCESS);
8000903c:	00000593          	li	a1,0
80009040:	00100513          	li	a0,1
80009044:	54c010ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:82
    else
    {
        dprintf("Example_Event,read event timeout\n");
        LOS_InspectStatusSetByID(LOS_INSPECT_EVENT,LOS_INSPECT_STU_ERROR);
    }
    return;
80009048:	0200006f          	j	80009068 <Example_Event+0x84>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:79
        dprintf("Example_Event,read event timeout\n");
8000904c:	8000d7b7          	lui	a5,0x8000d
80009050:	f4c78513          	addi	a0,a5,-180 # 8000cf4c <__stack_top+0xfffce94c>
80009054:	a11f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:80
        LOS_InspectStatusSetByID(LOS_INSPECT_EVENT,LOS_INSPECT_STU_ERROR);
80009058:	00100593          	li	a1,1
8000905c:	00100513          	li	a0,1
80009060:	530010ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:82
    return;
80009064:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:83
}
80009068:	01c12083          	lw	ra,28(sp)
8000906c:	01812403          	lw	s0,24(sp)
80009070:	02010113          	addi	sp,sp,32
80009074:	00008067          	ret
80009078:	0000                	unimp
	...

8000907c <Example_SndRcvEvent>:
Example_SndRcvEvent():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:86

UINT32 Example_SndRcvEvent(VOID)
{
8000907c:	fc010113          	addi	sp,sp,-64
80009080:	02112e23          	sw	ra,60(sp)
80009084:	02812c23          	sw	s0,56(sp)
80009088:	04010413          	addi	s0,sp,64
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:90
    UINT32 uwRet;
    TSK_INIT_PARAM_S stTask1;

    LOS_Inspect_delim();
8000908c:	221010ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:93
	
    /*事件初始化*/
    uwRet = LOS_EventInit(&example_event);
80009090:	8001e7b7          	lui	a5,0x8001e
80009094:	38078513          	addi	a0,a5,896 # 8001e380 <__stack_top+0xfffdfd80>
80009098:	b5dfa0ef          	jal	ra,80003bf4 <LOS_EventInit>
8000909c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:94
    if(uwRet != LOS_OK)
800090a0:	fec42783          	lw	a5,-20(s0)
800090a4:	00078c63          	beqz	a5,800090bc <Example_SndRcvEvent+0x40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:96
    {
        dprintf("init event failed .\n");
800090a8:	8000d7b7          	lui	a5,0x8000d
800090ac:	f7078513          	addi	a0,a5,-144 # 8000cf70 <__stack_top+0xfffce970>
800090b0:	9b5f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:97
        return LOS_NOK;
800090b4:	00100793          	li	a5,1
800090b8:	1300006f          	j	800091e8 <Example_SndRcvEvent+0x16c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:101
    }

    /*创建任务*/
    memset(&stTask1, 0, sizeof(TSK_INIT_PARAM_S));
800090bc:	fc840793          	addi	a5,s0,-56
800090c0:	02400613          	li	a2,36
800090c4:	00000593          	li	a1,0
800090c8:	00078513          	mv	a0,a5
800090cc:	301010ef          	jal	ra,8000abcc <memset>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:102
    stTask1.pfnTaskEntry = (TSK_ENTRY_FUNC)Example_Event;
800090d0:	800097b7          	lui	a5,0x80009
800090d4:	fe478793          	addi	a5,a5,-28 # 80008fe4 <__stack_top+0xfffca9e4>
800090d8:	fcf42423          	sw	a5,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:103
    stTask1.pcName       = "EventTsk1";
800090dc:	8000d7b7          	lui	a5,0x8000d
800090e0:	f8878793          	addi	a5,a5,-120 # 8000cf88 <__stack_top+0xfffce988>
800090e4:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:104
    stTask1.uwStackSize  = LOSCFG_BASE_CORE_TSK_DEFAULT_STACK_SIZE;
800090e8:	50000793          	li	a5,1280
800090ec:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:105
    stTask1.usTaskPrio   = 5;
800090f0:	00500793          	li	a5,5
800090f4:	fcf41623          	sh	a5,-52(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:106
    uwRet = LOS_TaskCreate(&g_TestTaskID, &stTask1);
800090f8:	fc840793          	addi	a5,s0,-56
800090fc:	00078593          	mv	a1,a5
80009100:	8001e7b7          	lui	a5,0x8001e
80009104:	39078513          	addi	a0,a5,912 # 8001e390 <__stack_top+0xfffdfd90>
80009108:	968ff0ef          	jal	ra,80008270 <LOS_TaskCreate>
8000910c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:107
    if(uwRet != LOS_OK)
80009110:	fec42783          	lw	a5,-20(s0)
80009114:	00078c63          	beqz	a5,8000912c <Example_SndRcvEvent+0xb0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:109
    {
        dprintf("task create failed .\n");
80009118:	8000d7b7          	lui	a5,0x8000d
8000911c:	f9478513          	addi	a0,a5,-108 # 8000cf94 <__stack_top+0xfffce994>
80009120:	945f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:110
        return LOS_NOK;
80009124:	00100793          	li	a5,1
80009128:	0c00006f          	j	800091e8 <Example_SndRcvEvent+0x16c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:114
    }

    /*写用例任务等待的事件类型*/
    dprintf("Example_TaskEntry_Event write event .\n");
8000912c:	8000d7b7          	lui	a5,0x8000d
80009130:	fac78513          	addi	a0,a5,-84 # 8000cfac <__stack_top+0xfffce9ac>
80009134:	931f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:116

    uwRet = LOS_EventWrite(&example_event, event_wait);
80009138:	00100593          	li	a1,1
8000913c:	8001e7b7          	lui	a5,0x8001e
80009140:	38078513          	addi	a0,a5,896 # 8001e380 <__stack_top+0xfffdfd80>
80009144:	ea9fa0ef          	jal	ra,80003fec <LOS_EventWrite>
80009148:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:117
    if(uwRet != LOS_OK)
8000914c:	fec42783          	lw	a5,-20(s0)
80009150:	00078c63          	beqz	a5,80009168 <Example_SndRcvEvent+0xec>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:119
    {
        dprintf("event write failed .\n");
80009154:	8000d7b7          	lui	a5,0x8000d
80009158:	fd478513          	addi	a0,a5,-44 # 8000cfd4 <__stack_top+0xfffce9d4>
8000915c:	909f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:120
        return LOS_NOK;
80009160:	00100793          	li	a5,1
80009164:	0840006f          	j	800091e8 <Example_SndRcvEvent+0x16c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:124
    }

    /*清标志位*/
    dprintf("EventMask:%d\n",example_event.uwEventID);
80009168:	8001e7b7          	lui	a5,0x8001e
8000916c:	3807a783          	lw	a5,896(a5) # 8001e380 <__stack_top+0xfffdfd80>
80009170:	00078593          	mv	a1,a5
80009174:	8000d7b7          	lui	a5,0x8000d
80009178:	fec78513          	addi	a0,a5,-20 # 8000cfec <__stack_top+0xfffce9ec>
8000917c:	8e9f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:125
    LOS_EventClear(&example_event, ~example_event.uwEventID);
80009180:	8001e7b7          	lui	a5,0x8001e
80009184:	3807a783          	lw	a5,896(a5) # 8001e380 <__stack_top+0xfffdfd80>
80009188:	fff7c793          	not	a5,a5
8000918c:	00078593          	mv	a1,a5
80009190:	8001e7b7          	lui	a5,0x8001e
80009194:	38078513          	addi	a0,a5,896 # 8001e380 <__stack_top+0xfffdfd80>
80009198:	86cfb0ef          	jal	ra,80004204 <LOS_EventClear>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:126
    dprintf("EventMask:%d\n",example_event.uwEventID);
8000919c:	8001e7b7          	lui	a5,0x8001e
800091a0:	3807a783          	lw	a5,896(a5) # 8001e380 <__stack_top+0xfffdfd80>
800091a4:	00078593          	mv	a1,a5
800091a8:	8000d7b7          	lui	a5,0x8000d
800091ac:	fec78513          	addi	a0,a5,-20 # 8000cfec <__stack_top+0xfffce9ec>
800091b0:	8b5f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:129

    /*删除任务*/
    uwRet = LOS_TaskDelete(g_TestTaskID);
800091b4:	8001e7b7          	lui	a5,0x8001e
800091b8:	3907a783          	lw	a5,912(a5) # 8001e390 <__stack_top+0xfffdfd90>
800091bc:	00078513          	mv	a0,a5
800091c0:	d58ff0ef          	jal	ra,80008718 <LOS_TaskDelete>
800091c4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:130
    if(uwRet != LOS_OK)
800091c8:	fec42783          	lw	a5,-20(s0)
800091cc:	00078c63          	beqz	a5,800091e4 <Example_SndRcvEvent+0x168>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:132
    {
        dprintf("task delete failed .\n");
800091d0:	8000d7b7          	lui	a5,0x8000d
800091d4:	ffc78513          	addi	a0,a5,-4 # 8000cffc <__stack_top+0xfffce9fc>
800091d8:	88df80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:133
        return LOS_NOK;
800091dc:	00100793          	li	a5,1
800091e0:	0080006f          	j	800091e8 <Example_SndRcvEvent+0x16c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:137
    }


    return LOS_OK;
800091e4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_event.c:138 (discriminator 1)
}
800091e8:	00078513          	mv	a0,a5
800091ec:	03c12083          	lw	ra,60(sp)
800091f0:	03812403          	lw	s0,56(sp)
800091f4:	04010113          	addi	sp,sp,64
800091f8:	00008067          	ret
800091fc:	0000                	unimp
	...

80009200 <LOS_ListInit>:
LOS_ListInit():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:81
{
80009200:	fe010113          	addi	sp,sp,-32
80009204:	00812e23          	sw	s0,28(sp)
80009208:	02010413          	addi	s0,sp,32
8000920c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:82
    pstList->pstNext = pstList;
80009210:	fec42783          	lw	a5,-20(s0)
80009214:	fec42703          	lw	a4,-20(s0)
80009218:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:83
    pstList->pstPrev = pstList;
8000921c:	fec42783          	lw	a5,-20(s0)
80009220:	fec42703          	lw	a4,-20(s0)
80009224:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:84
}
80009228:	00000013          	nop
8000922c:	01c12403          	lw	s0,28(sp)
80009230:	02010113          	addi	sp,sp,32
80009234:	00008067          	ret
80009238:	0000                	unimp
	...

8000923c <LOS_ListAdd>:
LOS_ListAdd():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:130
{
8000923c:	fe010113          	addi	sp,sp,-32
80009240:	00812e23          	sw	s0,28(sp)
80009244:	02010413          	addi	s0,sp,32
80009248:	fea42623          	sw	a0,-20(s0)
8000924c:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:131
    pstNode->pstNext = pstList->pstNext;
80009250:	fec42783          	lw	a5,-20(s0)
80009254:	0047a703          	lw	a4,4(a5)
80009258:	fe842783          	lw	a5,-24(s0)
8000925c:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:132
    pstNode->pstPrev = pstList;
80009260:	fe842783          	lw	a5,-24(s0)
80009264:	fec42703          	lw	a4,-20(s0)
80009268:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:133
    pstList->pstNext->pstPrev = pstNode;
8000926c:	fec42783          	lw	a5,-20(s0)
80009270:	0047a783          	lw	a5,4(a5)
80009274:	fe842703          	lw	a4,-24(s0)
80009278:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:134
    pstList->pstNext = pstNode;
8000927c:	fec42783          	lw	a5,-20(s0)
80009280:	fe842703          	lw	a4,-24(s0)
80009284:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:135
}
80009288:	00000013          	nop
8000928c:	01c12403          	lw	s0,28(sp)
80009290:	02010113          	addi	sp,sp,32
80009294:	00008067          	ret
80009298:	0000                	unimp
	...

8000929c <LOS_ListTailInsert>:
LOS_ListTailInsert():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:158
{
8000929c:	fe010113          	addi	sp,sp,-32
800092a0:	00112e23          	sw	ra,28(sp)
800092a4:	00812c23          	sw	s0,24(sp)
800092a8:	02010413          	addi	s0,sp,32
800092ac:	fea42623          	sw	a0,-20(s0)
800092b0:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:159
    LOS_ListAdd(pstList->pstPrev, pstNode);
800092b4:	fec42783          	lw	a5,-20(s0)
800092b8:	0007a783          	lw	a5,0(a5)
800092bc:	fe842583          	lw	a1,-24(s0)
800092c0:	00078513          	mv	a0,a5
800092c4:	f79ff0ef          	jal	ra,8000923c <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:160
}
800092c8:	00000013          	nop
800092cc:	01c12083          	lw	ra,28(sp)
800092d0:	01812403          	lw	s0,24(sp)
800092d4:	02010113          	addi	sp,sp,32
800092d8:	00008067          	ret
800092dc:	0000                	unimp
	...

800092e0 <LOS_ListDelete>:
LOS_ListDelete():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:184
{
800092e0:	fe010113          	addi	sp,sp,-32
800092e4:	00812e23          	sw	s0,28(sp)
800092e8:	02010413          	addi	s0,sp,32
800092ec:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:185
    pstNode->pstNext->pstPrev = pstNode->pstPrev;
800092f0:	fec42783          	lw	a5,-20(s0)
800092f4:	0047a783          	lw	a5,4(a5)
800092f8:	fec42703          	lw	a4,-20(s0)
800092fc:	00072703          	lw	a4,0(a4)
80009300:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:186
    pstNode->pstPrev->pstNext = pstNode->pstNext;
80009304:	fec42783          	lw	a5,-20(s0)
80009308:	0007a783          	lw	a5,0(a5)
8000930c:	fec42703          	lw	a4,-20(s0)
80009310:	00472703          	lw	a4,4(a4)
80009314:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:187
    pstNode->pstNext = (LOS_DL_LIST *)NULL;
80009318:	fec42783          	lw	a5,-20(s0)
8000931c:	0007a223          	sw	zero,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:188
    pstNode->pstPrev = (LOS_DL_LIST *)NULL;
80009320:	fec42783          	lw	a5,-20(s0)
80009324:	0007a023          	sw	zero,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:189
}
80009328:	00000013          	nop
8000932c:	01c12403          	lw	s0,28(sp)
80009330:	02010113          	addi	sp,sp,32
80009334:	00008067          	ret
80009338:	0000                	unimp
	...

8000933c <LOS_ListEmpty>:
LOS_ListEmpty():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:214
{
8000933c:	fe010113          	addi	sp,sp,-32
80009340:	00812e23          	sw	s0,28(sp)
80009344:	02010413          	addi	s0,sp,32
80009348:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:215
    return (BOOL)(pstNode->pstNext == pstNode);
8000934c:	fec42783          	lw	a5,-20(s0)
80009350:	0047a783          	lw	a5,4(a5)
80009354:	fec42703          	lw	a4,-20(s0)
80009358:	40f707b3          	sub	a5,a4,a5
8000935c:	0017b793          	seqz	a5,a5
80009360:	0ff7f793          	andi	a5,a5,255
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\kernel\include/los_list.h:216
}
80009364:	00078513          	mv	a0,a5
80009368:	01c12403          	lw	s0,28(sp)
8000936c:	02010113          	addi	sp,sp,32
80009370:	00008067          	ret
80009374:	0000                	unimp
	...

80009378 <Example_list>:
Example_list():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:56
#endif /* __cpluscplus */
#endif /* __cpluscplus */


UINT32 Example_list(VOID)
{
80009378:	fe010113          	addi	sp,sp,-32
8000937c:	00112e23          	sw	ra,28(sp)
80009380:	00812c23          	sw	s0,24(sp)
80009384:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:57
    LOS_Inspect_delim();
80009388:	724010ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:60

    /*初始化，判断是否为空*/
    dprintf("initial......\n");
8000938c:	8000d7b7          	lui	a5,0x8000d
80009390:	01478513          	addi	a0,a5,20 # 8000d014 <__stack_top+0xfffcea14>
80009394:	ed0f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:62
    LOS_DL_LIST* head;
    head = (LOS_DL_LIST*)LOS_MemAlloc(m_aucSysMem0, sizeof(LOS_DL_LIST));
80009398:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
8000939c:	00800593          	li	a1,8
800093a0:	00078513          	mv	a0,a5
800093a4:	f19f90ef          	jal	ra,800032bc <LOS_MemAlloc>
800093a8:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:64

    LOS_ListInit(head);
800093ac:	fec42503          	lw	a0,-20(s0)
800093b0:	e51ff0ef          	jal	ra,80009200 <LOS_ListInit>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:65
    if (!LOS_ListEmpty(head))
800093b4:	fec42503          	lw	a0,-20(s0)
800093b8:	f85ff0ef          	jal	ra,8000933c <LOS_ListEmpty>
800093bc:	00050793          	mv	a5,a0
800093c0:	00079c63          	bnez	a5,800093d8 <Example_list+0x60>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:67
    {
        dprintf("initial failed\n");
800093c4:	8000d7b7          	lui	a5,0x8000d
800093c8:	02478513          	addi	a0,a5,36 # 8000d024 <__stack_top+0xfffcea24>
800093cc:	e98f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:68
        return LOS_NOK;
800093d0:	00100793          	li	a5,1
800093d4:	1240006f          	j	800094f8 <Example_list+0x180>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:72
    }
    
    /*增加一个节点，在尾端插入一个节点*/
    dprintf("node add and tail add......\n");
800093d8:	8000d7b7          	lui	a5,0x8000d
800093dc:	03478513          	addi	a0,a5,52 # 8000d034 <__stack_top+0xfffcea34>
800093e0:	e84f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:74

        LOS_DL_LIST* node1 = (LOS_DL_LIST*)LOS_MemAlloc(m_aucSysMem0, sizeof(LOS_DL_LIST));
800093e4:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
800093e8:	00800593          	li	a1,8
800093ec:	00078513          	mv	a0,a5
800093f0:	ecdf90ef          	jal	ra,800032bc <LOS_MemAlloc>
800093f4:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:75
    LOS_DL_LIST* node2 = (LOS_DL_LIST*)LOS_MemAlloc(m_aucSysMem0, sizeof(LOS_DL_LIST));
800093f8:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
800093fc:	00800593          	li	a1,8
80009400:	00078513          	mv	a0,a5
80009404:	eb9f90ef          	jal	ra,800032bc <LOS_MemAlloc>
80009408:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:76
    LOS_DL_LIST* tail = (LOS_DL_LIST*)LOS_MemAlloc(m_aucSysMem0, sizeof(LOS_DL_LIST));
8000940c:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
80009410:	00800593          	li	a1,8
80009414:	00078513          	mv	a0,a5
80009418:	ea5f90ef          	jal	ra,800032bc <LOS_MemAlloc>
8000941c:	fea42023          	sw	a0,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:78
    
    LOS_ListAdd(head,node1);
80009420:	fe842583          	lw	a1,-24(s0)
80009424:	fec42503          	lw	a0,-20(s0)
80009428:	e15ff0ef          	jal	ra,8000923c <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:79
    LOS_ListAdd(node1,node2);
8000942c:	fe442583          	lw	a1,-28(s0)
80009430:	fe842503          	lw	a0,-24(s0)
80009434:	e09ff0ef          	jal	ra,8000923c <LOS_ListAdd>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:80
    if((node1->pstPrev == head) || (node2->pstPrev == node1))
80009438:	fe842783          	lw	a5,-24(s0)
8000943c:	0007a783          	lw	a5,0(a5)
80009440:	fec42703          	lw	a4,-20(s0)
80009444:	00f70a63          	beq	a4,a5,80009458 <Example_list+0xe0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:80 (discriminator 1)
80009448:	fe442783          	lw	a5,-28(s0)
8000944c:	0007a783          	lw	a5,0(a5)
80009450:	fe842703          	lw	a4,-24(s0)
80009454:	00f71863          	bne	a4,a5,80009464 <Example_list+0xec>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:82
    {
        dprintf("add node success\n");
80009458:	8000d7b7          	lui	a5,0x8000d
8000945c:	05478513          	addi	a0,a5,84 # 8000d054 <__stack_top+0xfffcea54>
80009460:	e04f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:85
    }
    
    LOS_ListTailInsert(head,tail);
80009464:	fe042583          	lw	a1,-32(s0)
80009468:	fec42503          	lw	a0,-20(s0)
8000946c:	e31ff0ef          	jal	ra,8000929c <LOS_ListTailInsert>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:86
    if(tail->pstPrev == node2)
80009470:	fe042783          	lw	a5,-32(s0)
80009474:	0007a783          	lw	a5,0(a5)
80009478:	fe442703          	lw	a4,-28(s0)
8000947c:	00f71863          	bne	a4,a5,8000948c <Example_list+0x114>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:88
    {
        dprintf("add tail success\n");
80009480:	8000d7b7          	lui	a5,0x8000d
80009484:	06878513          	addi	a0,a5,104 # 8000d068 <__stack_top+0xfffcea68>
80009488:	ddcf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:92
    }

    /*删除双向链表节点*/
    dprintf("delete node......\n");
8000948c:	8000d7b7          	lui	a5,0x8000d
80009490:	07c78513          	addi	a0,a5,124 # 8000d07c <__stack_top+0xfffcea7c>
80009494:	dd0f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:93
    LOS_ListDelete(node1);
80009498:	fe842503          	lw	a0,-24(s0)
8000949c:	e45ff0ef          	jal	ra,800092e0 <LOS_ListDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:95
    //free(node1);
    LOS_MemFree(m_aucSysMem0, node1);
800094a0:	eb01a783          	lw	a5,-336(gp) # 8000e1e0 <m_aucSysMem0>
800094a4:	fe842583          	lw	a1,-24(s0)
800094a8:	00078513          	mv	a0,a5
800094ac:	f95f90ef          	jal	ra,80003440 <LOS_MemFree>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:96
    if(head->pstNext == node2)
800094b0:	fec42783          	lw	a5,-20(s0)
800094b4:	0047a783          	lw	a5,4(a5)
800094b8:	fe442703          	lw	a4,-28(s0)
800094bc:	02f71063          	bne	a4,a5,800094dc <Example_list+0x164>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:98
    {
        dprintf("delete node success\n");
800094c0:	8000d7b7          	lui	a5,0x8000d
800094c4:	09078513          	addi	a0,a5,144 # 8000d090 <__stack_top+0xfffcea90>
800094c8:	d9cf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:99
        LOS_InspectStatusSetByID(LOS_INSPECT_LIST,LOS_INSPECT_STU_SUCCESS);
800094cc:	00000593          	li	a1,0
800094d0:	00700513          	li	a0,7
800094d4:	0bc010ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
800094d8:	01c0006f          	j	800094f4 <Example_list+0x17c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:103
    }
    else
    {
        dprintf("delete node error\n");
800094dc:	8000d7b7          	lui	a5,0x8000d
800094e0:	0a878513          	addi	a0,a5,168 # 8000d0a8 <__stack_top+0xfffceaa8>
800094e4:	d80f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:104
        LOS_InspectStatusSetByID(LOS_INSPECT_LIST,LOS_INSPECT_STU_ERROR);
800094e8:	00100593          	li	a1,1
800094ec:	00700513          	li	a0,7
800094f0:	0a0010ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:107
    }
    
    return LOS_OK;
800094f4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_list.c:108
}
800094f8:	00078513          	mv	a0,a5
800094fc:	01c12083          	lw	ra,28(sp)
80009500:	01812403          	lw	s0,24(sp)
80009504:	02010113          	addi	sp,sp,32
80009508:	00008067          	ret
8000950c:	0000                	unimp
	...

80009510 <send_Entry>:
send_Entry():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:63
/*任务1发送数据*/
void *send_Entry(UINT32 uwParam1,
                UINT32 uwParam2,
                UINT32 uwParam3,
                UINT32 uwParam4)
{
80009510:	fd010113          	addi	sp,sp,-48
80009514:	02112623          	sw	ra,44(sp)
80009518:	02812423          	sw	s0,40(sp)
8000951c:	03010413          	addi	s0,sp,48
80009520:	fca42e23          	sw	a0,-36(s0)
80009524:	fcb42c23          	sw	a1,-40(s0)
80009528:	fcc42a23          	sw	a2,-44(s0)
8000952c:	fcd42823          	sw	a3,-48(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:64
    UINT32 i = 0,uwRet = 0;
80009530:	fe042623          	sw	zero,-20(s0)
80009534:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:65
    UINT32 uwlen = sizeof(abuf);
80009538:	01200793          	li	a5,18
8000953c:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:67

    while (i < API_MSG_NUM)
80009540:	0780006f          	j	800095b8 <send_Entry+0xa8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:69
    {
        abuf[uwlen -2] = '0' + i;
80009544:	fec42783          	lw	a5,-20(s0)
80009548:	0ff7f793          	andi	a5,a5,255
8000954c:	03078793          	addi	a5,a5,48
80009550:	0ff7f713          	andi	a4,a5,255
80009554:	fe442783          	lw	a5,-28(s0)
80009558:	ffe78693          	addi	a3,a5,-2
8000955c:	01871713          	slli	a4,a4,0x18
80009560:	41875713          	srai	a4,a4,0x18
80009564:	89018793          	addi	a5,gp,-1904 # 8000dbc0 <abuf>
80009568:	00f687b3          	add	a5,a3,a5
8000956c:	00e78023          	sb	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:70
        i++;
80009570:	fec42783          	lw	a5,-20(s0)
80009574:	00178793          	addi	a5,a5,1
80009578:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:73

        /*将abuf里的数据写入队列*/
        uwRet = LOS_QueueWrite(g_uwQueue, abuf, uwlen, 0);
8000957c:	de81a703          	lw	a4,-536(gp) # 8000e118 <g_uwQueue>
80009580:	00000693          	li	a3,0
80009584:	fe442603          	lw	a2,-28(s0)
80009588:	89018593          	addi	a1,gp,-1904 # 8000dbc0 <abuf>
8000958c:	00070513          	mv	a0,a4
80009590:	f79fb0ef          	jal	ra,80005508 <LOS_QueueWrite>
80009594:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:74
        if(uwRet != LOS_OK)
80009598:	fe842783          	lw	a5,-24(s0)
8000959c:	00078a63          	beqz	a5,800095b0 <send_Entry+0xa0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:76
        {
            dprintf("send message failure,error:%x\n",uwRet);
800095a0:	fe842583          	lw	a1,-24(s0)
800095a4:	8000d7b7          	lui	a5,0x8000d
800095a8:	0bc78513          	addi	a0,a5,188 # 8000d0bc <__stack_top+0xfffceabc>
800095ac:	cb8f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:79
        }

        LOS_TaskDelay(5);
800095b0:	00500513          	li	a0,5
800095b4:	c84ff0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:67
    while (i < API_MSG_NUM)
800095b8:	fec42703          	lw	a4,-20(s0)
800095bc:	00400793          	li	a5,4
800095c0:	f8e7f2e3          	bleu	a4,a5,80009544 <send_Entry+0x34>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:81
    }
    return NULL;
800095c4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:82
}
800095c8:	00078513          	mv	a0,a5
800095cc:	02c12083          	lw	ra,44(sp)
800095d0:	02812403          	lw	s0,40(sp)
800095d4:	03010113          	addi	sp,sp,48
800095d8:	00008067          	ret
800095dc:	0000                	unimp
	...

800095e0 <recv_Entry>:
recv_Entry():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:89
/*任务2接收数据*/
void *recv_Entry(UINT32 uwParam1,
                UINT32 uwParam2,
                UINT32 uwParam3,
                UINT32 uwParam4)
{
800095e0:	fd010113          	addi	sp,sp,-48
800095e4:	02112623          	sw	ra,44(sp)
800095e8:	02812423          	sw	s0,40(sp)
800095ec:	03010413          	addi	s0,sp,48
800095f0:	fca42e23          	sw	a0,-36(s0)
800095f4:	fcb42c23          	sw	a1,-40(s0)
800095f8:	fcc42a23          	sw	a2,-44(s0)
800095fc:	fcd42823          	sw	a3,-48(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:91
    UINT32 uwReadbuf;
    UINT32 uwRet = 0;
80009600:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:92
    UINT32 uwMsgCount = 0;
80009604:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:98

    while (1)
    {

        /*读取队列里的数据存入uwReadbuf里*/
        uwRet = LOS_QueueRead(g_uwQueue, &uwReadbuf, 48, 0);
80009608:	de81a783          	lw	a5,-536(gp) # 8000e118 <g_uwQueue>
8000960c:	fe440713          	addi	a4,s0,-28
80009610:	00000693          	li	a3,0
80009614:	03000613          	li	a2,48
80009618:	00070593          	mv	a1,a4
8000961c:	00078513          	mv	a0,a5
80009620:	c5dfb0ef          	jal	ra,8000527c <LOS_QueueRead>
80009624:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:99
        if(uwRet != LOS_OK)
80009628:	fe842783          	lw	a5,-24(s0)
8000962c:	00078e63          	beqz	a5,80009648 <recv_Entry+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:101
        {
            dprintf("recv message failure,error:%x\n",uwRet);
80009630:	fe842583          	lw	a1,-24(s0)
80009634:	8000d7b7          	lui	a5,0x8000d
80009638:	0dc78513          	addi	a0,a5,220 # 8000d0dc <__stack_top+0xfffceadc>
8000963c:	c28f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:102
            break;
80009640:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:113
        }
        
        LOS_TaskDelay(5);
    }
    /*删除队列*/
    while (LOS_OK != LOS_QueueDelete(g_uwQueue))
80009644:	0380006f          	j	8000967c <recv_Entry+0x9c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:106
            dprintf("recv message:%s\n", (char *)uwReadbuf);
80009648:	fe442783          	lw	a5,-28(s0)
8000964c:	00078593          	mv	a1,a5
80009650:	8000d7b7          	lui	a5,0x8000d
80009654:	0fc78513          	addi	a0,a5,252 # 8000d0fc <__stack_top+0xfffceafc>
80009658:	c0cf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:107
            uwMsgCount++;
8000965c:	fec42783          	lw	a5,-20(s0)
80009660:	00178793          	addi	a5,a5,1
80009664:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:110
        LOS_TaskDelay(5);
80009668:	00500513          	li	a0,5
8000966c:	bccff0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:98
        uwRet = LOS_QueueRead(g_uwQueue, &uwReadbuf, 48, 0);
80009670:	f99ff06f          	j	80009608 <recv_Entry+0x28>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:115
    {
        LOS_TaskDelay(1);
80009674:	00100513          	li	a0,1
80009678:	bc0ff0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:113
    while (LOS_OK != LOS_QueueDelete(g_uwQueue))
8000967c:	de81a783          	lw	a5,-536(gp) # 8000e118 <g_uwQueue>
80009680:	00078513          	mv	a0,a5
80009684:	930fc0ef          	jal	ra,800057b4 <LOS_QueueDelete>
80009688:	00050793          	mv	a5,a0
8000968c:	fe0794e3          	bnez	a5,80009674 <recv_Entry+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:118
    }
        
    dprintf("delete the queue success!\n");
80009690:	8000d7b7          	lui	a5,0x8000d
80009694:	11078513          	addi	a0,a5,272 # 8000d110 <__stack_top+0xfffceb10>
80009698:	bccf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:120
        
    if(API_MSG_NUM == uwMsgCount)
8000969c:	fec42703          	lw	a4,-20(s0)
800096a0:	00500793          	li	a5,5
800096a4:	00f71a63          	bne	a4,a5,800096b8 <recv_Entry+0xd8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:122
    {
        LOS_InspectStatusSetByID(LOS_INSPECT_MSG,LOS_INSPECT_STU_SUCCESS);  
800096a8:	00000593          	li	a1,0
800096ac:	00200513          	li	a0,2
800096b0:	6e1000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
800096b4:	0100006f          	j	800096c4 <recv_Entry+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:126
    }
    else
    {
        LOS_InspectStatusSetByID(LOS_INSPECT_MSG,LOS_INSPECT_STU_ERROR);
800096b8:	00100593          	li	a1,1
800096bc:	00200513          	li	a0,2
800096c0:	6d1000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:129
    }
        
    return NULL;
800096c4:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:130
}
800096c8:	00078513          	mv	a0,a5
800096cc:	02c12083          	lw	ra,44(sp)
800096d0:	02812403          	lw	s0,40(sp)
800096d4:	03010113          	addi	sp,sp,48
800096d8:	00008067          	ret
800096dc:	0000                	unimp
	...

800096e0 <Example_MsgQueue>:
Example_MsgQueue():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:133

UINT32 Example_MsgQueue(void)
{
800096e0:	fc010113          	addi	sp,sp,-64
800096e4:	02112e23          	sw	ra,60(sp)
800096e8:	02812c23          	sw	s0,56(sp)
800096ec:	04010413          	addi	s0,sp,64
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:134
    UINT32 uwRet = 0;
800096f0:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:138
    UINT32 uwTask1, uwTask2;
    TSK_INIT_PARAM_S stInitParam1;

    LOS_Inspect_delim();
800096f4:	3b8010ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:141

    /*创建任务1*/
    stInitParam1.pfnTaskEntry = send_Entry;
800096f8:	800097b7          	lui	a5,0x80009
800096fc:	51078793          	addi	a5,a5,1296 # 80009510 <__stack_top+0xfffcaf10>
80009700:	fcf42023          	sw	a5,-64(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:142
    stInitParam1.usTaskPrio = 9;
80009704:	00900793          	li	a5,9
80009708:	fcf41223          	sh	a5,-60(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:143
    stInitParam1.uwStackSize = 0x500;
8000970c:	50000793          	li	a5,1280
80009710:	fcf42c23          	sw	a5,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:144
    stInitParam1.pcName = "sendQueue";
80009714:	8000d7b7          	lui	a5,0x8000d
80009718:	12c78793          	addi	a5,a5,300 # 8000d12c <__stack_top+0xfffceb2c>
8000971c:	fcf42e23          	sw	a5,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:145
    stInitParam1.uwResved = LOS_TASK_STATUS_DETACHED;
80009720:	08000793          	li	a5,128
80009724:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:146
    LOS_TaskLock();//锁住任务，防止新创建的任务比本任务高而发生调度
80009728:	d34ff0ef          	jal	ra,80008c5c <LOS_TaskLock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:147
    uwRet = LOS_TaskCreate(&uwTask1, &stInitParam1);
8000972c:	fc040713          	addi	a4,s0,-64
80009730:	fe840793          	addi	a5,s0,-24
80009734:	00070593          	mv	a1,a4
80009738:	00078513          	mv	a0,a5
8000973c:	b35fe0ef          	jal	ra,80008270 <LOS_TaskCreate>
80009740:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:148
    if(uwRet != LOS_OK)
80009744:	fec42783          	lw	a5,-20(s0)
80009748:	00078e63          	beqz	a5,80009764 <Example_MsgQueue+0x84>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:150
    {
        dprintf("create task1 failed!,error:%x\n",uwRet);
8000974c:	fec42583          	lw	a1,-20(s0)
80009750:	8000d7b7          	lui	a5,0x8000d
80009754:	13878513          	addi	a0,a5,312 # 8000d138 <__stack_top+0xfffceb38>
80009758:	b0cf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:151
        return uwRet;
8000975c:	fec42783          	lw	a5,-20(s0)
80009760:	0940006f          	j	800097f4 <Example_MsgQueue+0x114>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:155
    }

    /*创建任务2*/
    stInitParam1.pfnTaskEntry = recv_Entry;
80009764:	800097b7          	lui	a5,0x80009
80009768:	5e078793          	addi	a5,a5,1504 # 800095e0 <__stack_top+0xfffcafe0>
8000976c:	fcf42023          	sw	a5,-64(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:156
    uwRet = LOS_TaskCreate(&uwTask2, &stInitParam1);
80009770:	fc040713          	addi	a4,s0,-64
80009774:	fe440793          	addi	a5,s0,-28
80009778:	00070593          	mv	a1,a4
8000977c:	00078513          	mv	a0,a5
80009780:	af1fe0ef          	jal	ra,80008270 <LOS_TaskCreate>
80009784:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:157
    if(uwRet != LOS_OK)
80009788:	fec42783          	lw	a5,-20(s0)
8000978c:	00078e63          	beqz	a5,800097a8 <Example_MsgQueue+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:159
    {
        dprintf("create task2 failed!,error:%x\n",uwRet);
80009790:	fec42583          	lw	a1,-20(s0)
80009794:	8000d7b7          	lui	a5,0x8000d
80009798:	15878513          	addi	a0,a5,344 # 8000d158 <__stack_top+0xfffceb58>
8000979c:	ac8f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:160
        return uwRet;
800097a0:	fec42783          	lw	a5,-20(s0)
800097a4:	0500006f          	j	800097f4 <Example_MsgQueue+0x114>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:164
    }

    /*创建队列*/
    uwRet = LOS_QueueCreate("queue", 5, &g_uwQueue, 0, 52);
800097a8:	03400713          	li	a4,52
800097ac:	00000693          	li	a3,0
800097b0:	de818613          	addi	a2,gp,-536 # 8000e118 <g_uwQueue>
800097b4:	00500593          	li	a1,5
800097b8:	8000d7b7          	lui	a5,0x8000d
800097bc:	17878513          	addi	a0,a5,376 # 8000d178 <__stack_top+0xfffceb78>
800097c0:	999fb0ef          	jal	ra,80005158 <LOS_QueueCreate>
800097c4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:165
    if(uwRet != LOS_OK)
800097c8:	fec42783          	lw	a5,-20(s0)
800097cc:	00078a63          	beqz	a5,800097e0 <Example_MsgQueue+0x100>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:167
    {
        dprintf("create queue failure!,error:%x\n",uwRet);
800097d0:	fec42583          	lw	a1,-20(s0)
800097d4:	8000d7b7          	lui	a5,0x8000d
800097d8:	18078513          	addi	a0,a5,384 # 8000d180 <__stack_top+0xfffceb80>
800097dc:	a88f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:170
    }

    dprintf("create the queue success!\n");
800097e0:	8000d7b7          	lui	a5,0x8000d
800097e4:	1a078513          	addi	a0,a5,416 # 8000d1a0 <__stack_top+0xfffceba0>
800097e8:	a7cf80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:171
    LOS_TaskUnlock();//解锁任务，只有队列创建后才开始任务调度
800097ec:	cc4ff0ef          	jal	ra,80008cb0 <LOS_TaskUnlock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:173
    
    return LOS_OK;
800097f0:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_msgqueue.c:174 (discriminator 1)
}
800097f4:	00078513          	mv	a0,a5
800097f8:	03c12083          	lw	ra,60(sp)
800097fc:	03812403          	lw	s0,56(sp)
80009800:	04010113          	addi	sp,sp,64
80009804:	00008067          	ret
80009808:	0000                	unimp
	...

8000980c <Example_MutexTask1>:
Example_MutexTask1():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:62
UINT32 g_TestTaskID01;
UINT32 g_TestTaskID02;


VOID Example_MutexTask1()
{
8000980c:	fe010113          	addi	sp,sp,-32
80009810:	00112e23          	sw	ra,28(sp)
80009814:	00812c23          	sw	s0,24(sp)
80009818:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:65
    UINT32 uwRet;

    dprintf("task1 try to get mutex, wait 10 Tick.\n");
8000981c:	8000d7b7          	lui	a5,0x8000d
80009820:	1bc78513          	addi	a0,a5,444 # 8000d1bc <__stack_top+0xfffcebbc>
80009824:	a40f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:67
    /*申请互斥锁*/
    uwRet=LOS_MuxPend(g_Testmux01, 10);
80009828:	8001e7b7          	lui	a5,0x8001e
8000982c:	3947a783          	lw	a5,916(a5) # 8001e394 <__stack_top+0xfffdfd94>
80009830:	00a00593          	li	a1,10
80009834:	00078513          	mv	a0,a5
80009838:	e5dfa0ef          	jal	ra,80004694 <LOS_MuxPend>
8000983c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:69

    if(uwRet == LOS_OK)
80009840:	fec42783          	lw	a5,-20(s0)
80009844:	02079263          	bnez	a5,80009868 <Example_MutexTask1+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:71
    {
        dprintf("task1 get mutex g_Testmux01.\n");
80009848:	8000d7b7          	lui	a5,0x8000d
8000984c:	1e478513          	addi	a0,a5,484 # 8000d1e4 <__stack_top+0xfffcebe4>
80009850:	a14f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:73
        /*释放互斥锁*/
        LOS_MuxPost(g_Testmux01);
80009854:	8001e7b7          	lui	a5,0x8001e
80009858:	3947a783          	lw	a5,916(a5) # 8001e394 <__stack_top+0xfffdfd94>
8000985c:	00078513          	mv	a0,a5
80009860:	928fb0ef          	jal	ra,80004988 <LOS_MuxPost>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:74
        return;
80009864:	0700006f          	j	800098d4 <Example_MutexTask1+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:76
    }
    else if(uwRet == LOS_ERRNO_MUX_TIMEOUT )
80009868:	fec42703          	lw	a4,-20(s0)
8000986c:	020027b7          	lui	a5,0x2002
80009870:	d0778793          	addi	a5,a5,-761 # 2001d07 <RAM_SIZE+0x1f81d07>
80009874:	04f71e63          	bne	a4,a5,800098d0 <Example_MutexTask1+0xc4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:78
    {
        dprintf("task1 timeout and try to get  mutex, wait forever.\n");
80009878:	8000d7b7          	lui	a5,0x8000d
8000987c:	20478513          	addi	a0,a5,516 # 8000d204 <__stack_top+0xfffcec04>
80009880:	9e4f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:80
        /*LOS_WAIT_FOREVER方式申请互斥锁,获取不到时程序阻塞，不会返回*/
        uwRet = LOS_MuxPend(g_Testmux01, LOS_WAIT_FOREVER);
80009884:	8001e7b7          	lui	a5,0x8001e
80009888:	3947a783          	lw	a5,916(a5) # 8001e394 <__stack_top+0xfffdfd94>
8000988c:	fff00593          	li	a1,-1
80009890:	00078513          	mv	a0,a5
80009894:	e01fa0ef          	jal	ra,80004694 <LOS_MuxPend>
80009898:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:81
        if(uwRet == LOS_OK)
8000989c:	fec42783          	lw	a5,-20(s0)
800098a0:	02079863          	bnez	a5,800098d0 <Example_MutexTask1+0xc4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:83
        {
            dprintf("task1 wait forever,got mutex g_Testmux01 success.\n");
800098a4:	8000d7b7          	lui	a5,0x8000d
800098a8:	23878513          	addi	a0,a5,568 # 8000d238 <__stack_top+0xfffcec38>
800098ac:	9b8f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:85
            /*释放互斥锁*/
            LOS_MuxPost(g_Testmux01);
800098b0:	8001e7b7          	lui	a5,0x8001e
800098b4:	3947a783          	lw	a5,916(a5) # 8001e394 <__stack_top+0xfffdfd94>
800098b8:	00078513          	mv	a0,a5
800098bc:	8ccfb0ef          	jal	ra,80004988 <LOS_MuxPost>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:86
            LOS_InspectStatusSetByID(LOS_INSPECT_MUTEX,LOS_INSPECT_STU_SUCCESS);
800098c0:	00000593          	li	a1,0
800098c4:	00400513          	li	a0,4
800098c8:	4c9000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:87
            return;
800098cc:	0080006f          	j	800098d4 <Example_MutexTask1+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:90
        }
    }
    return;
800098d0:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:91
}
800098d4:	01c12083          	lw	ra,28(sp)
800098d8:	01812403          	lw	s0,24(sp)
800098dc:	02010113          	addi	sp,sp,32
800098e0:	00008067          	ret
800098e4:	0000                	unimp
	...

800098e8 <Example_MutexTask2>:
Example_MutexTask2():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:94

VOID Example_MutexTask2()
{
800098e8:	fe010113          	addi	sp,sp,-32
800098ec:	00112e23          	sw	ra,28(sp)
800098f0:	00812c23          	sw	s0,24(sp)
800098f4:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:97
    UINT32 uwRet;

    dprintf("task2 try to get mutex, wait forever.\n");
800098f8:	8000d7b7          	lui	a5,0x8000d
800098fc:	26c78513          	addi	a0,a5,620 # 8000d26c <__stack_top+0xfffcec6c>
80009900:	964f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:99
    /*申请互斥锁*/
    uwRet=LOS_MuxPend(g_Testmux01, LOS_WAIT_FOREVER);
80009904:	8001e7b7          	lui	a5,0x8001e
80009908:	3947a783          	lw	a5,916(a5) # 8001e394 <__stack_top+0xfffdfd94>
8000990c:	fff00593          	li	a1,-1
80009910:	00078513          	mv	a0,a5
80009914:	d81fa0ef          	jal	ra,80004694 <LOS_MuxPend>
80009918:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:100
    if(uwRet != LOS_OK)
8000991c:	fec42783          	lw	a5,-20(s0)
80009920:	00078a63          	beqz	a5,80009934 <Example_MutexTask2+0x4c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:102
    {
        dprintf("task2 LOS_MuxPend failed .\n");
80009924:	8000d7b7          	lui	a5,0x8000d
80009928:	29478513          	addi	a0,a5,660 # 8000d294 <__stack_top+0xfffcec94>
8000992c:	938f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:103
        return;
80009930:	0380006f          	j	80009968 <Example_MutexTask2+0x80>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:106
    }

    dprintf("task2 get mutex g_Testmux01 and suspend 100 Tick.\n");
80009934:	8000d7b7          	lui	a5,0x8000d
80009938:	2b078513          	addi	a0,a5,688 # 8000d2b0 <__stack_top+0xfffcecb0>
8000993c:	928f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:109

    /*任务休眠100 Tick*/
    LOS_TaskDelay(100);
80009940:	06400513          	li	a0,100
80009944:	8f4ff0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:111

    dprintf("task2 resumed and post the g_Testmux01\n");
80009948:	8000d7b7          	lui	a5,0x8000d
8000994c:	2e478513          	addi	a0,a5,740 # 8000d2e4 <__stack_top+0xfffcece4>
80009950:	914f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:113
    /*释放互斥锁*/
    LOS_MuxPost(g_Testmux01);
80009954:	8001e7b7          	lui	a5,0x8001e
80009958:	3947a783          	lw	a5,916(a5) # 8001e394 <__stack_top+0xfffdfd94>
8000995c:	00078513          	mv	a0,a5
80009960:	828fb0ef          	jal	ra,80004988 <LOS_MuxPost>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:114
    return;
80009964:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:115
}
80009968:	01c12083          	lw	ra,28(sp)
8000996c:	01812403          	lw	s0,24(sp)
80009970:	02010113          	addi	sp,sp,32
80009974:	00008067          	ret
80009978:	0000                	unimp
	...

8000997c <Example_MutexLock>:
Example_MutexLock():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:118

UINT32 Example_MutexLock(VOID)
{
8000997c:	fa010113          	addi	sp,sp,-96
80009980:	04112e23          	sw	ra,92(sp)
80009984:	04812c23          	sw	s0,88(sp)
80009988:	06010413          	addi	s0,sp,96
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:123
    UINT32 uwRet;
    TSK_INIT_PARAM_S stTask1;
    TSK_INIT_PARAM_S stTask2;

    LOS_Inspect_delim();
8000998c:	120010ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:126

    /*创建互斥锁*/
    LOS_MuxCreate(&g_Testmux01);
80009990:	8001e7b7          	lui	a5,0x8001e
80009994:	39478513          	addi	a0,a5,916 # 8001e394 <__stack_top+0xfffdfd94>
80009998:	b31fa0ef          	jal	ra,800044c8 <LOS_MuxCreate>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:129

    /*锁任务调度*/
    LOS_TaskLock();
8000999c:	ac0ff0ef          	jal	ra,80008c5c <LOS_TaskLock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:132

    /*创建任务1*/
    memset(&stTask1, 0, sizeof(TSK_INIT_PARAM_S));
800099a0:	fc840793          	addi	a5,s0,-56
800099a4:	02400613          	li	a2,36
800099a8:	00000593          	li	a1,0
800099ac:	00078513          	mv	a0,a5
800099b0:	21c010ef          	jal	ra,8000abcc <memset>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:133
    stTask1.pfnTaskEntry = (TSK_ENTRY_FUNC)Example_MutexTask1;
800099b4:	8000a7b7          	lui	a5,0x8000a
800099b8:	80c78793          	addi	a5,a5,-2036 # 8000980c <__stack_top+0xfffcb20c>
800099bc:	fcf42423          	sw	a5,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:134
    stTask1.pcName       = "MutexTsk1";
800099c0:	8000d7b7          	lui	a5,0x8000d
800099c4:	30c78793          	addi	a5,a5,780 # 8000d30c <__stack_top+0xfffced0c>
800099c8:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:135
    stTask1.uwStackSize  = LOSCFG_BASE_CORE_TSK_DEFAULT_STACK_SIZE;
800099cc:	50000793          	li	a5,1280
800099d0:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:136
    stTask1.usTaskPrio   = 5;
800099d4:	00500793          	li	a5,5
800099d8:	fcf41623          	sh	a5,-52(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:137
    uwRet = LOS_TaskCreate(&g_TestTaskID01, &stTask1);
800099dc:	fc840793          	addi	a5,s0,-56
800099e0:	00078593          	mv	a1,a5
800099e4:	8001e7b7          	lui	a5,0x8001e
800099e8:	39c78513          	addi	a0,a5,924 # 8001e39c <__stack_top+0xfffdfd9c>
800099ec:	885fe0ef          	jal	ra,80008270 <LOS_TaskCreate>
800099f0:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:138
    if(uwRet != LOS_OK)
800099f4:	fec42783          	lw	a5,-20(s0)
800099f8:	00078c63          	beqz	a5,80009a10 <Example_MutexLock+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:140
    {
        dprintf("task1 create failed .\n");
800099fc:	8000d7b7          	lui	a5,0x8000d
80009a00:	31878513          	addi	a0,a5,792 # 8000d318 <__stack_top+0xfffced18>
80009a04:	860f80ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:141
        return LOS_NOK;
80009a08:	00100793          	li	a5,1
80009a0c:	0f40006f          	j	80009b00 <Example_MutexLock+0x184>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:145
    }

    /*创建任务2*/
    memset(&stTask2, 0, sizeof(TSK_INIT_PARAM_S));
80009a10:	fa440793          	addi	a5,s0,-92
80009a14:	02400613          	li	a2,36
80009a18:	00000593          	li	a1,0
80009a1c:	00078513          	mv	a0,a5
80009a20:	1ac010ef          	jal	ra,8000abcc <memset>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:146
    stTask2.pfnTaskEntry = (TSK_ENTRY_FUNC)Example_MutexTask2;
80009a24:	8000a7b7          	lui	a5,0x8000a
80009a28:	8e878793          	addi	a5,a5,-1816 # 800098e8 <__stack_top+0xfffcb2e8>
80009a2c:	faf42223          	sw	a5,-92(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:147
    stTask2.pcName       = "MutexTsk2";
80009a30:	8000d7b7          	lui	a5,0x8000d
80009a34:	33078793          	addi	a5,a5,816 # 8000d330 <__stack_top+0xfffced30>
80009a38:	fcf42023          	sw	a5,-64(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:148
    stTask2.uwStackSize  = LOSCFG_BASE_CORE_TSK_DEFAULT_STACK_SIZE;
80009a3c:	50000793          	li	a5,1280
80009a40:	faf42e23          	sw	a5,-68(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:149
    stTask2.usTaskPrio   = 4;
80009a44:	00400793          	li	a5,4
80009a48:	faf41423          	sh	a5,-88(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:150
    uwRet = LOS_TaskCreate(&g_TestTaskID02, &stTask2);
80009a4c:	fa440793          	addi	a5,s0,-92
80009a50:	00078593          	mv	a1,a5
80009a54:	8001e7b7          	lui	a5,0x8001e
80009a58:	39878513          	addi	a0,a5,920 # 8001e398 <__stack_top+0xfffdfd98>
80009a5c:	815fe0ef          	jal	ra,80008270 <LOS_TaskCreate>
80009a60:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:151
    if(uwRet != LOS_OK)
80009a64:	fec42783          	lw	a5,-20(s0)
80009a68:	00078c63          	beqz	a5,80009a80 <Example_MutexLock+0x104>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:153
    {
        dprintf("task2 create failed .\n");
80009a6c:	8000d7b7          	lui	a5,0x8000d
80009a70:	33c78513          	addi	a0,a5,828 # 8000d33c <__stack_top+0xfffced3c>
80009a74:	ff1f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:154
        return LOS_NOK;
80009a78:	00100793          	li	a5,1
80009a7c:	0840006f          	j	80009b00 <Example_MutexLock+0x184>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:158
    }

    /*解锁任务调度*/
    LOS_TaskUnlock();
80009a80:	a30ff0ef          	jal	ra,80008cb0 <LOS_TaskUnlock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:160
    /*任务休眠300 Tick*/
    LOS_TaskDelay(300);
80009a84:	12c00513          	li	a0,300
80009a88:	fb1fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:163

    /*删除互斥锁*/
    LOS_MuxDelete(g_Testmux01);
80009a8c:	8001e7b7          	lui	a5,0x8001e
80009a90:	3947a783          	lw	a5,916(a5) # 8001e394 <__stack_top+0xfffdfd94>
80009a94:	00078513          	mv	a0,a5
80009a98:	b15fa0ef          	jal	ra,800045ac <LOS_MuxDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:166

    /*删除任务1*/
    uwRet = LOS_TaskDelete(g_TestTaskID01);
80009a9c:	8001e7b7          	lui	a5,0x8001e
80009aa0:	39c7a783          	lw	a5,924(a5) # 8001e39c <__stack_top+0xfffdfd9c>
80009aa4:	00078513          	mv	a0,a5
80009aa8:	c71fe0ef          	jal	ra,80008718 <LOS_TaskDelete>
80009aac:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:167
    if(uwRet != LOS_OK)
80009ab0:	fec42783          	lw	a5,-20(s0)
80009ab4:	00078c63          	beqz	a5,80009acc <Example_MutexLock+0x150>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:169
    {
        dprintf("task1 delete failed .\n");
80009ab8:	8000d7b7          	lui	a5,0x8000d
80009abc:	35478513          	addi	a0,a5,852 # 8000d354 <__stack_top+0xfffced54>
80009ac0:	fa5f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:170
        return LOS_NOK;
80009ac4:	00100793          	li	a5,1
80009ac8:	0380006f          	j	80009b00 <Example_MutexLock+0x184>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:173
    }
    /*删除任务2*/
    uwRet = LOS_TaskDelete(g_TestTaskID02);
80009acc:	8001e7b7          	lui	a5,0x8001e
80009ad0:	3987a783          	lw	a5,920(a5) # 8001e398 <__stack_top+0xfffdfd98>
80009ad4:	00078513          	mv	a0,a5
80009ad8:	c41fe0ef          	jal	ra,80008718 <LOS_TaskDelete>
80009adc:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:174
    if(uwRet != LOS_OK)
80009ae0:	fec42783          	lw	a5,-20(s0)
80009ae4:	00078c63          	beqz	a5,80009afc <Example_MutexLock+0x180>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:176
    {
        dprintf("task2 delete failed .\n");
80009ae8:	8000d7b7          	lui	a5,0x8000d
80009aec:	36c78513          	addi	a0,a5,876 # 8000d36c <__stack_top+0xfffced6c>
80009af0:	f75f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:177
        return LOS_NOK;
80009af4:	00100793          	li	a5,1
80009af8:	0080006f          	j	80009b00 <Example_MutexLock+0x184>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:180
    }

    return LOS_OK;
80009afc:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_mutex.c:181 (discriminator 1)
}
80009b00:	00078513          	mv	a0,a5
80009b04:	05c12083          	lw	ra,92(sp)
80009b08:	05812403          	lw	s0,88(sp)
80009b0c:	06010113          	addi	sp,sp,96
80009b10:	00008067          	ret
80009b14:	0000                	unimp
	...

80009b18 <Example_SemTask1>:
Example_SemTask1():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:62
/*信号量结构体ID*/
static UINT32 g_usSemID;


VOID Example_SemTask1(void)
{
80009b18:	fe010113          	addi	sp,sp,-32
80009b1c:	00112e23          	sw	ra,28(sp)
80009b20:	00812c23          	sw	s0,24(sp)
80009b24:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:65
    UINT32 uwRet;

    dprintf("Example_SemTask1 try get sem g_usSemID ,timeout 10 ticks.\n");
80009b28:	8000d7b7          	lui	a5,0x8000d
80009b2c:	38478513          	addi	a0,a5,900 # 8000d384 <__stack_top+0xfffced84>
80009b30:	f35f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:67
    /*定时阻塞模式申请信号量，定时时间为10Tick*/
    uwRet = LOS_SemPend(g_usSemID, 10);
80009b34:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009b38:	00a00593          	li	a1,10
80009b3c:	00078513          	mv	a0,a5
80009b40:	a04fc0ef          	jal	ra,80005d44 <LOS_SemPend>
80009b44:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:70

    /*申请到信号量*/
    if(LOS_OK == uwRet)
80009b48:	fec42783          	lw	a5,-20(s0)
80009b4c:	00079a63          	bnez	a5,80009b60 <Example_SemTask1+0x48>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:72
    {
        LOS_SemPost(g_usSemID);
80009b50:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009b54:	00078513          	mv	a0,a5
80009b58:	c30fc0ef          	jal	ra,80005f88 <LOS_SemPost>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:73
        return;
80009b5c:	0680006f          	j	80009bc4 <Example_SemTask1+0xac>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:76
    }
    /*定时时间到，未申请到信号量*/
    if(LOS_ERRNO_SEM_TIMEOUT == uwRet)
80009b60:	fec42703          	lw	a4,-20(s0)
80009b64:	020007b7          	lui	a5,0x2000
80009b68:	70778793          	addi	a5,a5,1799 # 2000707 <RAM_SIZE+0x1f80707>
80009b6c:	04f71a63          	bne	a4,a5,80009bc0 <Example_SemTask1+0xa8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:78
    {
        dprintf("Example_SemTask1 timeout and try get sem g_usSemID wait forever.\n");
80009b70:	8000d7b7          	lui	a5,0x8000d
80009b74:	3c078513          	addi	a0,a5,960 # 8000d3c0 <__stack_top+0xfffcedc0>
80009b78:	eedf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:80
        /*永久阻塞模式申请信号量,获取不到时程序阻塞，不会返回*/
        uwRet = LOS_SemPend(g_usSemID, LOS_WAIT_FOREVER);
80009b7c:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009b80:	fff00593          	li	a1,-1
80009b84:	00078513          	mv	a0,a5
80009b88:	9bcfc0ef          	jal	ra,80005d44 <LOS_SemPend>
80009b8c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:81
        if(LOS_OK == uwRet)
80009b90:	fec42783          	lw	a5,-20(s0)
80009b94:	02079663          	bnez	a5,80009bc0 <Example_SemTask1+0xa8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:83
        {
            dprintf("Example_SemTask1 wait_forever and got sem g_usSemID success.\n");
80009b98:	8000d7b7          	lui	a5,0x8000d
80009b9c:	40478513          	addi	a0,a5,1028 # 8000d404 <__stack_top+0xfffcee04>
80009ba0:	ec5f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:84
            LOS_SemPost(g_usSemID);
80009ba4:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009ba8:	00078513          	mv	a0,a5
80009bac:	bdcfc0ef          	jal	ra,80005f88 <LOS_SemPost>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:85
            LOS_InspectStatusSetByID(LOS_INSPECT_SEM,LOS_INSPECT_STU_SUCCESS);
80009bb0:	00000593          	li	a1,0
80009bb4:	00300513          	li	a0,3
80009bb8:	1d9000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:86
            return;
80009bbc:	0080006f          	j	80009bc4 <Example_SemTask1+0xac>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:89
        }
    }
    return;
80009bc0:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:90
}
80009bc4:	01c12083          	lw	ra,28(sp)
80009bc8:	01812403          	lw	s0,24(sp)
80009bcc:	02010113          	addi	sp,sp,32
80009bd0:	00008067          	ret
80009bd4:	0000                	unimp
	...

80009bd8 <Example_SemTask2>:
Example_SemTask2():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:93

VOID   Example_SemTask2(void)
{
80009bd8:	fe010113          	addi	sp,sp,-32
80009bdc:	00112e23          	sw	ra,28(sp)
80009be0:	00812c23          	sw	s0,24(sp)
80009be4:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:95
    UINT32 uwRet;
    dprintf("Example_SemTask2 try get sem g_usSemID wait forever.\n");
80009be8:	8000d7b7          	lui	a5,0x8000d
80009bec:	44478513          	addi	a0,a5,1092 # 8000d444 <__stack_top+0xfffcee44>
80009bf0:	e75f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:97
    /*永久阻塞模式申请信号量*/
    uwRet = LOS_SemPend(g_usSemID, LOS_WAIT_FOREVER);
80009bf4:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009bf8:	fff00593          	li	a1,-1
80009bfc:	00078513          	mv	a0,a5
80009c00:	944fc0ef          	jal	ra,80005d44 <LOS_SemPend>
80009c04:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:99

    if(LOS_OK == uwRet)
80009c08:	fec42783          	lw	a5,-20(s0)
80009c0c:	00079863          	bnez	a5,80009c1c <Example_SemTask2+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:101
    {
        dprintf("Example_SemTask2 get sem g_usSemID and then delay 20ticks .\n");
80009c10:	8000d7b7          	lui	a5,0x8000d
80009c14:	47c78513          	addi	a0,a5,1148 # 8000d47c <__stack_top+0xfffcee7c>
80009c18:	e4df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:105
    }

    /*任务休眠20 Tick*/
    LOS_TaskDelay(20);
80009c1c:	01400513          	li	a0,20
80009c20:	e19fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:107

    dprintf("Example_SemTask2 post sem g_usSemID .\n");
80009c24:	8000d7b7          	lui	a5,0x8000d
80009c28:	4bc78513          	addi	a0,a5,1212 # 8000d4bc <__stack_top+0xfffceebc>
80009c2c:	e39f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:109
    /*释放信号量*/
    LOS_SemPost(g_usSemID);
80009c30:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009c34:	00078513          	mv	a0,a5
80009c38:	b50fc0ef          	jal	ra,80005f88 <LOS_SemPost>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:111

    return;
80009c3c:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:112
}
80009c40:	01c12083          	lw	ra,28(sp)
80009c44:	01812403          	lw	s0,24(sp)
80009c48:	02010113          	addi	sp,sp,32
80009c4c:	00008067          	ret
80009c50:	0000                	unimp
	...

80009c54 <Example_Semphore>:
Example_Semphore():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:115

UINT32 Example_Semphore(VOID)
{
80009c54:	fa010113          	addi	sp,sp,-96
80009c58:	04112e23          	sw	ra,92(sp)
80009c5c:	04812c23          	sw	s0,88(sp)
80009c60:	06010413          	addi	s0,sp,96
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:116
    UINT32 uwRet = LOS_OK;
80009c64:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:120
    TSK_INIT_PARAM_S stTask1;
    TSK_INIT_PARAM_S stTask2;

    LOS_Inspect_delim();
80009c68:	645000ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:123

   /*创建信号量*/
    LOS_SemCreate(0,&g_usSemID);
80009c6c:	df418593          	addi	a1,gp,-524 # 8000e124 <g_usSemID>
80009c70:	00000513          	li	a0,0
80009c74:	f05fb0ef          	jal	ra,80005b78 <LOS_SemCreate>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:126

    /*锁任务调度*/
    LOS_TaskLock();
80009c78:	fe5fe0ef          	jal	ra,80008c5c <LOS_TaskLock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:129

    /*创建任务1*/
    memset(&stTask1, 0, sizeof(TSK_INIT_PARAM_S));
80009c7c:	fc840793          	addi	a5,s0,-56
80009c80:	02400613          	li	a2,36
80009c84:	00000593          	li	a1,0
80009c88:	00078513          	mv	a0,a5
80009c8c:	741000ef          	jal	ra,8000abcc <memset>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:130
    stTask1.pfnTaskEntry = (TSK_ENTRY_FUNC)Example_SemTask1;
80009c90:	8000a7b7          	lui	a5,0x8000a
80009c94:	b1878793          	addi	a5,a5,-1256 # 80009b18 <__stack_top+0xfffcb518>
80009c98:	fcf42423          	sw	a5,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:131
    stTask1.pcName       = "MutexTsk1";
80009c9c:	8000d7b7          	lui	a5,0x8000d
80009ca0:	4e478793          	addi	a5,a5,1252 # 8000d4e4 <__stack_top+0xfffceee4>
80009ca4:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:132
    stTask1.uwStackSize  = LOSCFG_BASE_CORE_TSK_IDLE_STACK_SIZE;
80009ca8:	50000793          	li	a5,1280
80009cac:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:133
    stTask1.usTaskPrio   = TASK_PRIO_TEST;
80009cb0:	00500793          	li	a5,5
80009cb4:	fcf41623          	sh	a5,-52(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:134
    uwRet = LOS_TaskCreate(&g_TestTaskID01, &stTask1);
80009cb8:	fc840793          	addi	a5,s0,-56
80009cbc:	00078593          	mv	a1,a5
80009cc0:	dec18513          	addi	a0,gp,-532 # 8000e11c <g_TestTaskID01>
80009cc4:	dacfe0ef          	jal	ra,80008270 <LOS_TaskCreate>
80009cc8:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:135
    if(uwRet != LOS_OK)
80009ccc:	fec42783          	lw	a5,-20(s0)
80009cd0:	00078c63          	beqz	a5,80009ce8 <Example_Semphore+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:137
    {
        dprintf("task1 create failed .\n");
80009cd4:	8000d7b7          	lui	a5,0x8000d
80009cd8:	4f078513          	addi	a0,a5,1264 # 8000d4f0 <__stack_top+0xfffceef0>
80009cdc:	d89f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:138
        return LOS_NOK;
80009ce0:	00100793          	li	a5,1
80009ce4:	10c0006f          	j	80009df0 <Example_Semphore+0x19c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:142
    }

    /*创建任务2*/
    memset(&stTask2, 0, sizeof(TSK_INIT_PARAM_S));
80009ce8:	fa440793          	addi	a5,s0,-92
80009cec:	02400613          	li	a2,36
80009cf0:	00000593          	li	a1,0
80009cf4:	00078513          	mv	a0,a5
80009cf8:	6d5000ef          	jal	ra,8000abcc <memset>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:143
    stTask2.pfnTaskEntry = (TSK_ENTRY_FUNC)Example_SemTask2;
80009cfc:	8000a7b7          	lui	a5,0x8000a
80009d00:	bd878793          	addi	a5,a5,-1064 # 80009bd8 <__stack_top+0xfffcb5d8>
80009d04:	faf42223          	sw	a5,-92(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:144
    stTask2.pcName       = "MutexTsk2";
80009d08:	8000d7b7          	lui	a5,0x8000d
80009d0c:	50878793          	addi	a5,a5,1288 # 8000d508 <__stack_top+0xfffcef08>
80009d10:	fcf42023          	sw	a5,-64(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:145
    stTask2.uwStackSize  = LOSCFG_BASE_CORE_TSK_IDLE_STACK_SIZE;
80009d14:	50000793          	li	a5,1280
80009d18:	faf42e23          	sw	a5,-68(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:146
    stTask2.usTaskPrio   = (TASK_PRIO_TEST - 1);
80009d1c:	00400793          	li	a5,4
80009d20:	faf41423          	sh	a5,-88(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:147
    uwRet = LOS_TaskCreate(&g_TestTaskID02, &stTask2);
80009d24:	fa440793          	addi	a5,s0,-92
80009d28:	00078593          	mv	a1,a5
80009d2c:	df018513          	addi	a0,gp,-528 # 8000e120 <g_TestTaskID02>
80009d30:	d40fe0ef          	jal	ra,80008270 <LOS_TaskCreate>
80009d34:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:148
    if(uwRet != LOS_OK)
80009d38:	fec42783          	lw	a5,-20(s0)
80009d3c:	02078c63          	beqz	a5,80009d74 <Example_Semphore+0x120>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:150
    {
        dprintf("task2 create failed .\n");
80009d40:	8000d7b7          	lui	a5,0x8000d
80009d44:	51478513          	addi	a0,a5,1300 # 8000d514 <__stack_top+0xfffcef14>
80009d48:	d1df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:153
        
        /*删除任务1*/
        if(LOS_OK != LOS_TaskDelete(g_TestTaskID01))
80009d4c:	dec1a783          	lw	a5,-532(gp) # 8000e11c <g_TestTaskID01>
80009d50:	00078513          	mv	a0,a5
80009d54:	9c5fe0ef          	jal	ra,80008718 <LOS_TaskDelete>
80009d58:	00050793          	mv	a5,a0
80009d5c:	00078863          	beqz	a5,80009d6c <Example_Semphore+0x118>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:155
        {
            dprintf("task1 delete failed .\n");
80009d60:	8000d7b7          	lui	a5,0x8000d
80009d64:	52c78513          	addi	a0,a5,1324 # 8000d52c <__stack_top+0xfffcef2c>
80009d68:	cfdf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:158
        }
        
        return LOS_NOK;
80009d6c:	00100793          	li	a5,1
80009d70:	0800006f          	j	80009df0 <Example_Semphore+0x19c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:162
    }

    /*解锁任务调度*/
    LOS_TaskUnlock();
80009d74:	f3dfe0ef          	jal	ra,80008cb0 <LOS_TaskUnlock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:164

    uwRet = LOS_SemPost(g_usSemID);
80009d78:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009d7c:	00078513          	mv	a0,a5
80009d80:	a08fc0ef          	jal	ra,80005f88 <LOS_SemPost>
80009d84:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:167

    /*任务休眠40 Tick*/
    LOS_TaskDelay(40);
80009d88:	02800513          	li	a0,40
80009d8c:	cadfe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:170

    /*删除信号量*/
    LOS_SemDelete(g_usSemID);
80009d90:	df41a783          	lw	a5,-524(gp) # 8000e124 <g_usSemID>
80009d94:	00078513          	mv	a0,a5
80009d98:	eddfb0ef          	jal	ra,80005c74 <LOS_SemDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:173

    /*删除任务1*/
    if(LOS_OK != LOS_TaskDelete(g_TestTaskID01))
80009d9c:	dec1a783          	lw	a5,-532(gp) # 8000e11c <g_TestTaskID01>
80009da0:	00078513          	mv	a0,a5
80009da4:	975fe0ef          	jal	ra,80008718 <LOS_TaskDelete>
80009da8:	00050793          	mv	a5,a0
80009dac:	00078c63          	beqz	a5,80009dc4 <Example_Semphore+0x170>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:175
    {
        dprintf("task1 delete failed .\n"); 
80009db0:	8000d7b7          	lui	a5,0x8000d
80009db4:	52c78513          	addi	a0,a5,1324 # 8000d52c <__stack_top+0xfffcef2c>
80009db8:	cadf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:176
        uwRet = LOS_NOK;
80009dbc:	00100793          	li	a5,1
80009dc0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:179
    }
    /*删除任务2*/
    if(LOS_OK != LOS_TaskDelete(g_TestTaskID02))
80009dc4:	df01a783          	lw	a5,-528(gp) # 8000e120 <g_TestTaskID02>
80009dc8:	00078513          	mv	a0,a5
80009dcc:	94dfe0ef          	jal	ra,80008718 <LOS_TaskDelete>
80009dd0:	00050793          	mv	a5,a0
80009dd4:	00078c63          	beqz	a5,80009dec <Example_Semphore+0x198>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:181
    {
        dprintf("task2 delete failed .\n");
80009dd8:	8000d7b7          	lui	a5,0x8000d
80009ddc:	54478513          	addi	a0,a5,1348 # 8000d544 <__stack_top+0xfffcef44>
80009de0:	c85f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:182
        uwRet = LOS_NOK;
80009de4:	00100793          	li	a5,1
80009de8:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:185
    }
    
    return uwRet;
80009dec:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_sem.c:186 (discriminator 1)
}
80009df0:	00078513          	mv	a0,a5
80009df4:	05c12083          	lw	ra,92(sp)
80009df8:	05812403          	lw	s0,88(sp)
80009dfc:	06010113          	addi	sp,sp,96
80009e00:	00008067          	ret
80009e04:	0000                	unimp
	...

80009e08 <Example_StaticMem>:
Example_StaticMem():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:48
#endif /* __cpluscplus */
#endif /* __cpluscplus */

UINT32 pBoxMem[150];
UINT32 Example_StaticMem(VOID) 
{
80009e08:	fe010113          	addi	sp,sp,-32
80009e0c:	00112e23          	sw	ra,28(sp)
80009e10:	00812c23          	sw	s0,24(sp)
80009e14:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:49
    UINT32 *p_num = NULL;
80009e18:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:50
    UINT32 uwBlkSize = 3, uwBoxSize = 50;
80009e1c:	00300793          	li	a5,3
80009e20:	fef42423          	sw	a5,-24(s0)
80009e24:	03200793          	li	a5,50
80009e28:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:53
    UINT32 uwRet;
    
    LOS_Inspect_delim();
80009e2c:	481000ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:55

    uwRet = LOS_MemboxInit( &pBoxMem[0], uwBoxSize, uwBlkSize);
80009e30:	fe842603          	lw	a2,-24(s0)
80009e34:	fe442583          	lw	a1,-28(s0)
80009e38:	8001e7b7          	lui	a5,0x8001e
80009e3c:	3a078513          	addi	a0,a5,928 # 8001e3a0 <__stack_top+0xfffdfda0>
80009e40:	e94f80ef          	jal	ra,800024d4 <LOS_MemboxInit>
80009e44:	fea42023          	sw	a0,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:56
    if(uwRet != LOS_OK)
80009e48:	fe042783          	lw	a5,-32(s0)
80009e4c:	00078c63          	beqz	a5,80009e64 <Example_StaticMem+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:58
    {
        dprintf("Mem box init failed\n");
80009e50:	8000d7b7          	lui	a5,0x8000d
80009e54:	55c78513          	addi	a0,a5,1372 # 8000d55c <__stack_top+0xfffcef5c>
80009e58:	c0df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:59
        return LOS_NOK;
80009e5c:	00100793          	li	a5,1
80009e60:	0e80006f          	j	80009f48 <Example_StaticMem+0x140>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:63
    }
    else
    {
        dprintf("Mem box init ok!\n");
80009e64:	8000d7b7          	lui	a5,0x8000d
80009e68:	57478513          	addi	a0,a5,1396 # 8000d574 <__stack_top+0xfffcef74>
80009e6c:	bf9f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:67
    }
    
    /*申请内存块*/
    p_num = (UINT32*)LOS_MemboxAlloc(pBoxMem);
80009e70:	8001e7b7          	lui	a5,0x8001e
80009e74:	3a078513          	addi	a0,a5,928 # 8001e3a0 <__stack_top+0xfffdfda0>
80009e78:	f9cf80ef          	jal	ra,80002614 <LOS_MemboxAlloc>
80009e7c:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:68
    if (NULL == p_num) 
80009e80:	fec42783          	lw	a5,-20(s0)
80009e84:	00079c63          	bnez	a5,80009e9c <Example_StaticMem+0x94>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:70
    {
        dprintf("Mem box alloc failed!\n");
80009e88:	8000d7b7          	lui	a5,0x8000d
80009e8c:	58878513          	addi	a0,a5,1416 # 8000d588 <__stack_top+0xfffcef88>
80009e90:	bd5f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:71
        return LOS_NOK;
80009e94:	00100793          	li	a5,1
80009e98:	0b00006f          	j	80009f48 <Example_StaticMem+0x140>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:73
    }
    dprintf("Mem box alloc ok\n");
80009e9c:	8000d7b7          	lui	a5,0x8000d
80009ea0:	5a078513          	addi	a0,a5,1440 # 8000d5a0 <__stack_top+0xfffcefa0>
80009ea4:	bc1f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:75
    /*赋值*/
    *p_num = 828;
80009ea8:	fec42783          	lw	a5,-20(s0)
80009eac:	33c00713          	li	a4,828
80009eb0:	00e7a023          	sw	a4,0(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:76
    dprintf("*p_num = %d\n", *p_num);
80009eb4:	fec42783          	lw	a5,-20(s0)
80009eb8:	0007a783          	lw	a5,0(a5)
80009ebc:	00078593          	mv	a1,a5
80009ec0:	8000d7b7          	lui	a5,0x8000d
80009ec4:	5b478513          	addi	a0,a5,1460 # 8000d5b4 <__stack_top+0xfffcefb4>
80009ec8:	b9df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:78
     /*清除内存内容*/
     LOS_MemboxClr(pBoxMem, p_num);
80009ecc:	fec42583          	lw	a1,-20(s0)
80009ed0:	8001e7b7          	lui	a5,0x8001e
80009ed4:	3a078513          	addi	a0,a5,928 # 8001e3a0 <__stack_top+0xfffdfda0>
80009ed8:	8a9f80ef          	jal	ra,80002780 <LOS_MemboxClr>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:79
     dprintf("clear data ok\n *p_num = %d\n", *p_num);
80009edc:	fec42783          	lw	a5,-20(s0)
80009ee0:	0007a783          	lw	a5,0(a5)
80009ee4:	00078593          	mv	a1,a5
80009ee8:	8000d7b7          	lui	a5,0x8000d
80009eec:	5c478513          	addi	a0,a5,1476 # 8000d5c4 <__stack_top+0xfffcefc4>
80009ef0:	b75f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:81
    /*释放内存*/
    uwRet = LOS_MemboxFree(pBoxMem, p_num);
80009ef4:	fec42583          	lw	a1,-20(s0)
80009ef8:	8001e7b7          	lui	a5,0x8001e
80009efc:	3a078513          	addi	a0,a5,928 # 8001e3a0 <__stack_top+0xfffdfda0>
80009f00:	fccf80ef          	jal	ra,800026cc <LOS_MemboxFree>
80009f04:	fea42023          	sw	a0,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:82
    if (LOS_OK == uwRet)
80009f08:	fe042783          	lw	a5,-32(s0)
80009f0c:	02079063          	bnez	a5,80009f2c <Example_StaticMem+0x124>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:84
    {
        dprintf("Mem box free ok!\n");
80009f10:	8000d7b7          	lui	a5,0x8000d
80009f14:	5e078513          	addi	a0,a5,1504 # 8000d5e0 <__stack_top+0xfffcefe0>
80009f18:	b4df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:85
        LOS_InspectStatusSetByID(LOS_INSPECT_SMEM,LOS_INSPECT_STU_SUCCESS);
80009f1c:	00000593          	li	a1,0
80009f20:	00800513          	li	a0,8
80009f24:	66c000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
80009f28:	01c0006f          	j	80009f44 <Example_StaticMem+0x13c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:89
    }
    else
    {
        dprintf("Mem box free failed!\n");
80009f2c:	8000d7b7          	lui	a5,0x8000d
80009f30:	5f478513          	addi	a0,a5,1524 # 8000d5f4 <__stack_top+0xfffceff4>
80009f34:	b31f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:90
        LOS_InspectStatusSetByID(LOS_INSPECT_SMEM,LOS_INSPECT_STU_ERROR);
80009f38:	00100593          	li	a1,1
80009f3c:	00800513          	li	a0,8
80009f40:	650000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:93
    }
    
    return LOS_OK;
80009f44:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_static_mem.c:94
}
80009f48:	00078513          	mv	a0,a5
80009f4c:	01c12083          	lw	ra,28(sp)
80009f50:	01812403          	lw	s0,24(sp)
80009f54:	02010113          	addi	sp,sp,32
80009f58:	00008067          	ret
80009f5c:	0000                	unimp
	...

80009f60 <Example_GetTick>:
Example_GetTick():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:60
    dprintf("uwMs = %d \n",uwMs);
}


UINT32 Example_GetTick(VOID)
{
80009f60:	fd010113          	addi	sp,sp,-48
80009f64:	02112623          	sw	ra,44(sp)
80009f68:	02812423          	sw	s0,40(sp)
80009f6c:	03010413          	addi	s0,sp,48
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:64
    UINT32 uwcyclePerTick;
    UINT64 uwTickCount1,uwTickCount2;

    LOS_Inspect_delim();
80009f70:	33d000ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:66

    uwcyclePerTick  = LOS_CyclePerTickGet();
80009f74:	8a4fd0ef          	jal	ra,80007018 <LOS_CyclePerTickGet>
80009f78:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:67
    if(0 != uwcyclePerTick)
80009f7c:	fec42783          	lw	a5,-20(s0)
80009f80:	00078a63          	beqz	a5,80009f94 <Example_GetTick+0x34>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:69
    {
        dprintf("LOS_CyclePerTickGet = %d \n", uwcyclePerTick);
80009f84:	fec42583          	lw	a1,-20(s0)
80009f88:	8000d7b7          	lui	a5,0x8000d
80009f8c:	62878513          	addi	a0,a5,1576 # 8000d628 <__stack_top+0xfffcf028>
80009f90:	ad5f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:72
    }

    uwTickCount1 = LOS_TickCountGet();
80009f94:	850fd0ef          	jal	ra,80006fe4 <LOS_TickCountGet>
80009f98:	fea42023          	sw	a0,-32(s0)
80009f9c:	feb42223          	sw	a1,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:73
    if(0 != uwTickCount1)
80009fa0:	fe042783          	lw	a5,-32(s0)
80009fa4:	fe442703          	lw	a4,-28(s0)
80009fa8:	00e7e7b3          	or	a5,a5,a4
80009fac:	00078c63          	beqz	a5,80009fc4 <Example_GetTick+0x64>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:75
    {
        dprintf("LOS_TickCountGet = %d \n", (UINT32)uwTickCount1);
80009fb0:	fe042783          	lw	a5,-32(s0)
80009fb4:	00078593          	mv	a1,a5
80009fb8:	8000d7b7          	lui	a5,0x8000d
80009fbc:	64478513          	addi	a0,a5,1604 # 8000d644 <__stack_top+0xfffcf044>
80009fc0:	aa5f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:77
    }
    LOS_TaskDelay(200);
80009fc4:	0c800513          	li	a0,200
80009fc8:	a71fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:78
    uwTickCount2 = LOS_TickCountGet();
80009fcc:	818fd0ef          	jal	ra,80006fe4 <LOS_TickCountGet>
80009fd0:	fca42c23          	sw	a0,-40(s0)
80009fd4:	fcb42e23          	sw	a1,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:79
    if(0 != uwTickCount2)
80009fd8:	fd842783          	lw	a5,-40(s0)
80009fdc:	fdc42703          	lw	a4,-36(s0)
80009fe0:	00e7e7b3          	or	a5,a5,a4
80009fe4:	00078c63          	beqz	a5,80009ffc <Example_GetTick+0x9c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:81
    {
        dprintf("LOS_TickCountGet after delay = %d \n", (UINT32)uwTickCount2);
80009fe8:	fd842783          	lw	a5,-40(s0)
80009fec:	00078593          	mv	a1,a5
80009ff0:	8000d7b7          	lui	a5,0x8000d
80009ff4:	65c78513          	addi	a0,a5,1628 # 8000d65c <__stack_top+0xfffcf05c>
80009ff8:	a6df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:84
    }
        
    if((uwTickCount2 - uwTickCount1) >= 200)
80009ffc:	fd842783          	lw	a5,-40(s0)
8000a000:	fdc42803          	lw	a6,-36(s0)
8000a004:	fe042583          	lw	a1,-32(s0)
8000a008:	fe442603          	lw	a2,-28(s0)
8000a00c:	40b786b3          	sub	a3,a5,a1
8000a010:	00068513          	mv	a0,a3
8000a014:	00a7b533          	sltu	a0,a5,a0
8000a018:	40c80733          	sub	a4,a6,a2
8000a01c:	40a707b3          	sub	a5,a4,a0
8000a020:	00078713          	mv	a4,a5
8000a024:	00068793          	mv	a5,a3
8000a028:	00070813          	mv	a6,a4
8000a02c:	00080713          	mv	a4,a6
8000a030:	00071c63          	bnez	a4,8000a048 <Example_GetTick+0xe8>
8000a034:	00080713          	mv	a4,a6
8000a038:	02071263          	bnez	a4,8000a05c <Example_GetTick+0xfc>
8000a03c:	00078713          	mv	a4,a5
8000a040:	0c700793          	li	a5,199
8000a044:	00e7fc63          	bleu	a4,a5,8000a05c <Example_GetTick+0xfc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:86
    {
        LOS_InspectStatusSetByID(LOS_INSPECT_SYSTIC,LOS_INSPECT_STU_SUCCESS);
8000a048:	00000593          	li	a1,0
8000a04c:	00500513          	li	a0,5
8000a050:	540000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:87
        return LOS_OK;   
8000a054:	00000793          	li	a5,0
8000a058:	0140006f          	j	8000a06c <Example_GetTick+0x10c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:91
    }
    else
    {
        LOS_InspectStatusSetByID(LOS_INSPECT_SYSTIC,LOS_INSPECT_STU_ERROR);
8000a05c:	00100593          	li	a1,1
8000a060:	00500513          	li	a0,5
8000a064:	52c000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:92
        return LOS_NOK; 
8000a068:	00100793          	li	a5,1
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_systick.c:94
    }
}
8000a06c:	00078513          	mv	a0,a5
8000a070:	02c12083          	lw	ra,44(sp)
8000a074:	02812403          	lw	s0,40(sp)
8000a078:	03010113          	addi	sp,sp,48
8000a07c:	00008067          	ret
8000a080:	0000                	unimp
	...

8000a084 <Example_TaskHi>:
Example_TaskHi():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:57

#define TSK_PRIOR_HI 4
#define TSK_PRIOR_LO 5

UINT32 Example_TaskHi(VOID)
{
8000a084:	fe010113          	addi	sp,sp,-32
8000a088:	00112e23          	sw	ra,28(sp)
8000a08c:	00812c23          	sw	s0,24(sp)
8000a090:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:60
    UINT32 uwRet;

    dprintf("Enter TaskHi Handler.\r\n");
8000a094:	8000d7b7          	lui	a5,0x8000d
8000a098:	68078513          	addi	a0,a5,1664 # 8000d680 <__stack_top+0xfffcf080>
8000a09c:	9c9f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:63

    /*延时2个Tick，延时后该任务会挂起，执行剩余任务中就高优先级的任务(g_uwTskLoID任务)*/
    uwRet = LOS_TaskDelay(2);
8000a0a0:	00200513          	li	a0,2
8000a0a4:	995fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
8000a0a8:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:64
    if (uwRet != LOS_OK)
8000a0ac:	fec42783          	lw	a5,-20(s0)
8000a0b0:	00078c63          	beqz	a5,8000a0c8 <Example_TaskHi+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:66
    {
        dprintf("Delay Task Failed.\r\n");
8000a0b4:	8000d7b7          	lui	a5,0x8000d
8000a0b8:	69878513          	addi	a0,a5,1688 # 8000d698 <__stack_top+0xfffcf098>
8000a0bc:	9a9f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:67
        return LOS_NOK;
8000a0c0:	00100793          	li	a5,1
8000a0c4:	0940006f          	j	8000a158 <Example_TaskHi+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:71
    }

    /*2个tick时间到了后，该任务恢复，继续执行*/
    dprintf("TaskHi LOS_TaskDelay Done.\r\n");
8000a0c8:	8000d7b7          	lui	a5,0x8000d
8000a0cc:	6b078513          	addi	a0,a5,1712 # 8000d6b0 <__stack_top+0xfffcf0b0>
8000a0d0:	995f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:74

    /*挂起自身任务*/
    uwRet = LOS_TaskSuspend(g_uwTskHiID);
8000a0d4:	8001e7b7          	lui	a5,0x8001e
8000a0d8:	5fc7a783          	lw	a5,1532(a5) # 8001e5fc <__stack_top+0xfffdfffc>
8000a0dc:	00078513          	mv	a0,a5
8000a0e0:	c64fe0ef          	jal	ra,80008544 <LOS_TaskSuspend>
8000a0e4:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:75
    if (uwRet != LOS_OK)
8000a0e8:	fec42783          	lw	a5,-20(s0)
8000a0ec:	02078263          	beqz	a5,8000a110 <Example_TaskHi+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:77
    {
        dprintf("Suspend TaskHi Failed.\r\n");
8000a0f0:	8000d7b7          	lui	a5,0x8000d
8000a0f4:	6d078513          	addi	a0,a5,1744 # 8000d6d0 <__stack_top+0xfffcf0d0>
8000a0f8:	96df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:78
        LOS_InspectStatusSetByID(LOS_INSPECT_TASK,LOS_INSPECT_STU_ERROR);
8000a0fc:	00100593          	li	a1,1
8000a100:	00000513          	li	a0,0
8000a104:	48c000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:79
        return LOS_NOK;
8000a108:	00100793          	li	a5,1
8000a10c:	04c0006f          	j	8000a158 <Example_TaskHi+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:82
    }
    
    dprintf("TaskHi LOS_TaskResume Success.\r\n");
8000a110:	8000d7b7          	lui	a5,0x8000d
8000a114:	6ec78513          	addi	a0,a5,1772 # 8000d6ec <__stack_top+0xfffcf0ec>
8000a118:	94df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:84
        
    LOS_InspectStatusSetByID(LOS_INSPECT_TASK,LOS_INSPECT_STU_SUCCESS);
8000a11c:	00000593          	li	a1,0
8000a120:	00000513          	li	a0,0
8000a124:	46c000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:87
    
    /*删除任务*/
    if(LOS_OK != LOS_TaskDelete(g_uwTskHiID))
8000a128:	8001e7b7          	lui	a5,0x8001e
8000a12c:	5fc7a783          	lw	a5,1532(a5) # 8001e5fc <__stack_top+0xfffdfffc>
8000a130:	00078513          	mv	a0,a5
8000a134:	de4fe0ef          	jal	ra,80008718 <LOS_TaskDelete>
8000a138:	00050793          	mv	a5,a0
8000a13c:	00078c63          	beqz	a5,8000a154 <Example_TaskHi+0xd0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:89
    {
        dprintf("TaskHi delete failed .\n");
8000a140:	8000d7b7          	lui	a5,0x8000d
8000a144:	71078513          	addi	a0,a5,1808 # 8000d710 <__stack_top+0xfffcf110>
8000a148:	91df70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:90
        return LOS_NOK;
8000a14c:	00100793          	li	a5,1
8000a150:	0080006f          	j	8000a158 <Example_TaskHi+0xd4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:93
    }
    
    return LOS_OK;
8000a154:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:94
}
8000a158:	00078513          	mv	a0,a5
8000a15c:	01c12083          	lw	ra,28(sp)
8000a160:	01812403          	lw	s0,24(sp)
8000a164:	02010113          	addi	sp,sp,32
8000a168:	00008067          	ret
8000a16c:	0000                	unimp
	...

8000a170 <Example_TaskLo>:
Example_TaskLo():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:98

/*低优先级任务入口函数*/
UINT32 Example_TaskLo(VOID)
{
8000a170:	fe010113          	addi	sp,sp,-32
8000a174:	00112e23          	sw	ra,28(sp)
8000a178:	00812c23          	sw	s0,24(sp)
8000a17c:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:101
    UINT32 uwRet;

    dprintf("Enter TaskLo Handler.\r\n");
8000a180:	8000d7b7          	lui	a5,0x8000d
8000a184:	72878513          	addi	a0,a5,1832 # 8000d728 <__stack_top+0xfffcf128>
8000a188:	8ddf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:104

    /*延时2个Tick，延时后该任务会挂起，执行剩余任务中就高优先级的任务(背景任务)*/
    uwRet = LOS_TaskDelay(2);
8000a18c:	00200513          	li	a0,2
8000a190:	8a9fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
8000a194:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:105
    if (uwRet != LOS_OK)
8000a198:	fec42783          	lw	a5,-20(s0)
8000a19c:	00078c63          	beqz	a5,8000a1b4 <Example_TaskLo+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:107
    {
        dprintf("Delay TaskLo Failed.\r\n");
8000a1a0:	8000d7b7          	lui	a5,0x8000d
8000a1a4:	74078513          	addi	a0,a5,1856 # 8000d740 <__stack_top+0xfffcf140>
8000a1a8:	8bdf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:108
        return LOS_NOK;
8000a1ac:	00100793          	li	a5,1
8000a1b0:	07c0006f          	j	8000a22c <Example_TaskLo+0xbc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:111
    }

    dprintf("TaskHi LOS_TaskSuspend Success.\r\n");
8000a1b4:	8000d7b7          	lui	a5,0x8000d
8000a1b8:	75878513          	addi	a0,a5,1880 # 8000d758 <__stack_top+0xfffcf158>
8000a1bc:	8a9f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:114

    /*恢复被挂起的任务g_uwTskHiID*/
    uwRet = LOS_TaskResume(g_uwTskHiID);
8000a1c0:	8001e7b7          	lui	a5,0x8001e
8000a1c4:	5fc7a783          	lw	a5,1532(a5) # 8001e5fc <__stack_top+0xfffdfffc>
8000a1c8:	00078513          	mv	a0,a5
8000a1cc:	9ecfe0ef          	jal	ra,800083b8 <LOS_TaskResume>
8000a1d0:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:115
    if (uwRet != LOS_OK)
8000a1d4:	fec42783          	lw	a5,-20(s0)
8000a1d8:	02078263          	beqz	a5,8000a1fc <Example_TaskLo+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:117
    {
        dprintf("Resume TaskHi Failed.\r\n");
8000a1dc:	8000d7b7          	lui	a5,0x8000d
8000a1e0:	77c78513          	addi	a0,a5,1916 # 8000d77c <__stack_top+0xfffcf17c>
8000a1e4:	881f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:118
        LOS_InspectStatusSetByID(LOS_INSPECT_TASK,LOS_INSPECT_STU_ERROR);
8000a1e8:	00100593          	li	a1,1
8000a1ec:	00000513          	li	a0,0
8000a1f0:	3a0000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:119
        return LOS_NOK;
8000a1f4:	00100793          	li	a5,1
8000a1f8:	0340006f          	j	8000a22c <Example_TaskLo+0xbc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:123
    }
    
    /*删除任务*/
    if(LOS_OK != LOS_TaskDelete(g_uwTskLoID))
8000a1fc:	8001e7b7          	lui	a5,0x8001e
8000a200:	5f87a783          	lw	a5,1528(a5) # 8001e5f8 <__stack_top+0xfffdfff8>
8000a204:	00078513          	mv	a0,a5
8000a208:	d10fe0ef          	jal	ra,80008718 <LOS_TaskDelete>
8000a20c:	00050793          	mv	a5,a0
8000a210:	00078c63          	beqz	a5,8000a228 <Example_TaskLo+0xb8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:125
    {
        dprintf("TaskLo delete failed .\n");
8000a214:	8000d7b7          	lui	a5,0x8000d
8000a218:	79478513          	addi	a0,a5,1940 # 8000d794 <__stack_top+0xfffcf194>
8000a21c:	849f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:127
        
        return LOS_NOK;
8000a220:	00100793          	li	a5,1
8000a224:	0080006f          	j	8000a22c <Example_TaskLo+0xbc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:130
    }
    
    return LOS_OK;
8000a228:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:131
}
8000a22c:	00078513          	mv	a0,a5
8000a230:	01c12083          	lw	ra,28(sp)
8000a234:	01812403          	lw	s0,24(sp)
8000a238:	02010113          	addi	sp,sp,32
8000a23c:	00008067          	ret
8000a240:	0000                	unimp
	...

8000a244 <Example_TskCaseEntry>:
Example_TskCaseEntry():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:135

/*任务测试入口函数，在里面创建优先级不一样的两个任务*/
UINT32 Example_TskCaseEntry(VOID)
{
8000a244:	fc010113          	addi	sp,sp,-64
8000a248:	02112e23          	sw	ra,60(sp)
8000a24c:	02812c23          	sw	s0,56(sp)
8000a250:	04010413          	addi	s0,sp,64
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:140
    UINT32 uwRet;
    TSK_INIT_PARAM_S stInitParam;

    /*锁任务调度*/
    LOS_TaskLock();
8000a254:	a09fe0ef          	jal	ra,80008c5c <LOS_TaskLock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:142

    LOS_Inspect_delim();
8000a258:	055000ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:144
	
    dprintf("LOS_TaskLock() Success!\r\n");
8000a25c:	8000d7b7          	lui	a5,0x8000d
8000a260:	7ac78513          	addi	a0,a5,1964 # 8000d7ac <__stack_top+0xfffcf1ac>
8000a264:	801f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:146

    stInitParam.pfnTaskEntry = (TSK_ENTRY_FUNC)Example_TaskHi;
8000a268:	8000a7b7          	lui	a5,0x8000a
8000a26c:	08478793          	addi	a5,a5,132 # 8000a084 <__stack_top+0xfffcba84>
8000a270:	fcf42423          	sw	a5,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:147
    stInitParam.usTaskPrio = TSK_PRIOR_HI;
8000a274:	00400793          	li	a5,4
8000a278:	fcf41623          	sh	a5,-52(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:148
    stInitParam.pcName = "HIGH_NAME";
8000a27c:	8000d7b7          	lui	a5,0x8000d
8000a280:	7c878793          	addi	a5,a5,1992 # 8000d7c8 <__stack_top+0xfffcf1c8>
8000a284:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:149
    stInitParam.uwStackSize = 0x400;
8000a288:	40000793          	li	a5,1024
8000a28c:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:150
    stInitParam.uwResved   = LOS_TASK_STATUS_DETACHED;
8000a290:	08000793          	li	a5,128
8000a294:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:152
    /*创建高优先级任务，由于锁任务调度，任务创建成功后不会马上执行*/
    uwRet = LOS_TaskCreate(&g_uwTskHiID, &stInitParam);
8000a298:	fc840793          	addi	a5,s0,-56
8000a29c:	00078593          	mv	a1,a5
8000a2a0:	8001e7b7          	lui	a5,0x8001e
8000a2a4:	5fc78513          	addi	a0,a5,1532 # 8001e5fc <__stack_top+0xfffdfffc>
8000a2a8:	fc9fd0ef          	jal	ra,80008270 <LOS_TaskCreate>
8000a2ac:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:153
    if (uwRet != LOS_OK)
8000a2b0:	fec42783          	lw	a5,-20(s0)
8000a2b4:	00078e63          	beqz	a5,8000a2d0 <Example_TskCaseEntry+0x8c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:155
    {
        LOS_TaskUnlock();
8000a2b8:	9f9fe0ef          	jal	ra,80008cb0 <LOS_TaskUnlock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:157

        dprintf("Example_TaskHi create Failed!\r\n");
8000a2bc:	8000d7b7          	lui	a5,0x8000d
8000a2c0:	7d478513          	addi	a0,a5,2004 # 8000d7d4 <__stack_top+0xfffcf1d4>
8000a2c4:	fa0f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:158
        return LOS_NOK;
8000a2c8:	00100793          	li	a5,1
8000a2cc:	0b00006f          	j	8000a37c <Example_TskCaseEntry+0x138>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:161
    }

    dprintf("Example_TaskHi create Success!\r\n");
8000a2d0:	8000d7b7          	lui	a5,0x8000d
8000a2d4:	7f478513          	addi	a0,a5,2036 # 8000d7f4 <__stack_top+0xfffcf1f4>
8000a2d8:	f8cf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:163

    stInitParam.pfnTaskEntry = (TSK_ENTRY_FUNC)Example_TaskLo;
8000a2dc:	8000a7b7          	lui	a5,0x8000a
8000a2e0:	17078793          	addi	a5,a5,368 # 8000a170 <__stack_top+0xfffcbb70>
8000a2e4:	fcf42423          	sw	a5,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:164
    stInitParam.usTaskPrio = TSK_PRIOR_LO;
8000a2e8:	00500793          	li	a5,5
8000a2ec:	fcf41623          	sh	a5,-52(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:165
    stInitParam.pcName = "LOW_NAME";
8000a2f0:	8000e7b7          	lui	a5,0x8000e
8000a2f4:	81878793          	addi	a5,a5,-2024 # 8000d818 <__stack_top+0xfffcf218>
8000a2f8:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:166
    stInitParam.uwStackSize = 0x400;
8000a2fc:	40000793          	li	a5,1024
8000a300:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:167
    stInitParam.uwResved   = LOS_TASK_STATUS_DETACHED;
8000a304:	08000793          	li	a5,128
8000a308:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:169
    /*创建低优先级任务，由于锁任务调度，任务创建成功后不会马上执行*/
    uwRet = LOS_TaskCreate(&g_uwTskLoID, &stInitParam);
8000a30c:	fc840793          	addi	a5,s0,-56
8000a310:	00078593          	mv	a1,a5
8000a314:	8001e7b7          	lui	a5,0x8001e
8000a318:	5f878513          	addi	a0,a5,1528 # 8001e5f8 <__stack_top+0xfffdfff8>
8000a31c:	f55fd0ef          	jal	ra,80008270 <LOS_TaskCreate>
8000a320:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:170
    if (uwRet != LOS_OK)
8000a324:	fec42783          	lw	a5,-20(s0)
8000a328:	04078063          	beqz	a5,8000a368 <Example_TskCaseEntry+0x124>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:173
    {
        /*删除任务*/
        if(LOS_OK != LOS_TaskDelete(g_uwTskHiID))
8000a32c:	8001e7b7          	lui	a5,0x8001e
8000a330:	5fc7a783          	lw	a5,1532(a5) # 8001e5fc <__stack_top+0xfffdfffc>
8000a334:	00078513          	mv	a0,a5
8000a338:	be0fe0ef          	jal	ra,80008718 <LOS_TaskDelete>
8000a33c:	00050793          	mv	a5,a0
8000a340:	00078863          	beqz	a5,8000a350 <Example_TskCaseEntry+0x10c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:175
        {
            dprintf("TaskHi delete failed .\n");
8000a344:	8000d7b7          	lui	a5,0x8000d
8000a348:	71078513          	addi	a0,a5,1808 # 8000d710 <__stack_top+0xfffcf110>
8000a34c:	f18f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:178
        }
            
        LOS_TaskUnlock();
8000a350:	961fe0ef          	jal	ra,80008cb0 <LOS_TaskUnlock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:180

        dprintf("Example_TaskLo create Failed!\r\n");
8000a354:	8000e7b7          	lui	a5,0x8000e
8000a358:	82478513          	addi	a0,a5,-2012 # 8000d824 <__stack_top+0xfffcf224>
8000a35c:	f08f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:182
        
        return LOS_NOK;
8000a360:	00100793          	li	a5,1
8000a364:	0180006f          	j	8000a37c <Example_TskCaseEntry+0x138>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:185
    }

    dprintf("Example_TaskLo create Success!\r\n");
8000a368:	8000e7b7          	lui	a5,0x8000e
8000a36c:	84478513          	addi	a0,a5,-1980 # 8000d844 <__stack_top+0xfffcf244>
8000a370:	ef4f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:188

    /*解锁任务调度，此时会发生任务调度，执行就绪列表中最高优先级任务*/
    LOS_TaskUnlock();
8000a374:	93dfe0ef          	jal	ra,80008cb0 <LOS_TaskUnlock>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:190
    
    return uwRet;
8000a378:	fec42783          	lw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_task.c:192 (discriminator 1)

}
8000a37c:	00078513          	mv	a0,a5
8000a380:	03c12083          	lw	ra,60(sp)
8000a384:	03812403          	lw	s0,56(sp)
8000a388:	04010113          	addi	sp,sp,64
8000a38c:	00008067          	ret
8000a390:	0000                	unimp
	...

8000a394 <Timer1_Callback>:
Timer1_Callback():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:58
UINT32 g_timercount1 = 0;
UINT32 g_timercount2 = 0;


void Timer1_Callback(UINT32 arg)
{
8000a394:	fd010113          	addi	sp,sp,-48
8000a398:	02112623          	sw	ra,44(sp)
8000a39c:	02812423          	sw	s0,40(sp)
8000a3a0:	03010413          	addi	s0,sp,48
8000a3a4:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:61
    
    unsigned long tick_last1;
    g_timercount1 ++;
8000a3a8:	df81a783          	lw	a5,-520(gp) # 8000e128 <g_timercount1>
8000a3ac:	00178713          	addi	a4,a5,1
8000a3b0:	dee1ac23          	sw	a4,-520(gp) # 8000e128 <g_timercount1>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:62
    tick_last1=(UINT32)LOS_TickCountGet();
8000a3b4:	c31fc0ef          	jal	ra,80006fe4 <LOS_TickCountGet>
8000a3b8:	00050793          	mv	a5,a0
8000a3bc:	00058813          	mv	a6,a1
8000a3c0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:63
    dprintf("g_timercount1=%d\n",g_timercount1);
8000a3c4:	df81a783          	lw	a5,-520(gp) # 8000e128 <g_timercount1>
8000a3c8:	00078593          	mv	a1,a5
8000a3cc:	8000e7b7          	lui	a5,0x8000e
8000a3d0:	86878513          	addi	a0,a5,-1944 # 8000d868 <__stack_top+0xfffcf268>
8000a3d4:	e90f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:64
    dprintf("tick_last1=%lu\n",tick_last1);
8000a3d8:	fec42583          	lw	a1,-20(s0)
8000a3dc:	8000e7b7          	lui	a5,0x8000e
8000a3e0:	87c78513          	addi	a0,a5,-1924 # 8000d87c <__stack_top+0xfffcf27c>
8000a3e4:	e80f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:65
}
8000a3e8:	00000013          	nop
8000a3ec:	02c12083          	lw	ra,44(sp)
8000a3f0:	02812403          	lw	s0,40(sp)
8000a3f4:	03010113          	addi	sp,sp,48
8000a3f8:	00008067          	ret
8000a3fc:	0000                	unimp
	...

8000a400 <Timer2_Callback>:
Timer2_Callback():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:68

void Timer2_Callback(UINT32 arg)
{
8000a400:	fd010113          	addi	sp,sp,-48
8000a404:	02112623          	sw	ra,44(sp)
8000a408:	02812423          	sw	s0,40(sp)
8000a40c:	03010413          	addi	s0,sp,48
8000a410:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:70
    unsigned long tick_last2;
    tick_last2=(UINT32)LOS_TickCountGet();
8000a414:	bd1fc0ef          	jal	ra,80006fe4 <LOS_TickCountGet>
8000a418:	00050793          	mv	a5,a0
8000a41c:	00058813          	mv	a6,a1
8000a420:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:71
    g_timercount2 ++;
8000a424:	dfc1a783          	lw	a5,-516(gp) # 8000e12c <g_timercount2>
8000a428:	00178713          	addi	a4,a5,1
8000a42c:	dee1ae23          	sw	a4,-516(gp) # 8000e12c <g_timercount2>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:72
    dprintf("g_timercount2=%d\n",g_timercount2);
8000a430:	dfc1a783          	lw	a5,-516(gp) # 8000e12c <g_timercount2>
8000a434:	00078593          	mv	a1,a5
8000a438:	8000e7b7          	lui	a5,0x8000e
8000a43c:	88c78513          	addi	a0,a5,-1908 # 8000d88c <__stack_top+0xfffcf28c>
8000a440:	e24f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:73
    dprintf("tick_last2=%lu\n",tick_last2);
8000a444:	fec42583          	lw	a1,-20(s0)
8000a448:	8000e7b7          	lui	a5,0x8000e
8000a44c:	8a078513          	addi	a0,a5,-1888 # 8000d8a0 <__stack_top+0xfffcf2a0>
8000a450:	e14f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:74
    LOS_InspectStatusSetByID(LOS_INSPECT_TIMER,LOS_INSPECT_STU_SUCCESS);
8000a454:	00000593          	li	a1,0
8000a458:	00600513          	li	a0,6
8000a45c:	134000ef          	jal	ra,8000a590 <LOS_InspectStatusSetByID>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:75
}
8000a460:	00000013          	nop
8000a464:	02c12083          	lw	ra,44(sp)
8000a468:	02812403          	lw	s0,40(sp)
8000a46c:	03010113          	addi	sp,sp,48
8000a470:	00008067          	ret
8000a474:	0000                	unimp
	...

8000a478 <Example_swTimer>:
Example_swTimer():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:78

UINT32 Example_swTimer(void)
{
8000a478:	fe010113          	addi	sp,sp,-32
8000a47c:	00112e23          	sw	ra,28(sp)
8000a480:	00812c23          	sw	s0,24(sp)
8000a484:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:82
    UINT16 id1;
    UINT16 id2;// timer id
  
    LOS_Inspect_delim();
8000a488:	624000ef          	jal	ra,8000aaac <LOS_Inspect_delim>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:84

    LOS_SwtmrCreate(1000, LOS_SWTMR_MODE_ONCE,Timer1_Callback,&id1,1);
8000a48c:	fee40793          	addi	a5,s0,-18
8000a490:	00100713          	li	a4,1
8000a494:	00078693          	mv	a3,a5
8000a498:	8000a7b7          	lui	a5,0x8000a
8000a49c:	39478613          	addi	a2,a5,916 # 8000a394 <__stack_top+0xfffcbd94>
8000a4a0:	00000593          	li	a1,0
8000a4a4:	3e800513          	li	a0,1000
8000a4a8:	ee4fc0ef          	jal	ra,80006b8c <LOS_SwtmrCreate>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:85
    LOS_SwtmrCreate(100,LOS_SWTMR_MODE_PERIOD,Timer2_Callback,&id2,1);
8000a4ac:	fec40793          	addi	a5,s0,-20
8000a4b0:	00100713          	li	a4,1
8000a4b4:	00078693          	mv	a3,a5
8000a4b8:	8000a7b7          	lui	a5,0x8000a
8000a4bc:	40078613          	addi	a2,a5,1024 # 8000a400 <__stack_top+0xfffcbe00>
8000a4c0:	00100593          	li	a1,1
8000a4c4:	06400513          	li	a0,100
8000a4c8:	ec4fc0ef          	jal	ra,80006b8c <LOS_SwtmrCreate>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:86
    dprintf("create Timer1 success\n");
8000a4cc:	8000e7b7          	lui	a5,0x8000e
8000a4d0:	8b078513          	addi	a0,a5,-1872 # 8000d8b0 <__stack_top+0xfffcf2b0>
8000a4d4:	d90f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:88
    
    LOS_SwtmrStart(id1);
8000a4d8:	fee45783          	lhu	a5,-18(s0)
8000a4dc:	00078513          	mv	a0,a5
8000a4e0:	809fc0ef          	jal	ra,80006ce8 <LOS_SwtmrStart>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:89
    dprintf("start Timer1 sucess\n");
8000a4e4:	8000e7b7          	lui	a5,0x8000e
8000a4e8:	8c878513          	addi	a0,a5,-1848 # 8000d8c8 <__stack_top+0xfffcf2c8>
8000a4ec:	d78f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:90
    LOS_TaskDelay(200);
8000a4f0:	0c800513          	li	a0,200
8000a4f4:	d44fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:91
    LOS_SwtmrStop(id1);
8000a4f8:	fee45783          	lhu	a5,-18(s0)
8000a4fc:	00078513          	mv	a0,a5
8000a500:	8e5fc0ef          	jal	ra,80006de4 <LOS_SwtmrStop>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:92
    dprintf("stop Timer1 sucess\n");
8000a504:	8000e7b7          	lui	a5,0x8000e
8000a508:	8e078513          	addi	a0,a5,-1824 # 8000d8e0 <__stack_top+0xfffcf2e0>
8000a50c:	d58f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:94
    
    LOS_SwtmrStart(id1);
8000a510:	fee45783          	lhu	a5,-18(s0)
8000a514:	00078513          	mv	a0,a5
8000a518:	fd0fc0ef          	jal	ra,80006ce8 <LOS_SwtmrStart>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:95
    LOS_TaskDelay(1000);
8000a51c:	3e800513          	li	a0,1000
8000a520:	d18fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:96
    LOS_SwtmrDelete(id1);
8000a524:	fee45783          	lhu	a5,-18(s0)
8000a528:	00078513          	mv	a0,a5
8000a52c:	9bdfc0ef          	jal	ra,80006ee8 <LOS_SwtmrDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:97
    dprintf("delete Timer1 sucess\n");
8000a530:	8000e7b7          	lui	a5,0x8000e
8000a534:	8f478513          	addi	a0,a5,-1804 # 8000d8f4 <__stack_top+0xfffcf2f4>
8000a538:	d2cf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:99
    
    LOS_SwtmrStart(id2);
8000a53c:	fec45783          	lhu	a5,-20(s0)
8000a540:	00078513          	mv	a0,a5
8000a544:	fa4fc0ef          	jal	ra,80006ce8 <LOS_SwtmrStart>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:100
    dprintf("start Timer2\n");
8000a548:	8000e7b7          	lui	a5,0x8000e
8000a54c:	90c78513          	addi	a0,a5,-1780 # 8000d90c <__stack_top+0xfffcf30c>
8000a550:	d14f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:101
    LOS_TaskDelay(1000);
8000a554:	3e800513          	li	a0,1000
8000a558:	ce0fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:102
    LOS_SwtmrStop(id2);
8000a55c:	fec45783          	lhu	a5,-20(s0)
8000a560:	00078513          	mv	a0,a5
8000a564:	881fc0ef          	jal	ra,80006de4 <LOS_SwtmrStop>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:103
    LOS_SwtmrDelete(id2);
8000a568:	fec45783          	lhu	a5,-20(s0)
8000a56c:	00078513          	mv	a0,a5
8000a570:	979fc0ef          	jal	ra,80006ee8 <LOS_SwtmrDelete>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:105
    
    return LOS_OK;
8000a574:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_api_timer.c:106
}
8000a578:	00078513          	mv	a0,a5
8000a57c:	01c12083          	lw	ra,28(sp)
8000a580:	01812403          	lw	s0,24(sp)
8000a584:	02010113          	addi	sp,sp,32
8000a588:	00008067          	ret
8000a58c:	0000                	unimp
	...

8000a590 <LOS_InspectStatusSetByID>:
LOS_InspectStatusSetByID():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:131
               enInspectStu InspectStu
 Output      : None
 Return      : None
 *****************************************************************************/
UINT32 LOS_InspectStatusSetByID(enInspectID InspectID,enInspectStu InspectStu)
{
8000a590:	fd010113          	addi	sp,sp,-48
8000a594:	02112623          	sw	ra,44(sp)
8000a598:	02812423          	sw	s0,40(sp)
8000a59c:	03010413          	addi	s0,sp,48
8000a5a0:	fca42e23          	sw	a0,-36(s0)
8000a5a4:	fcb42c23          	sw	a1,-40(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:133
#ifndef RAM_SIZE_LEVEL_0
    UINT32 ulIndex = 0;
8000a5a8:	fe042623          	sw	zero,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:135

    if(InspectID >= LOS_INSPECT_BUFF)
8000a5ac:	fdc42703          	lw	a4,-36(s0)
8000a5b0:	00900793          	li	a5,9
8000a5b4:	00e7fe63          	bleu	a4,a5,8000a5d0 <LOS_InspectStatusSetByID+0x40>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:137
    {
        dprintf("\r\n InspectID = [%d] Err.\r\n",InspectID);
8000a5b8:	fdc42583          	lw	a1,-36(s0)
8000a5bc:	8000e7b7          	lui	a5,0x8000e
8000a5c0:	91c78513          	addi	a0,a5,-1764 # 8000d91c <__stack_top+0xfffcf31c>
8000a5c4:	ca0f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:138
        return LOS_NOK;
8000a5c8:	00100793          	li	a5,1
8000a5cc:	0900006f          	j	8000a65c <LOS_InspectStatusSetByID+0xcc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:141
    }

    for(ulIndex = 0;ulIndex < LOS_INSPECT_BUFF;ulIndex++)
8000a5d0:	fe042623          	sw	zero,-20(s0)
8000a5d4:	0640006f          	j	8000a638 <LOS_InspectStatusSetByID+0xa8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:143
    {   
        if(InspectID == gInspect[ulIndex].InspectID)
8000a5d8:	8000e6b7          	lui	a3,0x8000e
8000a5dc:	fec42703          	lw	a4,-20(s0)
8000a5e0:	00070793          	mv	a5,a4
8000a5e4:	00279793          	slli	a5,a5,0x2
8000a5e8:	00e787b3          	add	a5,a5,a4
8000a5ec:	00279793          	slli	a5,a5,0x2
8000a5f0:	bd468713          	addi	a4,a3,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a5f4:	00e787b3          	add	a5,a5,a4
8000a5f8:	0007a783          	lw	a5,0(a5)
8000a5fc:	fdc42703          	lw	a4,-36(s0)
8000a600:	02f71663          	bne	a4,a5,8000a62c <LOS_InspectStatusSetByID+0x9c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:145
        {
            gInspect[ulIndex].Status = InspectStu;
8000a604:	8000e7b7          	lui	a5,0x8000e
8000a608:	fec42703          	lw	a4,-20(s0)
8000a60c:	bd478693          	addi	a3,a5,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a610:	00070793          	mv	a5,a4
8000a614:	00279793          	slli	a5,a5,0x2
8000a618:	00e787b3          	add	a5,a5,a4
8000a61c:	00279793          	slli	a5,a5,0x2
8000a620:	00f687b3          	add	a5,a3,a5
8000a624:	fd842703          	lw	a4,-40(s0)
8000a628:	00e7a223          	sw	a4,4(a5)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:141 (discriminator 2)
    for(ulIndex = 0;ulIndex < LOS_INSPECT_BUFF;ulIndex++)
8000a62c:	fec42783          	lw	a5,-20(s0)
8000a630:	00178793          	addi	a5,a5,1
8000a634:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:141 (discriminator 1)
8000a638:	fec42703          	lw	a4,-20(s0)
8000a63c:	00900793          	li	a5,9
8000a640:	f8e7fce3          	bleu	a4,a5,8000a5d8 <LOS_InspectStatusSetByID+0x48>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:150
        }
     
    }

    if(LOS_INSPECT_BUFF == ulIndex)
8000a644:	fec42703          	lw	a4,-20(s0)
8000a648:	00a00793          	li	a5,10
8000a64c:	00f71663          	bne	a4,a5,8000a658 <LOS_InspectStatusSetByID+0xc8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:152
    {
        return LOS_NOK;
8000a650:	00100793          	li	a5,1
8000a654:	0080006f          	j	8000a65c <LOS_InspectStatusSetByID+0xcc>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:156
    }
    else
    {
        return LOS_OK;
8000a658:	00000793          	li	a5,0
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:162
    }
#else
    return LOS_OK;
#endif

}
8000a65c:	00078513          	mv	a0,a5
8000a660:	02c12083          	lw	ra,44(sp)
8000a664:	02812403          	lw	s0,40(sp)
8000a668:	03010113          	addi	sp,sp,48
8000a66c:	00008067          	ret
8000a670:	0000                	unimp
	...

8000a674 <LOS_InspectByID>:
LOS_InspectByID():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:172
 Input       : enInspectID  InspectID
 Output      : None
 Return      : LOS_NOK/LOS_OK
 *****************************************************************************/
UINT32 LOS_InspectByID(enInspectID InspectID)
{
8000a674:	fd010113          	addi	sp,sp,-48
8000a678:	02112623          	sw	ra,44(sp)
8000a67c:	02812423          	sw	s0,40(sp)
8000a680:	03010413          	addi	s0,sp,48
8000a684:	fca42e23          	sw	a0,-36(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:174
#ifndef RAM_SIZE_LEVEL_0
    UINT32 ulIndex,ulRet = LOS_OK;
8000a688:	fe042223          	sw	zero,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:175
    enInspectStu  enCurStatus = LOS_INSPECT_STU_START;
8000a68c:	0ff00793          	li	a5,255
8000a690:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:177
    
    if(InspectID >= LOS_INSPECT_BUFF)
8000a694:	fdc42703          	lw	a4,-36(s0)
8000a698:	00900793          	li	a5,9
8000a69c:	00e7fe63          	bleu	a4,a5,8000a6b8 <LOS_InspectByID+0x44>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:179
    {
        dprintf("\r\n InspectID = [%d] Err.\r\n",InspectID);
8000a6a0:	fdc42583          	lw	a1,-36(s0)
8000a6a4:	8000e7b7          	lui	a5,0x8000e
8000a6a8:	91c78513          	addi	a0,a5,-1764 # 8000d91c <__stack_top+0xfffcf31c>
8000a6ac:	bb8f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:180
        return LOS_NOK;
8000a6b0:	00100793          	li	a5,1
8000a6b4:	21c0006f          	j	8000a8d0 <LOS_InspectByID+0x25c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:183
    }
    
    for(ulIndex = 0;ulIndex < LOS_INSPECT_BUFF;ulIndex++)
8000a6b8:	fe042623          	sw	zero,-20(s0)
8000a6bc:	1e80006f          	j	8000a8a4 <LOS_InspectByID+0x230>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:185
    {
        if(InspectID == gInspect[ulIndex].InspectID)
8000a6c0:	8000e6b7          	lui	a3,0x8000e
8000a6c4:	fec42703          	lw	a4,-20(s0)
8000a6c8:	00070793          	mv	a5,a4
8000a6cc:	00279793          	slli	a5,a5,0x2
8000a6d0:	00e787b3          	add	a5,a5,a4
8000a6d4:	00279793          	slli	a5,a5,0x2
8000a6d8:	bd468713          	addi	a4,a3,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a6dc:	00e787b3          	add	a5,a5,a4
8000a6e0:	0007a783          	lw	a5,0(a5)
8000a6e4:	fdc42703          	lw	a4,-36(s0)
8000a6e8:	1af71863          	bne	a4,a5,8000a898 <LOS_InspectByID+0x224>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:187
        {
            if(NULL == gInspect[ulIndex].Inspectfunc)
8000a6ec:	8000e7b7          	lui	a5,0x8000e
8000a6f0:	fec42703          	lw	a4,-20(s0)
8000a6f4:	bd478693          	addi	a3,a5,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a6f8:	00070793          	mv	a5,a4
8000a6fc:	00279793          	slli	a5,a5,0x2
8000a700:	00e787b3          	add	a5,a5,a4
8000a704:	00279793          	slli	a5,a5,0x2
8000a708:	00f687b3          	add	a5,a3,a5
8000a70c:	0087a783          	lw	a5,8(a5)
8000a710:	00079e63          	bnez	a5,8000a72c <LOS_InspectByID+0xb8>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:189
            {
                dprintf("InspectID = [%d] Err,Inspectfunc is NULL.\r\n\r\n",InspectID);
8000a714:	fdc42583          	lw	a1,-36(s0)
8000a718:	8000e7b7          	lui	a5,0x8000e
8000a71c:	93878513          	addi	a0,a5,-1736 # 8000d938 <__stack_top+0xfffcf338>
8000a720:	b44f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:190
                return LOS_NOK;
8000a724:	00100793          	li	a5,1
8000a728:	1a80006f          	j	8000a8d0 <LOS_InspectByID+0x25c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:193
            }
            
            ulRet = gInspect[ulIndex].Inspectfunc();
8000a72c:	8000e7b7          	lui	a5,0x8000e
8000a730:	fec42703          	lw	a4,-20(s0)
8000a734:	bd478693          	addi	a3,a5,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a738:	00070793          	mv	a5,a4
8000a73c:	00279793          	slli	a5,a5,0x2
8000a740:	00e787b3          	add	a5,a5,a4
8000a744:	00279793          	slli	a5,a5,0x2
8000a748:	00f687b3          	add	a5,a3,a5
8000a74c:	0087a783          	lw	a5,8(a5)
8000a750:	000780e7          	jalr	a5
8000a754:	fea42223          	sw	a0,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:196
            
            do{
                if((LOS_INSPECT_STU_SUCCESS == gInspect[ulIndex].Status) && (ulRet == LOS_OK))
8000a758:	8000e7b7          	lui	a5,0x8000e
8000a75c:	fec42703          	lw	a4,-20(s0)
8000a760:	bd478693          	addi	a3,a5,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a764:	00070793          	mv	a5,a4
8000a768:	00279793          	slli	a5,a5,0x2
8000a76c:	00e787b3          	add	a5,a5,a4
8000a770:	00279793          	slli	a5,a5,0x2
8000a774:	00f687b3          	add	a5,a3,a5
8000a778:	0047a783          	lw	a5,4(a5)
8000a77c:	04079463          	bnez	a5,8000a7c4 <LOS_InspectByID+0x150>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:196 (discriminator 1)
8000a780:	fe442783          	lw	a5,-28(s0)
8000a784:	04079063          	bnez	a5,8000a7c4 <LOS_InspectByID+0x150>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:198
                {
                    printf("Inspect %s success\r\n\r\n",gInspect[ulIndex].name);
8000a788:	fec42703          	lw	a4,-20(s0)
8000a78c:	00070793          	mv	a5,a4
8000a790:	00279793          	slli	a5,a5,0x2
8000a794:	00e787b3          	add	a5,a5,a4
8000a798:	00279793          	slli	a5,a5,0x2
8000a79c:	8000e737          	lui	a4,0x8000e
8000a7a0:	bd470713          	addi	a4,a4,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a7a4:	00e787b3          	add	a5,a5,a4
8000a7a8:	00c78793          	addi	a5,a5,12
8000a7ac:	00078593          	mv	a1,a5
8000a7b0:	8000e7b7          	lui	a5,0x8000e
8000a7b4:	96878513          	addi	a0,a5,-1688 # 8000d968 <__stack_top+0xfffcf368>
8000a7b8:	4f0000ef          	jal	ra,8000aca8 <iprintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:199
                    enCurStatus = LOS_INSPECT_STU_SUCCESS;
8000a7bc:	fe042423          	sw	zero,-24(s0)
8000a7c0:	0740006f          	j	8000a834 <LOS_InspectByID+0x1c0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:201
                }
                else if(LOS_INSPECT_STU_ERROR == gInspect[ulIndex].Status)
8000a7c4:	8000e7b7          	lui	a5,0x8000e
8000a7c8:	fec42703          	lw	a4,-20(s0)
8000a7cc:	bd478693          	addi	a3,a5,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a7d0:	00070793          	mv	a5,a4
8000a7d4:	00279793          	slli	a5,a5,0x2
8000a7d8:	00e787b3          	add	a5,a5,a4
8000a7dc:	00279793          	slli	a5,a5,0x2
8000a7e0:	00f687b3          	add	a5,a3,a5
8000a7e4:	0047a703          	lw	a4,4(a5)
8000a7e8:	00100793          	li	a5,1
8000a7ec:	04f71463          	bne	a4,a5,8000a834 <LOS_InspectByID+0x1c0>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:203
                {
                    enCurStatus = LOS_INSPECT_STU_ERROR;
8000a7f0:	00100793          	li	a5,1
8000a7f4:	fef42423          	sw	a5,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:204
                    printf("Inspect %s error,gInspectErrCnt = [%d]\r\n\r\n",gInspect[ulIndex].name,gInspectErrCnt);
8000a7f8:	fec42703          	lw	a4,-20(s0)
8000a7fc:	00070793          	mv	a5,a4
8000a800:	00279793          	slli	a5,a5,0x2
8000a804:	00e787b3          	add	a5,a5,a4
8000a808:	00279793          	slli	a5,a5,0x2
8000a80c:	8000e737          	lui	a4,0x8000e
8000a810:	bd470713          	addi	a4,a4,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a814:	00e787b3          	add	a5,a5,a4
8000a818:	00c78713          	addi	a4,a5,12
8000a81c:	e001a783          	lw	a5,-512(gp) # 8000e130 <gInspectErrCnt>
8000a820:	00078613          	mv	a2,a5
8000a824:	00070593          	mv	a1,a4
8000a828:	8000e7b7          	lui	a5,0x8000e
8000a82c:	98078513          	addi	a0,a5,-1664 # 8000d980 <__stack_top+0xfffcf380>
8000a830:	478000ef          	jal	ra,8000aca8 <iprintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:207
                }
                
                LOS_TaskDelay(100);
8000a834:	06400513          	li	a0,100
8000a838:	a00fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:209
                    
            }while((LOS_INSPECT_STU_START == gInspect[ulIndex].Status)||(enCurStatus != gInspect[ulIndex].Status));
8000a83c:	8000e7b7          	lui	a5,0x8000e
8000a840:	fec42703          	lw	a4,-20(s0)
8000a844:	bd478693          	addi	a3,a5,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a848:	00070793          	mv	a5,a4
8000a84c:	00279793          	slli	a5,a5,0x2
8000a850:	00e787b3          	add	a5,a5,a4
8000a854:	00279793          	slli	a5,a5,0x2
8000a858:	00f687b3          	add	a5,a3,a5
8000a85c:	0047a703          	lw	a4,4(a5)
8000a860:	0ff00793          	li	a5,255
8000a864:	eef70ae3          	beq	a4,a5,8000a758 <LOS_InspectByID+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:209 (discriminator 1)
8000a868:	8000e7b7          	lui	a5,0x8000e
8000a86c:	fec42703          	lw	a4,-20(s0)
8000a870:	bd478693          	addi	a3,a5,-1068 # 8000dbd4 <__stack_top+0xfffcf5d4>
8000a874:	00070793          	mv	a5,a4
8000a878:	00279793          	slli	a5,a5,0x2
8000a87c:	00e787b3          	add	a5,a5,a4
8000a880:	00279793          	slli	a5,a5,0x2
8000a884:	00f687b3          	add	a5,a3,a5
8000a888:	0047a783          	lw	a5,4(a5)
8000a88c:	fe842703          	lw	a4,-24(s0)
8000a890:	ecf714e3          	bne	a4,a5,8000a758 <LOS_InspectByID+0xe4>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:211
            
            break;
8000a894:	01c0006f          	j	8000a8b0 <LOS_InspectByID+0x23c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:183 (discriminator 2)
    for(ulIndex = 0;ulIndex < LOS_INSPECT_BUFF;ulIndex++)
8000a898:	fec42783          	lw	a5,-20(s0)
8000a89c:	00178793          	addi	a5,a5,1
8000a8a0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:183 (discriminator 1)
8000a8a4:	fec42703          	lw	a4,-20(s0)
8000a8a8:	00900793          	li	a5,9
8000a8ac:	e0e7fae3          	bleu	a4,a5,8000a6c0 <LOS_InspectByID+0x4c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:215
        }
    }
    
    if(LOS_INSPECT_BUFF == ulIndex)
8000a8b0:	fec42703          	lw	a4,-20(s0)
8000a8b4:	00a00793          	li	a5,10
8000a8b8:	00f71663          	bne	a4,a5,8000a8c4 <LOS_InspectByID+0x250>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:217
    {
        return LOS_NOK;
8000a8bc:	00100793          	li	a5,1
8000a8c0:	0100006f          	j	8000a8d0 <LOS_InspectByID+0x25c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:221
    }
    else
    {
        return enCurStatus ? LOS_NOK:LOS_OK;
8000a8c4:	fe842783          	lw	a5,-24(s0)
8000a8c8:	00f037b3          	snez	a5,a5
8000a8cc:	0ff7f793          	andi	a5,a5,255
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:227
    }
#else
    return LOS_OK;
#endif

}
8000a8d0:	00078513          	mv	a0,a5
8000a8d4:	02c12083          	lw	ra,44(sp)
8000a8d8:	02812403          	lw	s0,40(sp)
8000a8dc:	03010113          	addi	sp,sp,48
8000a8e0:	00008067          	ret
8000a8e4:	0000                	unimp
	...

8000a8e8 <LOS_Inspect_KeyAndLed>:
LOS_Inspect_KeyAndLed():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:238
               UINT32 LedID
 Output      : None
 Return      : None
 *****************************************************************************/
void LOS_Inspect_KeyAndLed(UINT32 KeyID,UINT32 LedID)
{
8000a8e8:	fe010113          	addi	sp,sp,-32
8000a8ec:	00112e23          	sw	ra,28(sp)
8000a8f0:	00812c23          	sw	s0,24(sp)
8000a8f4:	02010413          	addi	s0,sp,32
8000a8f8:	fea42623          	sw	a0,-20(s0)
8000a8fc:	feb42423          	sw	a1,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:240
     /* check if the user key is pressed */
    if(LOS_KEY_PRESS == LOS_EvbGetKeyVal(KeyID)){
8000a900:	fec42783          	lw	a5,-20(s0)
8000a904:	00078513          	mv	a0,a5
8000a908:	f79f60ef          	jal	ra,80001880 <LOS_EvbGetKeyVal>
8000a90c:	00050793          	mv	a5,a0
8000a910:	04079a63          	bnez	a5,8000a964 <LOS_Inspect_KeyAndLed+0x7c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:242

        LOS_TaskDelay(50);
8000a914:	03200513          	li	a0,50
8000a918:	920fe0ef          	jal	ra,80008a38 <LOS_TaskDelay>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:244

        if(LOS_KEY_PRESS == LOS_EvbGetKeyVal(KeyID)){
8000a91c:	fec42783          	lw	a5,-20(s0)
8000a920:	00078513          	mv	a0,a5
8000a924:	f5df60ef          	jal	ra,80001880 <LOS_EvbGetKeyVal>
8000a928:	00050793          	mv	a5,a0
8000a92c:	02079263          	bnez	a5,8000a950 <LOS_Inspect_KeyAndLed+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:247

            /* turn on LED1 */
            LOS_EvbLedControl(LedID,LED_ON);
8000a930:	fe842783          	lw	a5,-24(s0)
8000a934:	00000593          	li	a1,0
8000a938:	00078513          	mv	a0,a5
8000a93c:	85cf70ef          	jal	ra,80001998 <LOS_EvbLedControl>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:250

            /* output a message on hyperterminal using dprintf function */
            dprintf("\r\n Key test example \r\n");
8000a940:	8000e7b7          	lui	a5,0x8000e
8000a944:	9ac78513          	addi	a0,a5,-1620 # 8000d9ac <__stack_top+0xfffcf3ac>
8000a948:	91cf70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:261
    }else{
        /* turn off LED1 */
        LOS_EvbLedControl(LedID,LED_OFF);
    }

    return;
8000a94c:	02c0006f          	j	8000a978 <LOS_Inspect_KeyAndLed+0x90>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:254
            LOS_EvbLedControl(LedID,LED_OFF);
8000a950:	fe842783          	lw	a5,-24(s0)
8000a954:	00100593          	li	a1,1
8000a958:	00078513          	mv	a0,a5
8000a95c:	83cf70ef          	jal	ra,80001998 <LOS_EvbLedControl>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:261
    return;
8000a960:	0180006f          	j	8000a978 <LOS_Inspect_KeyAndLed+0x90>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:258
        LOS_EvbLedControl(LedID,LED_OFF);
8000a964:	fe842783          	lw	a5,-24(s0)
8000a968:	00100593          	li	a1,1
8000a96c:	00078513          	mv	a0,a5
8000a970:	828f70ef          	jal	ra,80001998 <LOS_EvbLedControl>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:261
    return;
8000a974:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:262
}
8000a978:	01c12083          	lw	ra,28(sp)
8000a97c:	01812403          	lw	s0,24(sp)
8000a980:	02010113          	addi	sp,sp,32
8000a984:	00008067          	ret
8000a988:	0000                	unimp
	...

8000a98c <LOS_Inspect_TskDeal>:
LOS_Inspect_TskDeal():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:272
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
void LOS_Inspect_TskDeal(void)
{
8000a98c:	fe010113          	addi	sp,sp,-32
8000a990:	00112e23          	sw	ra,28(sp)
8000a994:	00812c23          	sw	s0,24(sp)
8000a998:	02010413          	addi	s0,sp,32
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:273
    UINT32 ulRet = LOS_OK;
8000a99c:	fe042423          	sw	zero,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:275
     
    gInspectErrCnt = 0;
8000a9a0:	e001a023          	sw	zero,-512(gp) # 8000e130 <gInspectErrCnt>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:278
      
     /* output a message on hyperterminal using printf function */
    dprintf("\r\n Los Inspect start.\r\n");
8000a9a4:	8000e7b7          	lui	a5,0x8000e
8000a9a8:	9c478513          	addi	a0,a5,-1596 # 8000d9c4 <__stack_top+0xfffcf3c4>
8000a9ac:	8b8f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:280
      
    for(int index = 0;index < LOS_INSPECT_BUFF;index++)
8000a9b0:	fe042623          	sw	zero,-20(s0)
8000a9b4:	0400006f          	j	8000a9f4 <LOS_Inspect_TskDeal+0x68>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:282
    {
        ulRet = LOS_InspectByID((enInspectID)index);
8000a9b8:	fec42783          	lw	a5,-20(s0)
8000a9bc:	00078513          	mv	a0,a5
8000a9c0:	cb5ff0ef          	jal	ra,8000a674 <LOS_InspectByID>
8000a9c4:	fea42423          	sw	a0,-24(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:283
        if(LOS_OK != ulRet)
8000a9c8:	fe842783          	lw	a5,-24(s0)
8000a9cc:	00078e63          	beqz	a5,8000a9e8 <LOS_Inspect_TskDeal+0x5c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:285
        {
            gInspectErrCnt++;
8000a9d0:	e001a783          	lw	a5,-512(gp) # 8000e130 <gInspectErrCnt>
8000a9d4:	00178713          	addi	a4,a5,1
8000a9d8:	e0e1a023          	sw	a4,-512(gp) # 8000e130 <gInspectErrCnt>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:288

            /* turn on LED2 */
            LOS_EvbLedControl(LOS_LED2,LED_ON);
8000a9dc:	00000593          	li	a1,0
8000a9e0:	00100513          	li	a0,1
8000a9e4:	fb5f60ef          	jal	ra,80001998 <LOS_EvbLedControl>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:280 (discriminator 2)
    for(int index = 0;index < LOS_INSPECT_BUFF;index++)
8000a9e8:	fec42783          	lw	a5,-20(s0)
8000a9ec:	00178793          	addi	a5,a5,1
8000a9f0:	fef42623          	sw	a5,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:280 (discriminator 1)
8000a9f4:	fec42703          	lw	a4,-20(s0)
8000a9f8:	00900793          	li	a5,9
8000a9fc:	fae7dee3          	ble	a4,a5,8000a9b8 <LOS_Inspect_TskDeal+0x2c>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:292
        }
    }

     printf("Inspect completed,gInspectErrCnt = [%d]\r\n\r\n",gInspectErrCnt);
8000aa00:	e001a783          	lw	a5,-512(gp) # 8000e130 <gInspectErrCnt>
8000aa04:	00078593          	mv	a1,a5
8000aa08:	8000e7b7          	lui	a5,0x8000e
8000aa0c:	9dc78513          	addi	a0,a5,-1572 # 8000d9dc <__stack_top+0xfffcf3dc>
8000aa10:	298000ef          	jal	ra,8000aca8 <iprintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:295
     
     /* output a message on hyperterminal using printf function */
    dprintf("\r\n Los Key example: please press the UserKey (SW2) key \r\n");
8000aa14:	8000e7b7          	lui	a5,0x8000e
8000aa18:	a0878513          	addi	a0,a5,-1528 # 8000da08 <__stack_top+0xfffcf408>
8000aa1c:	848f70ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:298 (discriminator 1)
    while(1)
    {
        LOS_Inspect_KeyAndLed(USER_KEY,LOS_LED1);
8000aa20:	00000593          	li	a1,0
8000aa24:	00200513          	li	a0,2
8000aa28:	ec1ff0ef          	jal	ra,8000a8e8 <LOS_Inspect_KeyAndLed>
8000aa2c:	ff5ff06f          	j	8000aa20 <LOS_Inspect_TskDeal+0x94>
8000aa30:	0000                	unimp
	...

8000aa34 <LOS_Inspect_Entry>:
LOS_Inspect_Entry():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:310
 Input       : None
 Output      : None
 Return      : None
 *****************************************************************************/
void LOS_Inspect_Entry(void)
{
8000aa34:	fc010113          	addi	sp,sp,-64
8000aa38:	02112e23          	sw	ra,60(sp)
8000aa3c:	02812c23          	sw	s0,56(sp)
8000aa40:	04010413          	addi	s0,sp,64
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:314
    UINT32 uwRet;
    TSK_INIT_PARAM_S stTaskInitParam;

    (VOID)memset((void *)(&stTaskInitParam), 0, sizeof(TSK_INIT_PARAM_S));
8000aa44:	fc840793          	addi	a5,s0,-56
8000aa48:	02400613          	li	a2,36
8000aa4c:	00000593          	li	a1,0
8000aa50:	00078513          	mv	a0,a5
8000aa54:	178000ef          	jal	ra,8000abcc <memset>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:315
    stTaskInitParam.pfnTaskEntry = (TSK_ENTRY_FUNC)LOS_Inspect_TskDeal;
8000aa58:	8000b7b7          	lui	a5,0x8000b
8000aa5c:	98c78793          	addi	a5,a5,-1652 # 8000a98c <__stack_top+0xfffcc38c>
8000aa60:	fcf42423          	sw	a5,-56(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:316
    stTaskInitParam.uwStackSize = LOSCFG_BASE_CORE_TSK_IDLE_STACK_SIZE;
8000aa64:	50000793          	li	a5,1280
8000aa68:	fef42023          	sw	a5,-32(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:317
    stTaskInitParam.pcName = "InspectTsk";
8000aa6c:	8000e7b7          	lui	a5,0x8000e
8000aa70:	a4478793          	addi	a5,a5,-1468 # 8000da44 <__stack_top+0xfffcf444>
8000aa74:	fef42223          	sw	a5,-28(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:318
    stTaskInitParam.usTaskPrio = 9;
8000aa78:	00900793          	li	a5,9
8000aa7c:	fcf41623          	sh	a5,-52(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:319
    uwRet = LOS_TaskCreate(&g_uwDemoTaskID, &stTaskInitParam);
8000aa80:	fc840793          	addi	a5,s0,-56
8000aa84:	00078593          	mv	a1,a5
8000aa88:	e0418513          	addi	a0,gp,-508 # 8000e134 <g_uwDemoTaskID>
8000aa8c:	fe4fd0ef          	jal	ra,80008270 <LOS_TaskCreate>
8000aa90:	fea42623          	sw	a0,-20(s0)
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:325
    if (uwRet != LOS_OK)
    {
        return;
    }
    
    return;
8000aa94:	00000013          	nop
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:326
}
8000aa98:	03c12083          	lw	ra,60(sp)
8000aa9c:	03812403          	lw	s0,56(sp)
8000aaa0:	04010113          	addi	sp,sp,64
8000aaa4:	00008067          	ret
8000aaa8:	0000                	unimp
	...

8000aaac <LOS_Inspect_delim>:
LOS_Inspect_delim():
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:329

void LOS_Inspect_delim(void)
{
8000aaac:	ff010113          	addi	sp,sp,-16
8000aab0:	00112623          	sw	ra,12(sp)
8000aab4:	00812423          	sw	s0,8(sp)
8000aab8:	01010413          	addi	s0,sp,16
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:330
    dprintf("\r\n--------------------------------------------------------------\r\n");
8000aabc:	8000e7b7          	lui	a5,0x8000e
8000aac0:	a5078513          	addi	a0,a5,-1456 # 8000da50 <__stack_top+0xfffcf450>
8000aac4:	fa1f60ef          	jal	ra,80001a64 <LOS_EvbUartPrintf>
D:\dropbox\FromTommy\workspace.github\workspace.github\miv-rv32im-liteos-port-test\Debug/../example/api/los_inspect_entry.c:331
}
8000aac8:	00000013          	nop
8000aacc:	00c12083          	lw	ra,12(sp)
8000aad0:	00812403          	lw	s0,8(sp)
8000aad4:	01010113          	addi	sp,sp,16
8000aad8:	00008067          	ret
8000aadc:	0000                	unimp
	...

8000aae0 <memcpy>:
memcpy():
8000aae0:	00a5c7b3          	xor	a5,a1,a0
8000aae4:	0037f793          	andi	a5,a5,3
8000aae8:	00c50733          	add	a4,a0,a2
8000aaec:	00079663          	bnez	a5,8000aaf8 <memcpy+0x18>
8000aaf0:	00300793          	li	a5,3
8000aaf4:	02c7e463          	bltu	a5,a2,8000ab1c <memcpy+0x3c>
8000aaf8:	00050793          	mv	a5,a0
8000aafc:	00e56c63          	bltu	a0,a4,8000ab14 <memcpy+0x34>
8000ab00:	00008067          	ret
8000ab04:	0005c683          	lbu	a3,0(a1) # 10000 <HEAP_SIZE>
8000ab08:	00178793          	addi	a5,a5,1
8000ab0c:	00158593          	addi	a1,a1,1
8000ab10:	fed78fa3          	sb	a3,-1(a5)
8000ab14:	fee7e8e3          	bltu	a5,a4,8000ab04 <memcpy+0x24>
8000ab18:	00008067          	ret
8000ab1c:	00357793          	andi	a5,a0,3
8000ab20:	08079263          	bnez	a5,8000aba4 <memcpy+0xc4>
8000ab24:	00050793          	mv	a5,a0
8000ab28:	ffc77693          	andi	a3,a4,-4
8000ab2c:	fe068613          	addi	a2,a3,-32
8000ab30:	08c7f663          	bleu	a2,a5,8000abbc <memcpy+0xdc>
8000ab34:	0005a383          	lw	t2,0(a1)
8000ab38:	0045a283          	lw	t0,4(a1)
8000ab3c:	0085af83          	lw	t6,8(a1)
8000ab40:	00c5af03          	lw	t5,12(a1)
8000ab44:	0105ae83          	lw	t4,16(a1)
8000ab48:	0145ae03          	lw	t3,20(a1)
8000ab4c:	0185a303          	lw	t1,24(a1)
8000ab50:	01c5a883          	lw	a7,28(a1)
8000ab54:	02458593          	addi	a1,a1,36
8000ab58:	02478793          	addi	a5,a5,36
8000ab5c:	ffc5a803          	lw	a6,-4(a1)
8000ab60:	fc77ae23          	sw	t2,-36(a5)
8000ab64:	fe57a023          	sw	t0,-32(a5)
8000ab68:	fff7a223          	sw	t6,-28(a5)
8000ab6c:	ffe7a423          	sw	t5,-24(a5)
8000ab70:	ffd7a623          	sw	t4,-20(a5)
8000ab74:	ffc7a823          	sw	t3,-16(a5)
8000ab78:	fe67aa23          	sw	t1,-12(a5)
8000ab7c:	ff17ac23          	sw	a7,-8(a5)
8000ab80:	ff07ae23          	sw	a6,-4(a5)
8000ab84:	fadff06f          	j	8000ab30 <memcpy+0x50>
8000ab88:	0005c683          	lbu	a3,0(a1)
8000ab8c:	00178793          	addi	a5,a5,1
8000ab90:	00158593          	addi	a1,a1,1
8000ab94:	fed78fa3          	sb	a3,-1(a5)
8000ab98:	0037f693          	andi	a3,a5,3
8000ab9c:	fe0696e3          	bnez	a3,8000ab88 <memcpy+0xa8>
8000aba0:	f89ff06f          	j	8000ab28 <memcpy+0x48>
8000aba4:	00050793          	mv	a5,a0
8000aba8:	ff1ff06f          	j	8000ab98 <memcpy+0xb8>
8000abac:	0005a603          	lw	a2,0(a1)
8000abb0:	00478793          	addi	a5,a5,4
8000abb4:	00458593          	addi	a1,a1,4
8000abb8:	fec7ae23          	sw	a2,-4(a5)
8000abbc:	fed7e8e3          	bltu	a5,a3,8000abac <memcpy+0xcc>
8000abc0:	f4e7eae3          	bltu	a5,a4,8000ab14 <memcpy+0x34>
8000abc4:	00008067          	ret
8000abc8:	0000                	unimp
	...

8000abcc <memset>:
memset():
8000abcc:	00f00313          	li	t1,15
8000abd0:	00050713          	mv	a4,a0
8000abd4:	02c37e63          	bleu	a2,t1,8000ac10 <memset+0x44>
8000abd8:	00f77793          	andi	a5,a4,15
8000abdc:	0a079063          	bnez	a5,8000ac7c <memset+0xb0>
8000abe0:	08059263          	bnez	a1,8000ac64 <memset+0x98>
8000abe4:	ff067693          	andi	a3,a2,-16
8000abe8:	00f67613          	andi	a2,a2,15
8000abec:	00e686b3          	add	a3,a3,a4
8000abf0:	00b72023          	sw	a1,0(a4)
8000abf4:	00b72223          	sw	a1,4(a4)
8000abf8:	00b72423          	sw	a1,8(a4)
8000abfc:	00b72623          	sw	a1,12(a4)
8000ac00:	01070713          	addi	a4,a4,16
8000ac04:	fed766e3          	bltu	a4,a3,8000abf0 <memset+0x24>
8000ac08:	00061463          	bnez	a2,8000ac10 <memset+0x44>
8000ac0c:	00008067          	ret
8000ac10:	40c306b3          	sub	a3,t1,a2
8000ac14:	00269693          	slli	a3,a3,0x2
8000ac18:	00000297          	auipc	t0,0x0
8000ac1c:	005686b3          	add	a3,a3,t0
8000ac20:	00c68067          	jr	12(a3)
8000ac24:	00b70723          	sb	a1,14(a4)
8000ac28:	00b706a3          	sb	a1,13(a4)
8000ac2c:	00b70623          	sb	a1,12(a4)
8000ac30:	00b705a3          	sb	a1,11(a4)
8000ac34:	00b70523          	sb	a1,10(a4)
8000ac38:	00b704a3          	sb	a1,9(a4)
8000ac3c:	00b70423          	sb	a1,8(a4)
8000ac40:	00b703a3          	sb	a1,7(a4)
8000ac44:	00b70323          	sb	a1,6(a4)
8000ac48:	00b702a3          	sb	a1,5(a4)
8000ac4c:	00b70223          	sb	a1,4(a4)
8000ac50:	00b701a3          	sb	a1,3(a4)
8000ac54:	00b70123          	sb	a1,2(a4)
8000ac58:	00b700a3          	sb	a1,1(a4)
8000ac5c:	00b70023          	sb	a1,0(a4)
8000ac60:	00008067          	ret
8000ac64:	0ff5f593          	andi	a1,a1,255
8000ac68:	00859693          	slli	a3,a1,0x8
8000ac6c:	00d5e5b3          	or	a1,a1,a3
8000ac70:	01059693          	slli	a3,a1,0x10
8000ac74:	00d5e5b3          	or	a1,a1,a3
8000ac78:	f6dff06f          	j	8000abe4 <memset+0x18>
8000ac7c:	00279693          	slli	a3,a5,0x2
8000ac80:	00000297          	auipc	t0,0x0
8000ac84:	005686b3          	add	a3,a3,t0
8000ac88:	00008293          	mv	t0,ra
8000ac8c:	fa0680e7          	jalr	-96(a3)
8000ac90:	00028093          	mv	ra,t0
8000ac94:	ff078793          	addi	a5,a5,-16
8000ac98:	40f70733          	sub	a4,a4,a5
8000ac9c:	00f60633          	add	a2,a2,a5
8000aca0:	f6c378e3          	bleu	a2,t1,8000ac10 <memset+0x44>
8000aca4:	f3dff06f          	j	8000abe0 <memset+0x14>

8000aca8 <iprintf>:
printf():
8000aca8:	fc010113          	addi	sp,sp,-64
8000acac:	02f12a23          	sw	a5,52(sp)
8000acb0:	02b12223          	sw	a1,36(sp)
8000acb4:	02c12423          	sw	a2,40(sp)
8000acb8:	02d12623          	sw	a3,44(sp)
8000acbc:	02e12823          	sw	a4,48(sp)
8000acc0:	03012c23          	sw	a6,56(sp)
8000acc4:	03112e23          	sw	a7,60(sp)
8000acc8:	00003797          	auipc	a5,0x3
8000accc:	e7478793          	addi	a5,a5,-396 # 8000db3c <_impure_ptr>
8000acd0:	00812c23          	sw	s0,24(sp)
8000acd4:	0007a403          	lw	s0,0(a5)
8000acd8:	00912a23          	sw	s1,20(sp)
8000acdc:	00112e23          	sw	ra,28(sp)
8000ace0:	00050493          	mv	s1,a0
8000ace4:	00040a63          	beqz	s0,8000acf8 <iprintf+0x50>
8000ace8:	01842783          	lw	a5,24(s0)
8000acec:	00079663          	bnez	a5,8000acf8 <iprintf+0x50>
8000acf0:	00040513          	mv	a0,s0
8000acf4:	22c000ef          	jal	ra,8000af20 <__sinit>
8000acf8:	00842583          	lw	a1,8(s0)
8000acfc:	02410693          	addi	a3,sp,36
8000ad00:	00048613          	mv	a2,s1
8000ad04:	00040513          	mv	a0,s0
8000ad08:	00d12623          	sw	a3,12(sp)
8000ad0c:	399000ef          	jal	ra,8000b8a4 <_vfiprintf_r>
8000ad10:	01c12083          	lw	ra,28(sp)
8000ad14:	01812403          	lw	s0,24(sp)
8000ad18:	01412483          	lw	s1,20(sp)
8000ad1c:	04010113          	addi	sp,sp,64
8000ad20:	00008067          	ret
8000ad24:	0000                	unimp
	...

8000ad28 <isatty>:
isatty():
8000ad28:	fc5f506f          	j	80000cec <_isatty>
8000ad2c:	0000                	unimp
	...

8000ad30 <write>:
write():
8000ad30:	00003797          	auipc	a5,0x3
8000ad34:	e0c78793          	addi	a5,a5,-500 # 8000db3c <_impure_ptr>
8000ad38:	00060693          	mv	a3,a2
8000ad3c:	00058613          	mv	a2,a1
8000ad40:	00050593          	mv	a1,a0
8000ad44:	0007a503          	lw	a0,0(a5)
8000ad48:	0740006f          	j	8000adbc <_write_r>
8000ad4c:	0000                	unimp
	...

8000ad50 <_vsiprintf_r>:
_vsiprintf_r():
8000ad50:	800007b7          	lui	a5,0x80000
8000ad54:	f8010113          	addi	sp,sp,-128
8000ad58:	fff7c793          	not	a5,a5
8000ad5c:	00f12e23          	sw	a5,28(sp)
8000ad60:	00f12823          	sw	a5,16(sp)
8000ad64:	ffff07b7          	lui	a5,0xffff0
8000ad68:	00b12423          	sw	a1,8(sp)
8000ad6c:	00b12c23          	sw	a1,24(sp)
8000ad70:	20878793          	addi	a5,a5,520 # ffff0208 <__stack_top+0x7ffb1c08>
8000ad74:	00810593          	addi	a1,sp,8
8000ad78:	06112e23          	sw	ra,124(sp)
8000ad7c:	00f12a23          	sw	a5,20(sp)
8000ad80:	6d4000ef          	jal	ra,8000b454 <_svfiprintf_r>
8000ad84:	00812783          	lw	a5,8(sp)
8000ad88:	00078023          	sb	zero,0(a5)
8000ad8c:	07c12083          	lw	ra,124(sp)
8000ad90:	08010113          	addi	sp,sp,128
8000ad94:	00008067          	ret
8000ad98:	0000                	unimp
	...

8000ad9c <vsiprintf>:
vsprintf():
8000ad9c:	00003797          	auipc	a5,0x3
8000ada0:	da078793          	addi	a5,a5,-608 # 8000db3c <_impure_ptr>
8000ada4:	00060693          	mv	a3,a2
8000ada8:	00058613          	mv	a2,a1
8000adac:	00050593          	mv	a1,a0
8000adb0:	0007a503          	lw	a0,0(a5)
8000adb4:	f9dff06f          	j	8000ad50 <_vsiprintf_r>
8000adb8:	0000                	unimp
	...

8000adbc <_write_r>:
_write_r():
8000adbc:	ff010113          	addi	sp,sp,-16
8000adc0:	00812423          	sw	s0,8(sp)
8000adc4:	00050413          	mv	s0,a0
8000adc8:	00058513          	mv	a0,a1
8000adcc:	00060593          	mv	a1,a2
8000add0:	00068613          	mv	a2,a3
8000add4:	00003797          	auipc	a5,0x3
8000add8:	3e07a623          	sw	zero,1004(a5) # 8000e1c0 <errno>
8000addc:	00112623          	sw	ra,12(sp)
8000ade0:	8bcf60ef          	jal	ra,80000e9c <_write>
8000ade4:	fff00793          	li	a5,-1
8000ade8:	00f51c63          	bne	a0,a5,8000ae00 <_write_r+0x44>
8000adec:	00003797          	auipc	a5,0x3
8000adf0:	3d478793          	addi	a5,a5,980 # 8000e1c0 <errno>
8000adf4:	0007a783          	lw	a5,0(a5)
8000adf8:	00078463          	beqz	a5,8000ae00 <_write_r+0x44>
8000adfc:	00f42023          	sw	a5,0(s0)
8000ae00:	00c12083          	lw	ra,12(sp)
8000ae04:	00812403          	lw	s0,8(sp)
8000ae08:	01010113          	addi	sp,sp,16
8000ae0c:	00008067          	ret
8000ae10:	0000                	unimp
	...

8000ae14 <_cleanup_r>:
_cleanup_r():
8000ae14:	00002597          	auipc	a1,0x2
8000ae18:	a6c58593          	addi	a1,a1,-1428 # 8000c880 <_fflush_r>
8000ae1c:	2b00006f          	j	8000b0cc <_fwalk_reent>
8000ae20:	0000                	unimp
	...

8000ae24 <std.isra.0>:
std.isra.0():
8000ae24:	ff010113          	addi	sp,sp,-16
8000ae28:	00812423          	sw	s0,8(sp)
8000ae2c:	00112623          	sw	ra,12(sp)
8000ae30:	00050413          	mv	s0,a0
8000ae34:	00b51623          	sh	a1,12(a0)
8000ae38:	00c51723          	sh	a2,14(a0)
8000ae3c:	00052023          	sw	zero,0(a0)
8000ae40:	00052223          	sw	zero,4(a0)
8000ae44:	00052423          	sw	zero,8(a0)
8000ae48:	06052223          	sw	zero,100(a0)
8000ae4c:	00052823          	sw	zero,16(a0)
8000ae50:	00052a23          	sw	zero,20(a0)
8000ae54:	00052c23          	sw	zero,24(a0)
8000ae58:	00800613          	li	a2,8
8000ae5c:	00000593          	li	a1,0
8000ae60:	05c50513          	addi	a0,a0,92
8000ae64:	d69ff0ef          	jal	ra,8000abcc <memset>
8000ae68:	00001797          	auipc	a5,0x1
8000ae6c:	3e478793          	addi	a5,a5,996 # 8000c24c <__sread>
8000ae70:	02f42223          	sw	a5,36(s0)
8000ae74:	00001797          	auipc	a5,0x1
8000ae78:	42c78793          	addi	a5,a5,1068 # 8000c2a0 <__swrite>
8000ae7c:	02f42423          	sw	a5,40(s0)
8000ae80:	00001797          	auipc	a5,0x1
8000ae84:	4a878793          	addi	a5,a5,1192 # 8000c328 <__sseek>
8000ae88:	02f42623          	sw	a5,44(s0)
8000ae8c:	00001797          	auipc	a5,0x1
8000ae90:	4f878793          	addi	a5,a5,1272 # 8000c384 <__sclose>
8000ae94:	02842023          	sw	s0,32(s0)
8000ae98:	02f42823          	sw	a5,48(s0)
8000ae9c:	00c12083          	lw	ra,12(sp)
8000aea0:	00812403          	lw	s0,8(sp)
8000aea4:	01010113          	addi	sp,sp,16
8000aea8:	00008067          	ret
8000aeac:	0000                	unimp
	...

8000aeb0 <__sfmoreglue>:
__sfmoreglue():
8000aeb0:	ff010113          	addi	sp,sp,-16
8000aeb4:	00912223          	sw	s1,4(sp)
8000aeb8:	06800613          	li	a2,104
8000aebc:	fff58493          	addi	s1,a1,-1
8000aec0:	02c484b3          	mul	s1,s1,a2
8000aec4:	01212023          	sw	s2,0(sp)
8000aec8:	00058913          	mv	s2,a1
8000aecc:	00812423          	sw	s0,8(sp)
8000aed0:	00112623          	sw	ra,12(sp)
8000aed4:	07448593          	addi	a1,s1,116
8000aed8:	2ac000ef          	jal	ra,8000b184 <_malloc_r>
8000aedc:	00050413          	mv	s0,a0
8000aee0:	02050063          	beqz	a0,8000af00 <__sfmoreglue+0x50>
8000aee4:	00052023          	sw	zero,0(a0)
8000aee8:	01252223          	sw	s2,4(a0)
8000aeec:	00c50513          	addi	a0,a0,12
8000aef0:	00a42423          	sw	a0,8(s0)
8000aef4:	06848613          	addi	a2,s1,104
8000aef8:	00000593          	li	a1,0
8000aefc:	cd1ff0ef          	jal	ra,8000abcc <memset>
8000af00:	00040513          	mv	a0,s0
8000af04:	00c12083          	lw	ra,12(sp)
8000af08:	00812403          	lw	s0,8(sp)
8000af0c:	00412483          	lw	s1,4(sp)
8000af10:	00012903          	lw	s2,0(sp)
8000af14:	01010113          	addi	sp,sp,16
8000af18:	00008067          	ret
8000af1c:	0000                	unimp
	...

8000af20 <__sinit>:
__sinit():
8000af20:	01852783          	lw	a5,24(a0)
8000af24:	0a079663          	bnez	a5,8000afd0 <__sinit+0xb0>
8000af28:	ff010113          	addi	sp,sp,-16
8000af2c:	00112623          	sw	ra,12(sp)
8000af30:	00812423          	sw	s0,8(sp)
8000af34:	00000797          	auipc	a5,0x0
8000af38:	ee078793          	addi	a5,a5,-288 # 8000ae14 <_cleanup_r>
8000af3c:	02f52423          	sw	a5,40(a0)
8000af40:	00003797          	auipc	a5,0x3
8000af44:	bf878793          	addi	a5,a5,-1032 # 8000db38 <_global_impure_ptr>
8000af48:	0007a783          	lw	a5,0(a5)
8000af4c:	04052423          	sw	zero,72(a0)
8000af50:	04052623          	sw	zero,76(a0)
8000af54:	04052823          	sw	zero,80(a0)
8000af58:	00f51663          	bne	a0,a5,8000af64 <__sinit+0x44>
8000af5c:	00100793          	li	a5,1
8000af60:	00f52c23          	sw	a5,24(a0)
8000af64:	00050413          	mv	s0,a0
8000af68:	070000ef          	jal	ra,8000afd8 <__sfp>
8000af6c:	00a42223          	sw	a0,4(s0)
8000af70:	00040513          	mv	a0,s0
8000af74:	064000ef          	jal	ra,8000afd8 <__sfp>
8000af78:	00a42423          	sw	a0,8(s0)
8000af7c:	00040513          	mv	a0,s0
8000af80:	058000ef          	jal	ra,8000afd8 <__sfp>
8000af84:	00a42623          	sw	a0,12(s0)
8000af88:	00442503          	lw	a0,4(s0)
8000af8c:	00000613          	li	a2,0
8000af90:	00400593          	li	a1,4
8000af94:	e91ff0ef          	jal	ra,8000ae24 <std.isra.0>
8000af98:	00842503          	lw	a0,8(s0)
8000af9c:	00100613          	li	a2,1
8000afa0:	00900593          	li	a1,9
8000afa4:	e81ff0ef          	jal	ra,8000ae24 <std.isra.0>
8000afa8:	00c42503          	lw	a0,12(s0)
8000afac:	00200613          	li	a2,2
8000afb0:	01200593          	li	a1,18
8000afb4:	e71ff0ef          	jal	ra,8000ae24 <std.isra.0>
8000afb8:	00100793          	li	a5,1
8000afbc:	00f42c23          	sw	a5,24(s0)
8000afc0:	00c12083          	lw	ra,12(sp)
8000afc4:	00812403          	lw	s0,8(sp)
8000afc8:	01010113          	addi	sp,sp,16
8000afcc:	00008067          	ret
8000afd0:	00008067          	ret
8000afd4:	0000                	unimp
	...

8000afd8 <__sfp>:
__sfp():
8000afd8:	ff010113          	addi	sp,sp,-16
8000afdc:	00003797          	auipc	a5,0x3
8000afe0:	b5c78793          	addi	a5,a5,-1188 # 8000db38 <_global_impure_ptr>
8000afe4:	00912223          	sw	s1,4(sp)
8000afe8:	0007a483          	lw	s1,0(a5)
8000afec:	01212023          	sw	s2,0(sp)
8000aff0:	00112623          	sw	ra,12(sp)
8000aff4:	0184a783          	lw	a5,24(s1)
8000aff8:	00812423          	sw	s0,8(sp)
8000affc:	00050913          	mv	s2,a0
8000b000:	00079663          	bnez	a5,8000b00c <__sfp+0x34>
8000b004:	00048513          	mv	a0,s1
8000b008:	f19ff0ef          	jal	ra,8000af20 <__sinit>
8000b00c:	04848493          	addi	s1,s1,72
8000b010:	0084a403          	lw	s0,8(s1)
8000b014:	0044a783          	lw	a5,4(s1)
8000b018:	fff78793          	addi	a5,a5,-1
8000b01c:	0007da63          	bgez	a5,8000b030 <__sfp+0x58>
8000b020:	0004a783          	lw	a5,0(s1)
8000b024:	00078e63          	beqz	a5,8000b040 <__sfp+0x68>
8000b028:	0004a483          	lw	s1,0(s1)
8000b02c:	fe5ff06f          	j	8000b010 <__sfp+0x38>
8000b030:	00c41703          	lh	a4,12(s0)
8000b034:	04070463          	beqz	a4,8000b07c <__sfp+0xa4>
8000b038:	06840413          	addi	s0,s0,104
8000b03c:	fddff06f          	j	8000b018 <__sfp+0x40>
8000b040:	00400593          	li	a1,4
8000b044:	00090513          	mv	a0,s2
8000b048:	e69ff0ef          	jal	ra,8000aeb0 <__sfmoreglue>
8000b04c:	00a4a023          	sw	a0,0(s1)
8000b050:	fc051ce3          	bnez	a0,8000b028 <__sfp+0x50>
8000b054:	00c00793          	li	a5,12
8000b058:	00f92023          	sw	a5,0(s2)
8000b05c:	00000413          	li	s0,0
8000b060:	00040513          	mv	a0,s0
8000b064:	00c12083          	lw	ra,12(sp)
8000b068:	00812403          	lw	s0,8(sp)
8000b06c:	00412483          	lw	s1,4(sp)
8000b070:	00012903          	lw	s2,0(sp)
8000b074:	01010113          	addi	sp,sp,16
8000b078:	00008067          	ret
8000b07c:	ffff07b7          	lui	a5,0xffff0
8000b080:	00178793          	addi	a5,a5,1 # ffff0001 <__stack_top+0x7ffb1a01>
8000b084:	06042223          	sw	zero,100(s0)
8000b088:	00042023          	sw	zero,0(s0)
8000b08c:	00042223          	sw	zero,4(s0)
8000b090:	00042423          	sw	zero,8(s0)
8000b094:	00f42623          	sw	a5,12(s0)
8000b098:	00042823          	sw	zero,16(s0)
8000b09c:	00042a23          	sw	zero,20(s0)
8000b0a0:	00042c23          	sw	zero,24(s0)
8000b0a4:	00800613          	li	a2,8
8000b0a8:	00000593          	li	a1,0
8000b0ac:	05c40513          	addi	a0,s0,92
8000b0b0:	b1dff0ef          	jal	ra,8000abcc <memset>
8000b0b4:	02042a23          	sw	zero,52(s0)
8000b0b8:	02042c23          	sw	zero,56(s0)
8000b0bc:	04042423          	sw	zero,72(s0)
8000b0c0:	04042623          	sw	zero,76(s0)
8000b0c4:	f9dff06f          	j	8000b060 <__sfp+0x88>
8000b0c8:	0000                	unimp
	...

8000b0cc <_fwalk_reent>:
_fwalk_reent():
8000b0cc:	fd010113          	addi	sp,sp,-48
8000b0d0:	02812423          	sw	s0,40(sp)
8000b0d4:	03212023          	sw	s2,32(sp)
8000b0d8:	01412c23          	sw	s4,24(sp)
8000b0dc:	01512a23          	sw	s5,20(sp)
8000b0e0:	01612823          	sw	s6,16(sp)
8000b0e4:	01712623          	sw	s7,12(sp)
8000b0e8:	02112623          	sw	ra,44(sp)
8000b0ec:	02912223          	sw	s1,36(sp)
8000b0f0:	01312e23          	sw	s3,28(sp)
8000b0f4:	00050a13          	mv	s4,a0
8000b0f8:	00058a93          	mv	s5,a1
8000b0fc:	04850413          	addi	s0,a0,72
8000b100:	00000913          	li	s2,0
8000b104:	00100b13          	li	s6,1
8000b108:	fff00b93          	li	s7,-1
8000b10c:	02041a63          	bnez	s0,8000b140 <_fwalk_reent+0x74>
8000b110:	02c12083          	lw	ra,44(sp)
8000b114:	02812403          	lw	s0,40(sp)
8000b118:	00090513          	mv	a0,s2
8000b11c:	02412483          	lw	s1,36(sp)
8000b120:	02012903          	lw	s2,32(sp)
8000b124:	01c12983          	lw	s3,28(sp)
8000b128:	01812a03          	lw	s4,24(sp)
8000b12c:	01412a83          	lw	s5,20(sp)
8000b130:	01012b03          	lw	s6,16(sp)
8000b134:	00c12b83          	lw	s7,12(sp)
8000b138:	03010113          	addi	sp,sp,48
8000b13c:	00008067          	ret
8000b140:	00842483          	lw	s1,8(s0)
8000b144:	00442983          	lw	s3,4(s0)
8000b148:	fff98993          	addi	s3,s3,-1
8000b14c:	0009d663          	bgez	s3,8000b158 <_fwalk_reent+0x8c>
8000b150:	00042403          	lw	s0,0(s0)
8000b154:	fb9ff06f          	j	8000b10c <_fwalk_reent+0x40>
8000b158:	00c4d783          	lhu	a5,12(s1)
8000b15c:	00fb7e63          	bleu	a5,s6,8000b178 <_fwalk_reent+0xac>
8000b160:	00e49783          	lh	a5,14(s1)
8000b164:	01778a63          	beq	a5,s7,8000b178 <_fwalk_reent+0xac>
8000b168:	00048593          	mv	a1,s1
8000b16c:	000a0513          	mv	a0,s4
8000b170:	000a80e7          	jalr	s5
8000b174:	00a96933          	or	s2,s2,a0
8000b178:	06848493          	addi	s1,s1,104
8000b17c:	fcdff06f          	j	8000b148 <_fwalk_reent+0x7c>
8000b180:	0000                	unimp
	...

8000b184 <_malloc_r>:
_malloc_r():
8000b184:	fe010113          	addi	sp,sp,-32
8000b188:	00912a23          	sw	s1,20(sp)
8000b18c:	00358493          	addi	s1,a1,3
8000b190:	ffc4f493          	andi	s1,s1,-4
8000b194:	00112e23          	sw	ra,28(sp)
8000b198:	00812c23          	sw	s0,24(sp)
8000b19c:	01212823          	sw	s2,16(sp)
8000b1a0:	01312623          	sw	s3,12(sp)
8000b1a4:	00848493          	addi	s1,s1,8
8000b1a8:	00c00793          	li	a5,12
8000b1ac:	06f4fa63          	bleu	a5,s1,8000b220 <_malloc_r+0x9c>
8000b1b0:	00c00493          	li	s1,12
8000b1b4:	06b4e863          	bltu	s1,a1,8000b224 <_malloc_r+0xa0>
8000b1b8:	00050913          	mv	s2,a0
8000b1bc:	1c5010ef          	jal	ra,8000cb80 <__malloc_lock>
8000b1c0:	00003797          	auipc	a5,0x3
8000b1c4:	f7878793          	addi	a5,a5,-136 # 8000e138 <__malloc_free_list>
8000b1c8:	0007a403          	lw	s0,0(a5)
8000b1cc:	00040793          	mv	a5,s0
8000b1d0:	06079e63          	bnez	a5,8000b24c <_malloc_r+0xc8>
8000b1d4:	00003797          	auipc	a5,0x3
8000b1d8:	f6878793          	addi	a5,a5,-152 # 8000e13c <__malloc_sbrk_start>
8000b1dc:	0007a783          	lw	a5,0(a5)
8000b1e0:	00079c63          	bnez	a5,8000b1f8 <_malloc_r+0x74>
8000b1e4:	00000593          	li	a1,0
8000b1e8:	00090513          	mv	a0,s2
8000b1ec:	010010ef          	jal	ra,8000c1fc <_sbrk_r>
8000b1f0:	00003797          	auipc	a5,0x3
8000b1f4:	f4a7a623          	sw	a0,-180(a5) # 8000e13c <__malloc_sbrk_start>
8000b1f8:	00048593          	mv	a1,s1
8000b1fc:	00090513          	mv	a0,s2
8000b200:	7fd000ef          	jal	ra,8000c1fc <_sbrk_r>
8000b204:	fff00993          	li	s3,-1
8000b208:	0b351e63          	bne	a0,s3,8000b2c4 <_malloc_r+0x140>
8000b20c:	00c00793          	li	a5,12
8000b210:	00f92023          	sw	a5,0(s2)
8000b214:	00090513          	mv	a0,s2
8000b218:	171010ef          	jal	ra,8000cb88 <__malloc_unlock>
8000b21c:	0100006f          	j	8000b22c <_malloc_r+0xa8>
8000b220:	f804dae3          	bgez	s1,8000b1b4 <_malloc_r+0x30>
8000b224:	00c00793          	li	a5,12
8000b228:	00f52023          	sw	a5,0(a0)
8000b22c:	00000513          	li	a0,0
8000b230:	01c12083          	lw	ra,28(sp)
8000b234:	01812403          	lw	s0,24(sp)
8000b238:	01412483          	lw	s1,20(sp)
8000b23c:	01012903          	lw	s2,16(sp)
8000b240:	00c12983          	lw	s3,12(sp)
8000b244:	02010113          	addi	sp,sp,32
8000b248:	00008067          	ret
8000b24c:	0007a703          	lw	a4,0(a5)
8000b250:	40970733          	sub	a4,a4,s1
8000b254:	06074263          	bltz	a4,8000b2b8 <_malloc_r+0x134>
8000b258:	00b00693          	li	a3,11
8000b25c:	00e6fa63          	bleu	a4,a3,8000b270 <_malloc_r+0xec>
8000b260:	00e7a023          	sw	a4,0(a5)
8000b264:	00e78433          	add	s0,a5,a4
8000b268:	00942023          	sw	s1,0(s0)
8000b26c:	0140006f          	j	8000b280 <_malloc_r+0xfc>
8000b270:	0047a703          	lw	a4,4(a5)
8000b274:	02f41c63          	bne	s0,a5,8000b2ac <_malloc_r+0x128>
8000b278:	00003797          	auipc	a5,0x3
8000b27c:	ece7a023          	sw	a4,-320(a5) # 8000e138 <__malloc_free_list>
8000b280:	00090513          	mv	a0,s2
8000b284:	105010ef          	jal	ra,8000cb88 <__malloc_unlock>
8000b288:	00b40513          	addi	a0,s0,11
8000b28c:	00440793          	addi	a5,s0,4
8000b290:	ff857513          	andi	a0,a0,-8
8000b294:	40f507b3          	sub	a5,a0,a5
8000b298:	f8078ce3          	beqz	a5,8000b230 <_malloc_r+0xac>
8000b29c:	00f40433          	add	s0,s0,a5
8000b2a0:	40f007b3          	neg	a5,a5
8000b2a4:	00f42023          	sw	a5,0(s0)
8000b2a8:	f89ff06f          	j	8000b230 <_malloc_r+0xac>
8000b2ac:	00e42223          	sw	a4,4(s0)
8000b2b0:	00078413          	mv	s0,a5
8000b2b4:	fcdff06f          	j	8000b280 <_malloc_r+0xfc>
8000b2b8:	00078413          	mv	s0,a5
8000b2bc:	0047a783          	lw	a5,4(a5)
8000b2c0:	f11ff06f          	j	8000b1d0 <_malloc_r+0x4c>
8000b2c4:	00350413          	addi	s0,a0,3
8000b2c8:	ffc47413          	andi	s0,s0,-4
8000b2cc:	f8850ee3          	beq	a0,s0,8000b268 <_malloc_r+0xe4>
8000b2d0:	40a405b3          	sub	a1,s0,a0
8000b2d4:	00090513          	mv	a0,s2
8000b2d8:	725000ef          	jal	ra,8000c1fc <_sbrk_r>
8000b2dc:	f93516e3          	bne	a0,s3,8000b268 <_malloc_r+0xe4>
8000b2e0:	f2dff06f          	j	8000b20c <_malloc_r+0x88>
8000b2e4:	0000                	unimp
	...

8000b2e8 <__ssputs_r>:
__ssputs_r():
8000b2e8:	fe010113          	addi	sp,sp,-32
8000b2ec:	01212823          	sw	s2,16(sp)
8000b2f0:	0085a903          	lw	s2,8(a1)
8000b2f4:	00812c23          	sw	s0,24(sp)
8000b2f8:	01412423          	sw	s4,8(sp)
8000b2fc:	01612023          	sw	s6,0(sp)
8000b300:	00112e23          	sw	ra,28(sp)
8000b304:	00912a23          	sw	s1,20(sp)
8000b308:	01312623          	sw	s3,12(sp)
8000b30c:	01512223          	sw	s5,4(sp)
8000b310:	00058413          	mv	s0,a1
8000b314:	00060b13          	mv	s6,a2
8000b318:	00068a13          	mv	s4,a3
8000b31c:	0d26ee63          	bltu	a3,s2,8000b3f8 <__ssputs_r+0x110>
8000b320:	00c5d783          	lhu	a5,12(a1)
8000b324:	4807f713          	andi	a4,a5,1152
8000b328:	0c070663          	beqz	a4,8000b3f4 <__ssputs_r+0x10c>
8000b32c:	00042483          	lw	s1,0(s0)
8000b330:	0105a583          	lw	a1,16(a1)
8000b334:	01442703          	lw	a4,20(s0)
8000b338:	00050a93          	mv	s5,a0
8000b33c:	40b489b3          	sub	s3,s1,a1
8000b340:	00300493          	li	s1,3
8000b344:	02e484b3          	mul	s1,s1,a4
8000b348:	00200713          	li	a4,2
8000b34c:	02e4c4b3          	div	s1,s1,a4
8000b350:	00168713          	addi	a4,a3,1
8000b354:	01370733          	add	a4,a4,s3
8000b358:	00e4f463          	bleu	a4,s1,8000b360 <__ssputs_r+0x78>
8000b35c:	00070493          	mv	s1,a4
8000b360:	4007f793          	andi	a5,a5,1024
8000b364:	0c078463          	beqz	a5,8000b42c <__ssputs_r+0x144>
8000b368:	00048593          	mv	a1,s1
8000b36c:	000a8513          	mv	a0,s5
8000b370:	e15ff0ef          	jal	ra,8000b184 <_malloc_r>
8000b374:	00050913          	mv	s2,a0
8000b378:	04051263          	bnez	a0,8000b3bc <__ssputs_r+0xd4>
8000b37c:	00c00793          	li	a5,12
8000b380:	00faa023          	sw	a5,0(s5)
8000b384:	00c45783          	lhu	a5,12(s0)
8000b388:	fff00513          	li	a0,-1
8000b38c:	0407e793          	ori	a5,a5,64
8000b390:	00f41623          	sh	a5,12(s0)
8000b394:	01c12083          	lw	ra,28(sp)
8000b398:	01812403          	lw	s0,24(sp)
8000b39c:	01412483          	lw	s1,20(sp)
8000b3a0:	01012903          	lw	s2,16(sp)
8000b3a4:	00c12983          	lw	s3,12(sp)
8000b3a8:	00812a03          	lw	s4,8(sp)
8000b3ac:	00412a83          	lw	s5,4(sp)
8000b3b0:	00012b03          	lw	s6,0(sp)
8000b3b4:	02010113          	addi	sp,sp,32
8000b3b8:	00008067          	ret
8000b3bc:	01042583          	lw	a1,16(s0)
8000b3c0:	00098613          	mv	a2,s3
8000b3c4:	f1cff0ef          	jal	ra,8000aae0 <memcpy>
8000b3c8:	00c45783          	lhu	a5,12(s0)
8000b3cc:	b7f7f793          	andi	a5,a5,-1153
8000b3d0:	0807e793          	ori	a5,a5,128
8000b3d4:	00f41623          	sh	a5,12(s0)
8000b3d8:	01242823          	sw	s2,16(s0)
8000b3dc:	00942a23          	sw	s1,20(s0)
8000b3e0:	01390933          	add	s2,s2,s3
8000b3e4:	413484b3          	sub	s1,s1,s3
8000b3e8:	01242023          	sw	s2,0(s0)
8000b3ec:	00942423          	sw	s1,8(s0)
8000b3f0:	000a0913          	mv	s2,s4
8000b3f4:	012a7463          	bleu	s2,s4,8000b3fc <__ssputs_r+0x114>
8000b3f8:	000a0913          	mv	s2,s4
8000b3fc:	00042503          	lw	a0,0(s0)
8000b400:	00090613          	mv	a2,s2
8000b404:	000b0593          	mv	a1,s6
8000b408:	720010ef          	jal	ra,8000cb28 <memmove>
8000b40c:	00842783          	lw	a5,8(s0)
8000b410:	00000513          	li	a0,0
8000b414:	412787b3          	sub	a5,a5,s2
8000b418:	00f42423          	sw	a5,8(s0)
8000b41c:	00042783          	lw	a5,0(s0)
8000b420:	01278933          	add	s2,a5,s2
8000b424:	01242023          	sw	s2,0(s0)
8000b428:	f6dff06f          	j	8000b394 <__ssputs_r+0xac>
8000b42c:	00048613          	mv	a2,s1
8000b430:	000a8513          	mv	a0,s5
8000b434:	06d010ef          	jal	ra,8000cca0 <_realloc_r>
8000b438:	00050913          	mv	s2,a0
8000b43c:	f8051ee3          	bnez	a0,8000b3d8 <__ssputs_r+0xf0>
8000b440:	01042583          	lw	a1,16(s0)
8000b444:	000a8513          	mv	a0,s5
8000b448:	748010ef          	jal	ra,8000cb90 <_free_r>
8000b44c:	f31ff06f          	j	8000b37c <__ssputs_r+0x94>
8000b450:	0000                	unimp
	...

8000b454 <_svfiprintf_r>:
_svfprintf_r():
8000b454:	00c5d783          	lhu	a5,12(a1)
8000b458:	f6010113          	addi	sp,sp,-160
8000b45c:	08912a23          	sw	s1,148(sp)
8000b460:	09212823          	sw	s2,144(sp)
8000b464:	09312623          	sw	s3,140(sp)
8000b468:	08112e23          	sw	ra,156(sp)
8000b46c:	08812c23          	sw	s0,152(sp)
8000b470:	09412423          	sw	s4,136(sp)
8000b474:	09512223          	sw	s5,132(sp)
8000b478:	09612023          	sw	s6,128(sp)
8000b47c:	07712e23          	sw	s7,124(sp)
8000b480:	07812c23          	sw	s8,120(sp)
8000b484:	07912a23          	sw	s9,116(sp)
8000b488:	00d12623          	sw	a3,12(sp)
8000b48c:	0807f793          	andi	a5,a5,128
8000b490:	00050993          	mv	s3,a0
8000b494:	00058913          	mv	s2,a1
8000b498:	00060493          	mv	s1,a2
8000b49c:	06078463          	beqz	a5,8000b504 <_svfiprintf_r+0xb0>
8000b4a0:	0105a783          	lw	a5,16(a1)
8000b4a4:	06079063          	bnez	a5,8000b504 <_svfiprintf_r+0xb0>
8000b4a8:	04000593          	li	a1,64
8000b4ac:	cd9ff0ef          	jal	ra,8000b184 <_malloc_r>
8000b4b0:	00a92023          	sw	a0,0(s2)
8000b4b4:	00a92823          	sw	a0,16(s2)
8000b4b8:	04051263          	bnez	a0,8000b4fc <_svfiprintf_r+0xa8>
8000b4bc:	00c00793          	li	a5,12
8000b4c0:	00f9a023          	sw	a5,0(s3)
8000b4c4:	fff00513          	li	a0,-1
8000b4c8:	09c12083          	lw	ra,156(sp)
8000b4cc:	09812403          	lw	s0,152(sp)
8000b4d0:	09412483          	lw	s1,148(sp)
8000b4d4:	09012903          	lw	s2,144(sp)
8000b4d8:	08c12983          	lw	s3,140(sp)
8000b4dc:	08812a03          	lw	s4,136(sp)
8000b4e0:	08412a83          	lw	s5,132(sp)
8000b4e4:	08012b03          	lw	s6,128(sp)
8000b4e8:	07c12b83          	lw	s7,124(sp)
8000b4ec:	07812c03          	lw	s8,120(sp)
8000b4f0:	07412c83          	lw	s9,116(sp)
8000b4f4:	0a010113          	addi	sp,sp,160
8000b4f8:	00008067          	ret
8000b4fc:	04000793          	li	a5,64
8000b500:	00f92a23          	sw	a5,20(s2)
8000b504:	02000793          	li	a5,32
8000b508:	02f104a3          	sb	a5,41(sp)
8000b50c:	03000793          	li	a5,48
8000b510:	02012223          	sw	zero,36(sp)
8000b514:	02f10523          	sb	a5,42(sp)
8000b518:	02500b93          	li	s7,37
8000b51c:	00002a97          	auipc	s5,0x2
8000b520:	5d8a8a93          	addi	s5,s5,1496 # 8000daf4 <__sf_fake_stdout+0x20>
8000b524:	00100c13          	li	s8,1
8000b528:	00a00b13          	li	s6,10
8000b52c:	00048413          	mv	s0,s1
8000b530:	00044783          	lbu	a5,0(s0)
8000b534:	00078463          	beqz	a5,8000b53c <_svfiprintf_r+0xe8>
8000b538:	0d779863          	bne	a5,s7,8000b608 <_svfiprintf_r+0x1b4>
8000b53c:	40940cb3          	sub	s9,s0,s1
8000b540:	020c8663          	beqz	s9,8000b56c <_svfiprintf_r+0x118>
8000b544:	000c8693          	mv	a3,s9
8000b548:	00048613          	mv	a2,s1
8000b54c:	00090593          	mv	a1,s2
8000b550:	00098513          	mv	a0,s3
8000b554:	d95ff0ef          	jal	ra,8000b2e8 <__ssputs_r>
8000b558:	fff00793          	li	a5,-1
8000b55c:	24f50a63          	beq	a0,a5,8000b7b0 <_svfiprintf_r+0x35c>
8000b560:	02412683          	lw	a3,36(sp)
8000b564:	019686b3          	add	a3,a3,s9
8000b568:	02d12223          	sw	a3,36(sp)
8000b56c:	00044783          	lbu	a5,0(s0)
8000b570:	24078063          	beqz	a5,8000b7b0 <_svfiprintf_r+0x35c>
8000b574:	fff00793          	li	a5,-1
8000b578:	00140493          	addi	s1,s0,1
8000b57c:	00012823          	sw	zero,16(sp)
8000b580:	00012e23          	sw	zero,28(sp)
8000b584:	00f12a23          	sw	a5,20(sp)
8000b588:	00012c23          	sw	zero,24(sp)
8000b58c:	040109a3          	sb	zero,83(sp)
8000b590:	06012423          	sw	zero,104(sp)
8000b594:	0004c583          	lbu	a1,0(s1)
8000b598:	00500613          	li	a2,5
8000b59c:	000a8513          	mv	a0,s5
8000b5a0:	560010ef          	jal	ra,8000cb00 <memchr>
8000b5a4:	00148413          	addi	s0,s1,1
8000b5a8:	01012783          	lw	a5,16(sp)
8000b5ac:	06051263          	bnez	a0,8000b610 <_svfiprintf_r+0x1bc>
8000b5b0:	0107f713          	andi	a4,a5,16
8000b5b4:	00070663          	beqz	a4,8000b5c0 <_svfiprintf_r+0x16c>
8000b5b8:	02000713          	li	a4,32
8000b5bc:	04e109a3          	sb	a4,83(sp)
8000b5c0:	0087f713          	andi	a4,a5,8
8000b5c4:	00070663          	beqz	a4,8000b5d0 <_svfiprintf_r+0x17c>
8000b5c8:	02b00713          	li	a4,43
8000b5cc:	04e109a3          	sb	a4,83(sp)
8000b5d0:	0004c683          	lbu	a3,0(s1)
8000b5d4:	02a00713          	li	a4,42
8000b5d8:	04e68863          	beq	a3,a4,8000b628 <_svfiprintf_r+0x1d4>
8000b5dc:	01c12783          	lw	a5,28(sp)
8000b5e0:	00048413          	mv	s0,s1
8000b5e4:	00000693          	li	a3,0
8000b5e8:	00900613          	li	a2,9
8000b5ec:	00044703          	lbu	a4,0(s0)
8000b5f0:	00140593          	addi	a1,s0,1
8000b5f4:	fd070713          	addi	a4,a4,-48
8000b5f8:	08e67a63          	bleu	a4,a2,8000b68c <_svfiprintf_r+0x238>
8000b5fc:	04068263          	beqz	a3,8000b640 <_svfiprintf_r+0x1ec>
8000b600:	00f12e23          	sw	a5,28(sp)
8000b604:	03c0006f          	j	8000b640 <_svfiprintf_r+0x1ec>
8000b608:	00140413          	addi	s0,s0,1
8000b60c:	f25ff06f          	j	8000b530 <_svfiprintf_r+0xdc>
8000b610:	41550533          	sub	a0,a0,s5
8000b614:	00ac1533          	sll	a0,s8,a0
8000b618:	00a7e7b3          	or	a5,a5,a0
8000b61c:	00f12823          	sw	a5,16(sp)
8000b620:	00040493          	mv	s1,s0
8000b624:	f71ff06f          	j	8000b594 <_svfiprintf_r+0x140>
8000b628:	00c12703          	lw	a4,12(sp)
8000b62c:	00470693          	addi	a3,a4,4
8000b630:	00072703          	lw	a4,0(a4)
8000b634:	00d12623          	sw	a3,12(sp)
8000b638:	04074063          	bltz	a4,8000b678 <_svfiprintf_r+0x224>
8000b63c:	00e12e23          	sw	a4,28(sp)
8000b640:	00044703          	lbu	a4,0(s0)
8000b644:	02e00793          	li	a5,46
8000b648:	08f71463          	bne	a4,a5,8000b6d0 <_svfiprintf_r+0x27c>
8000b64c:	00144703          	lbu	a4,1(s0)
8000b650:	02a00793          	li	a5,42
8000b654:	04f71a63          	bne	a4,a5,8000b6a8 <_svfiprintf_r+0x254>
8000b658:	00c12783          	lw	a5,12(sp)
8000b65c:	00240413          	addi	s0,s0,2
8000b660:	00478713          	addi	a4,a5,4
8000b664:	0007a783          	lw	a5,0(a5)
8000b668:	00e12623          	sw	a4,12(sp)
8000b66c:	0207ca63          	bltz	a5,8000b6a0 <_svfiprintf_r+0x24c>
8000b670:	00f12a23          	sw	a5,20(sp)
8000b674:	05c0006f          	j	8000b6d0 <_svfiprintf_r+0x27c>
8000b678:	40e00733          	neg	a4,a4
8000b67c:	0027e793          	ori	a5,a5,2
8000b680:	00e12e23          	sw	a4,28(sp)
8000b684:	00f12823          	sw	a5,16(sp)
8000b688:	fb9ff06f          	j	8000b640 <_svfiprintf_r+0x1ec>
8000b68c:	036787b3          	mul	a5,a5,s6
8000b690:	00100693          	li	a3,1
8000b694:	00058413          	mv	s0,a1
8000b698:	00e787b3          	add	a5,a5,a4
8000b69c:	f51ff06f          	j	8000b5ec <_svfiprintf_r+0x198>
8000b6a0:	fff00793          	li	a5,-1
8000b6a4:	fcdff06f          	j	8000b670 <_svfiprintf_r+0x21c>
8000b6a8:	00140413          	addi	s0,s0,1
8000b6ac:	00012a23          	sw	zero,20(sp)
8000b6b0:	00000693          	li	a3,0
8000b6b4:	00000793          	li	a5,0
8000b6b8:	00900613          	li	a2,9
8000b6bc:	00044703          	lbu	a4,0(s0)
8000b6c0:	00140593          	addi	a1,s0,1
8000b6c4:	fd070713          	addi	a4,a4,-48
8000b6c8:	08e67c63          	bleu	a4,a2,8000b760 <_svfiprintf_r+0x30c>
8000b6cc:	fa0692e3          	bnez	a3,8000b670 <_svfiprintf_r+0x21c>
8000b6d0:	00044583          	lbu	a1,0(s0)
8000b6d4:	00300613          	li	a2,3
8000b6d8:	00002517          	auipc	a0,0x2
8000b6dc:	42450513          	addi	a0,a0,1060 # 8000dafc <__sf_fake_stdout+0x28>
8000b6e0:	420010ef          	jal	ra,8000cb00 <memchr>
8000b6e4:	02050463          	beqz	a0,8000b70c <_svfiprintf_r+0x2b8>
8000b6e8:	00002797          	auipc	a5,0x2
8000b6ec:	41478793          	addi	a5,a5,1044 # 8000dafc <__sf_fake_stdout+0x28>
8000b6f0:	40f50533          	sub	a0,a0,a5
8000b6f4:	04000793          	li	a5,64
8000b6f8:	00a797b3          	sll	a5,a5,a0
8000b6fc:	01012503          	lw	a0,16(sp)
8000b700:	00140413          	addi	s0,s0,1
8000b704:	00f56533          	or	a0,a0,a5
8000b708:	00a12823          	sw	a0,16(sp)
8000b70c:	00044583          	lbu	a1,0(s0)
8000b710:	00600613          	li	a2,6
8000b714:	00002517          	auipc	a0,0x2
8000b718:	3ec50513          	addi	a0,a0,1004 # 8000db00 <__sf_fake_stdout+0x2c>
8000b71c:	00140493          	addi	s1,s0,1
8000b720:	02b10423          	sb	a1,40(sp)
8000b724:	3dc010ef          	jal	ra,8000cb00 <memchr>
8000b728:	0a050063          	beqz	a0,8000b7c8 <_svfiprintf_r+0x374>
8000b72c:	7fff5797          	auipc	a5,0x7fff5
8000b730:	8d478793          	addi	a5,a5,-1836 # 0 <__stack_top+0x7ffc1a00>
8000b734:	04079863          	bnez	a5,8000b784 <_svfiprintf_r+0x330>
8000b738:	01012703          	lw	a4,16(sp)
8000b73c:	00c12783          	lw	a5,12(sp)
8000b740:	10077713          	andi	a4,a4,256
8000b744:	02070863          	beqz	a4,8000b774 <_svfiprintf_r+0x320>
8000b748:	00478793          	addi	a5,a5,4
8000b74c:	00f12623          	sw	a5,12(sp)
8000b750:	02412783          	lw	a5,36(sp)
8000b754:	014787b3          	add	a5,a5,s4
8000b758:	02f12223          	sw	a5,36(sp)
8000b75c:	dd1ff06f          	j	8000b52c <_svfiprintf_r+0xd8>
8000b760:	036787b3          	mul	a5,a5,s6
8000b764:	00100693          	li	a3,1
8000b768:	00058413          	mv	s0,a1
8000b76c:	00e787b3          	add	a5,a5,a4
8000b770:	f4dff06f          	j	8000b6bc <_svfiprintf_r+0x268>
8000b774:	00778793          	addi	a5,a5,7
8000b778:	ff87f793          	andi	a5,a5,-8
8000b77c:	00878793          	addi	a5,a5,8
8000b780:	fcdff06f          	j	8000b74c <_svfiprintf_r+0x2f8>
8000b784:	00c10713          	addi	a4,sp,12
8000b788:	00000697          	auipc	a3,0x0
8000b78c:	b6068693          	addi	a3,a3,-1184 # 8000b2e8 <__ssputs_r>
8000b790:	00090613          	mv	a2,s2
8000b794:	01010593          	addi	a1,sp,16
8000b798:	00098513          	mv	a0,s3
8000b79c:	7fff5097          	auipc	ra,0x7fff5
8000b7a0:	864080e7          	jalr	-1948(ra) # 0 <__stack_top+0x7ffc1a00>
8000b7a4:	fff00793          	li	a5,-1
8000b7a8:	00050a13          	mv	s4,a0
8000b7ac:	faf512e3          	bne	a0,a5,8000b750 <_svfiprintf_r+0x2fc>
8000b7b0:	00c95783          	lhu	a5,12(s2)
8000b7b4:	fff00513          	li	a0,-1
8000b7b8:	0407f793          	andi	a5,a5,64
8000b7bc:	d00796e3          	bnez	a5,8000b4c8 <_svfiprintf_r+0x74>
8000b7c0:	02412503          	lw	a0,36(sp)
8000b7c4:	d05ff06f          	j	8000b4c8 <_svfiprintf_r+0x74>
8000b7c8:	00c10713          	addi	a4,sp,12
8000b7cc:	00000697          	auipc	a3,0x0
8000b7d0:	b1c68693          	addi	a3,a3,-1252 # 8000b2e8 <__ssputs_r>
8000b7d4:	00090613          	mv	a2,s2
8000b7d8:	01010593          	addi	a1,sp,16
8000b7dc:	00098513          	mv	a0,s3
8000b7e0:	640000ef          	jal	ra,8000be20 <_printf_i>
8000b7e4:	fc1ff06f          	j	8000b7a4 <_svfiprintf_r+0x350>
8000b7e8:	0000                	unimp
	...

8000b7ec <__sfputc_r>:
__sfputc_r():
8000b7ec:	00862783          	lw	a5,8(a2)
8000b7f0:	fff78793          	addi	a5,a5,-1
8000b7f4:	00f62423          	sw	a5,8(a2)
8000b7f8:	0007dc63          	bgez	a5,8000b810 <__sfputc_r+0x24>
8000b7fc:	01862703          	lw	a4,24(a2)
8000b800:	00e7c663          	blt	a5,a4,8000b80c <__sfputc_r+0x20>
8000b804:	00a00793          	li	a5,10
8000b808:	00f59463          	bne	a1,a5,8000b810 <__sfputc_r+0x24>
8000b80c:	3850006f          	j	8000c390 <__swbuf_r>
8000b810:	00062783          	lw	a5,0(a2)
8000b814:	00058513          	mv	a0,a1
8000b818:	00178713          	addi	a4,a5,1
8000b81c:	00e62023          	sw	a4,0(a2)
8000b820:	00b78023          	sb	a1,0(a5)
8000b824:	00008067          	ret
8000b828:	0000                	unimp
	...

8000b82c <__sfputs_r>:
__sfputs_r():
8000b82c:	fe010113          	addi	sp,sp,-32
8000b830:	00812c23          	sw	s0,24(sp)
8000b834:	00912a23          	sw	s1,20(sp)
8000b838:	01212823          	sw	s2,16(sp)
8000b83c:	01312623          	sw	s3,12(sp)
8000b840:	01412423          	sw	s4,8(sp)
8000b844:	00112e23          	sw	ra,28(sp)
8000b848:	00050913          	mv	s2,a0
8000b84c:	00058993          	mv	s3,a1
8000b850:	00060413          	mv	s0,a2
8000b854:	00d604b3          	add	s1,a2,a3
8000b858:	fff00a13          	li	s4,-1
8000b85c:	00941663          	bne	s0,s1,8000b868 <__sfputs_r+0x3c>
8000b860:	00000513          	li	a0,0
8000b864:	01c0006f          	j	8000b880 <__sfputs_r+0x54>
8000b868:	00044583          	lbu	a1,0(s0)
8000b86c:	00098613          	mv	a2,s3
8000b870:	00090513          	mv	a0,s2
8000b874:	f79ff0ef          	jal	ra,8000b7ec <__sfputc_r>
8000b878:	00140413          	addi	s0,s0,1
8000b87c:	ff4510e3          	bne	a0,s4,8000b85c <__sfputs_r+0x30>
8000b880:	01c12083          	lw	ra,28(sp)
8000b884:	01812403          	lw	s0,24(sp)
8000b888:	01412483          	lw	s1,20(sp)
8000b88c:	01012903          	lw	s2,16(sp)
8000b890:	00c12983          	lw	s3,12(sp)
8000b894:	00812a03          	lw	s4,8(sp)
8000b898:	02010113          	addi	sp,sp,32
8000b89c:	00008067          	ret
8000b8a0:	0000                	unimp
	...

8000b8a4 <_vfiprintf_r>:
_vfiprintf_r():
8000b8a4:	f6010113          	addi	sp,sp,-160
8000b8a8:	08912a23          	sw	s1,148(sp)
8000b8ac:	09212823          	sw	s2,144(sp)
8000b8b0:	09312623          	sw	s3,140(sp)
8000b8b4:	08112e23          	sw	ra,156(sp)
8000b8b8:	08812c23          	sw	s0,152(sp)
8000b8bc:	09412423          	sw	s4,136(sp)
8000b8c0:	09512223          	sw	s5,132(sp)
8000b8c4:	09612023          	sw	s6,128(sp)
8000b8c8:	07712e23          	sw	s7,124(sp)
8000b8cc:	07812c23          	sw	s8,120(sp)
8000b8d0:	07912a23          	sw	s9,116(sp)
8000b8d4:	00d12623          	sw	a3,12(sp)
8000b8d8:	00050993          	mv	s3,a0
8000b8dc:	00058493          	mv	s1,a1
8000b8e0:	00060913          	mv	s2,a2
8000b8e4:	00050863          	beqz	a0,8000b8f4 <_vfiprintf_r+0x50>
8000b8e8:	01852783          	lw	a5,24(a0)
8000b8ec:	00079463          	bnez	a5,8000b8f4 <_vfiprintf_r+0x50>
8000b8f0:	e30ff0ef          	jal	ra,8000af20 <__sinit>
8000b8f4:	00002797          	auipc	a5,0x2
8000b8f8:	1c078793          	addi	a5,a5,448 # 8000dab4 <__sf_fake_stdin>
8000b8fc:	12f49063          	bne	s1,a5,8000ba1c <_vfiprintf_r+0x178>
8000b900:	0049a483          	lw	s1,4(s3)
8000b904:	00c4d783          	lhu	a5,12(s1)
8000b908:	0087f793          	andi	a5,a5,8
8000b90c:	12078c63          	beqz	a5,8000ba44 <_vfiprintf_r+0x1a0>
8000b910:	0104a783          	lw	a5,16(s1)
8000b914:	12078863          	beqz	a5,8000ba44 <_vfiprintf_r+0x1a0>
8000b918:	02000793          	li	a5,32
8000b91c:	02f104a3          	sb	a5,41(sp)
8000b920:	03000793          	li	a5,48
8000b924:	02012223          	sw	zero,36(sp)
8000b928:	02f10523          	sb	a5,42(sp)
8000b92c:	02500b93          	li	s7,37
8000b930:	00002a97          	auipc	s5,0x2
8000b934:	1c4a8a93          	addi	s5,s5,452 # 8000daf4 <__sf_fake_stdout+0x20>
8000b938:	00100c13          	li	s8,1
8000b93c:	00a00b13          	li	s6,10
8000b940:	00090413          	mv	s0,s2
8000b944:	00044783          	lbu	a5,0(s0)
8000b948:	00078463          	beqz	a5,8000b950 <_vfiprintf_r+0xac>
8000b94c:	15779063          	bne	a5,s7,8000ba8c <_vfiprintf_r+0x1e8>
8000b950:	41240cb3          	sub	s9,s0,s2
8000b954:	020c8663          	beqz	s9,8000b980 <_vfiprintf_r+0xdc>
8000b958:	000c8693          	mv	a3,s9
8000b95c:	00090613          	mv	a2,s2
8000b960:	00048593          	mv	a1,s1
8000b964:	00098513          	mv	a0,s3
8000b968:	ec5ff0ef          	jal	ra,8000b82c <__sfputs_r>
8000b96c:	fff00793          	li	a5,-1
8000b970:	2cf50263          	beq	a0,a5,8000bc34 <_vfiprintf_r+0x390>
8000b974:	02412683          	lw	a3,36(sp)
8000b978:	019686b3          	add	a3,a3,s9
8000b97c:	02d12223          	sw	a3,36(sp)
8000b980:	00044783          	lbu	a5,0(s0)
8000b984:	2a078863          	beqz	a5,8000bc34 <_vfiprintf_r+0x390>
8000b988:	fff00793          	li	a5,-1
8000b98c:	00140913          	addi	s2,s0,1
8000b990:	00012823          	sw	zero,16(sp)
8000b994:	00012e23          	sw	zero,28(sp)
8000b998:	00f12a23          	sw	a5,20(sp)
8000b99c:	00012c23          	sw	zero,24(sp)
8000b9a0:	040109a3          	sb	zero,83(sp)
8000b9a4:	06012423          	sw	zero,104(sp)
8000b9a8:	00094583          	lbu	a1,0(s2)
8000b9ac:	00500613          	li	a2,5
8000b9b0:	000a8513          	mv	a0,s5
8000b9b4:	14c010ef          	jal	ra,8000cb00 <memchr>
8000b9b8:	00190413          	addi	s0,s2,1
8000b9bc:	01012783          	lw	a5,16(sp)
8000b9c0:	0c051a63          	bnez	a0,8000ba94 <_vfiprintf_r+0x1f0>
8000b9c4:	0107f713          	andi	a4,a5,16
8000b9c8:	00070663          	beqz	a4,8000b9d4 <_vfiprintf_r+0x130>
8000b9cc:	02000713          	li	a4,32
8000b9d0:	04e109a3          	sb	a4,83(sp)
8000b9d4:	0087f713          	andi	a4,a5,8
8000b9d8:	00070663          	beqz	a4,8000b9e4 <_vfiprintf_r+0x140>
8000b9dc:	02b00713          	li	a4,43
8000b9e0:	04e109a3          	sb	a4,83(sp)
8000b9e4:	00094683          	lbu	a3,0(s2)
8000b9e8:	02a00713          	li	a4,42
8000b9ec:	0ce68063          	beq	a3,a4,8000baac <_vfiprintf_r+0x208>
8000b9f0:	01c12783          	lw	a5,28(sp)
8000b9f4:	00090413          	mv	s0,s2
8000b9f8:	00000693          	li	a3,0
8000b9fc:	00900613          	li	a2,9
8000ba00:	00044703          	lbu	a4,0(s0)
8000ba04:	00140593          	addi	a1,s0,1
8000ba08:	fd070713          	addi	a4,a4,-48
8000ba0c:	10e67263          	bleu	a4,a2,8000bb10 <_vfiprintf_r+0x26c>
8000ba10:	0a068a63          	beqz	a3,8000bac4 <_vfiprintf_r+0x220>
8000ba14:	00f12e23          	sw	a5,28(sp)
8000ba18:	0ac0006f          	j	8000bac4 <_vfiprintf_r+0x220>
8000ba1c:	00002797          	auipc	a5,0x2
8000ba20:	0b878793          	addi	a5,a5,184 # 8000dad4 <__sf_fake_stdout>
8000ba24:	00f49663          	bne	s1,a5,8000ba30 <_vfiprintf_r+0x18c>
8000ba28:	0089a483          	lw	s1,8(s3)
8000ba2c:	ed9ff06f          	j	8000b904 <_vfiprintf_r+0x60>
8000ba30:	00002797          	auipc	a5,0x2
8000ba34:	06478793          	addi	a5,a5,100 # 8000da94 <__sf_fake_stderr>
8000ba38:	ecf496e3          	bne	s1,a5,8000b904 <_vfiprintf_r+0x60>
8000ba3c:	00c9a483          	lw	s1,12(s3)
8000ba40:	ec5ff06f          	j	8000b904 <_vfiprintf_r+0x60>
8000ba44:	00048593          	mv	a1,s1
8000ba48:	00098513          	mv	a0,s3
8000ba4c:	281000ef          	jal	ra,8000c4cc <__swsetup_r>
8000ba50:	ec0504e3          	beqz	a0,8000b918 <_vfiprintf_r+0x74>
8000ba54:	fff00513          	li	a0,-1
8000ba58:	09c12083          	lw	ra,156(sp)
8000ba5c:	09812403          	lw	s0,152(sp)
8000ba60:	09412483          	lw	s1,148(sp)
8000ba64:	09012903          	lw	s2,144(sp)
8000ba68:	08c12983          	lw	s3,140(sp)
8000ba6c:	08812a03          	lw	s4,136(sp)
8000ba70:	08412a83          	lw	s5,132(sp)
8000ba74:	08012b03          	lw	s6,128(sp)
8000ba78:	07c12b83          	lw	s7,124(sp)
8000ba7c:	07812c03          	lw	s8,120(sp)
8000ba80:	07412c83          	lw	s9,116(sp)
8000ba84:	0a010113          	addi	sp,sp,160
8000ba88:	00008067          	ret
8000ba8c:	00140413          	addi	s0,s0,1
8000ba90:	eb5ff06f          	j	8000b944 <_vfiprintf_r+0xa0>
8000ba94:	41550533          	sub	a0,a0,s5
8000ba98:	00ac1533          	sll	a0,s8,a0
8000ba9c:	00a7e7b3          	or	a5,a5,a0
8000baa0:	00f12823          	sw	a5,16(sp)
8000baa4:	00040913          	mv	s2,s0
8000baa8:	f01ff06f          	j	8000b9a8 <_vfiprintf_r+0x104>
8000baac:	00c12703          	lw	a4,12(sp)
8000bab0:	00470693          	addi	a3,a4,4
8000bab4:	00072703          	lw	a4,0(a4)
8000bab8:	00d12623          	sw	a3,12(sp)
8000babc:	04074063          	bltz	a4,8000bafc <_vfiprintf_r+0x258>
8000bac0:	00e12e23          	sw	a4,28(sp)
8000bac4:	00044703          	lbu	a4,0(s0)
8000bac8:	02e00793          	li	a5,46
8000bacc:	08f71463          	bne	a4,a5,8000bb54 <_vfiprintf_r+0x2b0>
8000bad0:	00144703          	lbu	a4,1(s0)
8000bad4:	02a00793          	li	a5,42
8000bad8:	04f71a63          	bne	a4,a5,8000bb2c <_vfiprintf_r+0x288>
8000badc:	00c12783          	lw	a5,12(sp)
8000bae0:	00240413          	addi	s0,s0,2
8000bae4:	00478713          	addi	a4,a5,4
8000bae8:	0007a783          	lw	a5,0(a5)
8000baec:	00e12623          	sw	a4,12(sp)
8000baf0:	0207ca63          	bltz	a5,8000bb24 <_vfiprintf_r+0x280>
8000baf4:	00f12a23          	sw	a5,20(sp)
8000baf8:	05c0006f          	j	8000bb54 <_vfiprintf_r+0x2b0>
8000bafc:	40e00733          	neg	a4,a4
8000bb00:	0027e793          	ori	a5,a5,2
8000bb04:	00e12e23          	sw	a4,28(sp)
8000bb08:	00f12823          	sw	a5,16(sp)
8000bb0c:	fb9ff06f          	j	8000bac4 <_vfiprintf_r+0x220>
8000bb10:	036787b3          	mul	a5,a5,s6
8000bb14:	00100693          	li	a3,1
8000bb18:	00058413          	mv	s0,a1
8000bb1c:	00e787b3          	add	a5,a5,a4
8000bb20:	ee1ff06f          	j	8000ba00 <_vfiprintf_r+0x15c>
8000bb24:	fff00793          	li	a5,-1
8000bb28:	fcdff06f          	j	8000baf4 <_vfiprintf_r+0x250>
8000bb2c:	00140413          	addi	s0,s0,1
8000bb30:	00012a23          	sw	zero,20(sp)
8000bb34:	00000693          	li	a3,0
8000bb38:	00000793          	li	a5,0
8000bb3c:	00900613          	li	a2,9
8000bb40:	00044703          	lbu	a4,0(s0)
8000bb44:	00140593          	addi	a1,s0,1
8000bb48:	fd070713          	addi	a4,a4,-48
8000bb4c:	08e67c63          	bleu	a4,a2,8000bbe4 <_vfiprintf_r+0x340>
8000bb50:	fa0692e3          	bnez	a3,8000baf4 <_vfiprintf_r+0x250>
8000bb54:	00044583          	lbu	a1,0(s0)
8000bb58:	00300613          	li	a2,3
8000bb5c:	00002517          	auipc	a0,0x2
8000bb60:	fa050513          	addi	a0,a0,-96 # 8000dafc <__sf_fake_stdout+0x28>
8000bb64:	79d000ef          	jal	ra,8000cb00 <memchr>
8000bb68:	02050463          	beqz	a0,8000bb90 <_vfiprintf_r+0x2ec>
8000bb6c:	00002797          	auipc	a5,0x2
8000bb70:	f9078793          	addi	a5,a5,-112 # 8000dafc <__sf_fake_stdout+0x28>
8000bb74:	40f50533          	sub	a0,a0,a5
8000bb78:	04000793          	li	a5,64
8000bb7c:	00a797b3          	sll	a5,a5,a0
8000bb80:	01012503          	lw	a0,16(sp)
8000bb84:	00140413          	addi	s0,s0,1
8000bb88:	00f56533          	or	a0,a0,a5
8000bb8c:	00a12823          	sw	a0,16(sp)
8000bb90:	00044583          	lbu	a1,0(s0)
8000bb94:	00600613          	li	a2,6
8000bb98:	00002517          	auipc	a0,0x2
8000bb9c:	f6850513          	addi	a0,a0,-152 # 8000db00 <__sf_fake_stdout+0x2c>
8000bba0:	00140913          	addi	s2,s0,1
8000bba4:	02b10423          	sb	a1,40(sp)
8000bba8:	759000ef          	jal	ra,8000cb00 <memchr>
8000bbac:	08050e63          	beqz	a0,8000bc48 <_vfiprintf_r+0x3a4>
8000bbb0:	7fff4797          	auipc	a5,0x7fff4
8000bbb4:	45078793          	addi	a5,a5,1104 # 0 <__stack_top+0x7ffc1a00>
8000bbb8:	04079863          	bnez	a5,8000bc08 <_vfiprintf_r+0x364>
8000bbbc:	01012703          	lw	a4,16(sp)
8000bbc0:	00c12783          	lw	a5,12(sp)
8000bbc4:	10077713          	andi	a4,a4,256
8000bbc8:	02070863          	beqz	a4,8000bbf8 <_vfiprintf_r+0x354>
8000bbcc:	00478793          	addi	a5,a5,4
8000bbd0:	00f12623          	sw	a5,12(sp)
8000bbd4:	02412783          	lw	a5,36(sp)
8000bbd8:	014787b3          	add	a5,a5,s4
8000bbdc:	02f12223          	sw	a5,36(sp)
8000bbe0:	d61ff06f          	j	8000b940 <_vfiprintf_r+0x9c>
8000bbe4:	036787b3          	mul	a5,a5,s6
8000bbe8:	00100693          	li	a3,1
8000bbec:	00058413          	mv	s0,a1
8000bbf0:	00e787b3          	add	a5,a5,a4
8000bbf4:	f4dff06f          	j	8000bb40 <_vfiprintf_r+0x29c>
8000bbf8:	00778793          	addi	a5,a5,7
8000bbfc:	ff87f793          	andi	a5,a5,-8
8000bc00:	00878793          	addi	a5,a5,8
8000bc04:	fcdff06f          	j	8000bbd0 <_vfiprintf_r+0x32c>
8000bc08:	00c10713          	addi	a4,sp,12
8000bc0c:	00000697          	auipc	a3,0x0
8000bc10:	c2068693          	addi	a3,a3,-992 # 8000b82c <__sfputs_r>
8000bc14:	00048613          	mv	a2,s1
8000bc18:	01010593          	addi	a1,sp,16
8000bc1c:	00098513          	mv	a0,s3
8000bc20:	7fff4097          	auipc	ra,0x7fff4
8000bc24:	3e0080e7          	jalr	992(ra) # 0 <__stack_top+0x7ffc1a00>
8000bc28:	fff00793          	li	a5,-1
8000bc2c:	00050a13          	mv	s4,a0
8000bc30:	faf512e3          	bne	a0,a5,8000bbd4 <_vfiprintf_r+0x330>
8000bc34:	00c4d783          	lhu	a5,12(s1)
8000bc38:	0407f793          	andi	a5,a5,64
8000bc3c:	e0079ce3          	bnez	a5,8000ba54 <_vfiprintf_r+0x1b0>
8000bc40:	02412503          	lw	a0,36(sp)
8000bc44:	e15ff06f          	j	8000ba58 <_vfiprintf_r+0x1b4>
8000bc48:	00c10713          	addi	a4,sp,12
8000bc4c:	00000697          	auipc	a3,0x0
8000bc50:	be068693          	addi	a3,a3,-1056 # 8000b82c <__sfputs_r>
8000bc54:	00048613          	mv	a2,s1
8000bc58:	01010593          	addi	a1,sp,16
8000bc5c:	00098513          	mv	a0,s3
8000bc60:	1c0000ef          	jal	ra,8000be20 <_printf_i>
8000bc64:	fc5ff06f          	j	8000bc28 <_vfiprintf_r+0x384>
8000bc68:	0000                	unimp
	...

8000bc6c <_printf_common>:
_printf_common():
8000bc6c:	fd010113          	addi	sp,sp,-48
8000bc70:	01512a23          	sw	s5,20(sp)
8000bc74:	0105a783          	lw	a5,16(a1)
8000bc78:	00070a93          	mv	s5,a4
8000bc7c:	0085a703          	lw	a4,8(a1)
8000bc80:	02812423          	sw	s0,40(sp)
8000bc84:	02912223          	sw	s1,36(sp)
8000bc88:	01312e23          	sw	s3,28(sp)
8000bc8c:	01412c23          	sw	s4,24(sp)
8000bc90:	02112623          	sw	ra,44(sp)
8000bc94:	03212023          	sw	s2,32(sp)
8000bc98:	01612823          	sw	s6,16(sp)
8000bc9c:	01712623          	sw	s7,12(sp)
8000bca0:	00050993          	mv	s3,a0
8000bca4:	00058413          	mv	s0,a1
8000bca8:	00060493          	mv	s1,a2
8000bcac:	00068a13          	mv	s4,a3
8000bcb0:	00e7d463          	ble	a4,a5,8000bcb8 <_printf_common+0x4c>
8000bcb4:	00070793          	mv	a5,a4
8000bcb8:	00f4a023          	sw	a5,0(s1)
8000bcbc:	04344703          	lbu	a4,67(s0)
8000bcc0:	00070663          	beqz	a4,8000bccc <_printf_common+0x60>
8000bcc4:	00178793          	addi	a5,a5,1
8000bcc8:	00f4a023          	sw	a5,0(s1)
8000bccc:	00042783          	lw	a5,0(s0)
8000bcd0:	0207f793          	andi	a5,a5,32
8000bcd4:	00078863          	beqz	a5,8000bce4 <_printf_common+0x78>
8000bcd8:	0004a783          	lw	a5,0(s1)
8000bcdc:	00278793          	addi	a5,a5,2
8000bce0:	00f4a023          	sw	a5,0(s1)
8000bce4:	00042903          	lw	s2,0(s0)
8000bce8:	00697913          	andi	s2,s2,6
8000bcec:	00091e63          	bnez	s2,8000bd08 <_printf_common+0x9c>
8000bcf0:	01940b13          	addi	s6,s0,25
8000bcf4:	fff00b93          	li	s7,-1
8000bcf8:	00c42783          	lw	a5,12(s0)
8000bcfc:	0004a703          	lw	a4,0(s1)
8000bd00:	40e787b3          	sub	a5,a5,a4
8000bd04:	08f94263          	blt	s2,a5,8000bd88 <_printf_common+0x11c>
8000bd08:	00042783          	lw	a5,0(s0)
8000bd0c:	04344683          	lbu	a3,67(s0)
8000bd10:	0207f793          	andi	a5,a5,32
8000bd14:	00d036b3          	snez	a3,a3
8000bd18:	0c079063          	bnez	a5,8000bdd8 <_printf_common+0x16c>
8000bd1c:	04340613          	addi	a2,s0,67
8000bd20:	000a0593          	mv	a1,s4
8000bd24:	00098513          	mv	a0,s3
8000bd28:	000a80e7          	jalr	s5
8000bd2c:	fff00793          	li	a5,-1
8000bd30:	06f50863          	beq	a0,a5,8000bda0 <_printf_common+0x134>
8000bd34:	00042783          	lw	a5,0(s0)
8000bd38:	00400613          	li	a2,4
8000bd3c:	0004a703          	lw	a4,0(s1)
8000bd40:	0067f793          	andi	a5,a5,6
8000bd44:	00c42683          	lw	a3,12(s0)
8000bd48:	00000493          	li	s1,0
8000bd4c:	00c79863          	bne	a5,a2,8000bd5c <_printf_common+0xf0>
8000bd50:	40e684b3          	sub	s1,a3,a4
8000bd54:	0004d463          	bgez	s1,8000bd5c <_printf_common+0xf0>
8000bd58:	00000493          	li	s1,0
8000bd5c:	00842783          	lw	a5,8(s0)
8000bd60:	01042703          	lw	a4,16(s0)
8000bd64:	00f75663          	ble	a5,a4,8000bd70 <_printf_common+0x104>
8000bd68:	40e787b3          	sub	a5,a5,a4
8000bd6c:	00f484b3          	add	s1,s1,a5
8000bd70:	00000913          	li	s2,0
8000bd74:	01a40413          	addi	s0,s0,26
8000bd78:	fff00b13          	li	s6,-1
8000bd7c:	09249063          	bne	s1,s2,8000bdfc <_printf_common+0x190>
8000bd80:	00000513          	li	a0,0
8000bd84:	0200006f          	j	8000bda4 <_printf_common+0x138>
8000bd88:	00100693          	li	a3,1
8000bd8c:	000b0613          	mv	a2,s6
8000bd90:	000a0593          	mv	a1,s4
8000bd94:	00098513          	mv	a0,s3
8000bd98:	000a80e7          	jalr	s5
8000bd9c:	03751a63          	bne	a0,s7,8000bdd0 <_printf_common+0x164>
8000bda0:	fff00513          	li	a0,-1
8000bda4:	02c12083          	lw	ra,44(sp)
8000bda8:	02812403          	lw	s0,40(sp)
8000bdac:	02412483          	lw	s1,36(sp)
8000bdb0:	02012903          	lw	s2,32(sp)
8000bdb4:	01c12983          	lw	s3,28(sp)
8000bdb8:	01812a03          	lw	s4,24(sp)
8000bdbc:	01412a83          	lw	s5,20(sp)
8000bdc0:	01012b03          	lw	s6,16(sp)
8000bdc4:	00c12b83          	lw	s7,12(sp)
8000bdc8:	03010113          	addi	sp,sp,48
8000bdcc:	00008067          	ret
8000bdd0:	00190913          	addi	s2,s2,1
8000bdd4:	f25ff06f          	j	8000bcf8 <_printf_common+0x8c>
8000bdd8:	00d40733          	add	a4,s0,a3
8000bddc:	03000613          	li	a2,48
8000bde0:	04c701a3          	sb	a2,67(a4)
8000bde4:	04544703          	lbu	a4,69(s0)
8000bde8:	00168793          	addi	a5,a3,1
8000bdec:	00f407b3          	add	a5,s0,a5
8000bdf0:	00268693          	addi	a3,a3,2
8000bdf4:	04e781a3          	sb	a4,67(a5)
8000bdf8:	f25ff06f          	j	8000bd1c <_printf_common+0xb0>
8000bdfc:	00100693          	li	a3,1
8000be00:	00040613          	mv	a2,s0
8000be04:	000a0593          	mv	a1,s4
8000be08:	00098513          	mv	a0,s3
8000be0c:	000a80e7          	jalr	s5
8000be10:	f96508e3          	beq	a0,s6,8000bda0 <_printf_common+0x134>
8000be14:	00190913          	addi	s2,s2,1
8000be18:	f65ff06f          	j	8000bd7c <_printf_common+0x110>
8000be1c:	0000                	unimp
	...

8000be20 <_printf_i>:
_printf_i():
8000be20:	fd010113          	addi	sp,sp,-48
8000be24:	02812423          	sw	s0,40(sp)
8000be28:	03212023          	sw	s2,32(sp)
8000be2c:	01312e23          	sw	s3,28(sp)
8000be30:	01412c23          	sw	s4,24(sp)
8000be34:	02112623          	sw	ra,44(sp)
8000be38:	02912223          	sw	s1,36(sp)
8000be3c:	01512a23          	sw	s5,20(sp)
8000be40:	01612823          	sw	s6,16(sp)
8000be44:	00068a13          	mv	s4,a3
8000be48:	0185c683          	lbu	a3,24(a1)
8000be4c:	06e00793          	li	a5,110
8000be50:	00060993          	mv	s3,a2
8000be54:	00050913          	mv	s2,a0
8000be58:	00058413          	mv	s0,a1
8000be5c:	04358613          	addi	a2,a1,67
8000be60:	1ef68c63          	beq	a3,a5,8000c058 <_printf_i+0x238>
8000be64:	06d7ea63          	bltu	a5,a3,8000bed8 <_printf_i+0xb8>
8000be68:	06300793          	li	a5,99
8000be6c:	0af68e63          	beq	a3,a5,8000bf28 <_printf_i+0x108>
8000be70:	00d7ee63          	bltu	a5,a3,8000be8c <_printf_i+0x6c>
8000be74:	22068063          	beqz	a3,8000c094 <_printf_i+0x274>
8000be78:	05800793          	li	a5,88
8000be7c:	16f68263          	beq	a3,a5,8000bfe0 <_printf_i+0x1c0>
8000be80:	04240493          	addi	s1,s0,66
8000be84:	04d40123          	sb	a3,66(s0)
8000be88:	0b80006f          	j	8000bf40 <_printf_i+0x120>
8000be8c:	06400793          	li	a5,100
8000be90:	00f68663          	beq	a3,a5,8000be9c <_printf_i+0x7c>
8000be94:	06900793          	li	a5,105
8000be98:	fef694e3          	bne	a3,a5,8000be80 <_printf_i+0x60>
8000be9c:	00042783          	lw	a5,0(s0)
8000bea0:	00072503          	lw	a0,0(a4)
8000bea4:	0807f693          	andi	a3,a5,128
8000bea8:	00450593          	addi	a1,a0,4
8000beac:	08068e63          	beqz	a3,8000bf48 <_printf_i+0x128>
8000beb0:	00052783          	lw	a5,0(a0)
8000beb4:	00b72023          	sw	a1,0(a4)
8000beb8:	0007d863          	bgez	a5,8000bec8 <_printf_i+0xa8>
8000bebc:	02d00713          	li	a4,45
8000bec0:	40f007b3          	neg	a5,a5
8000bec4:	04e401a3          	sb	a4,67(s0)
8000bec8:	00002697          	auipc	a3,0x2
8000becc:	c4068693          	addi	a3,a3,-960 # 8000db08 <__sf_fake_stdout+0x34>
8000bed0:	00a00713          	li	a4,10
8000bed4:	0d80006f          	j	8000bfac <_printf_i+0x18c>
8000bed8:	07300793          	li	a5,115
8000bedc:	1cf68263          	beq	a3,a5,8000c0a0 <_printf_i+0x280>
8000bee0:	02d7e263          	bltu	a5,a3,8000bf04 <_printf_i+0xe4>
8000bee4:	06f00793          	li	a5,111
8000bee8:	06f68e63          	beq	a3,a5,8000bf64 <_printf_i+0x144>
8000beec:	07000793          	li	a5,112
8000bef0:	f8f698e3          	bne	a3,a5,8000be80 <_printf_i+0x60>
8000bef4:	0005a783          	lw	a5,0(a1)
8000bef8:	0207e793          	ori	a5,a5,32
8000befc:	00f5a023          	sw	a5,0(a1)
8000bf00:	0140006f          	j	8000bf14 <_printf_i+0xf4>
8000bf04:	07500793          	li	a5,117
8000bf08:	04f68e63          	beq	a3,a5,8000bf64 <_printf_i+0x144>
8000bf0c:	07800793          	li	a5,120
8000bf10:	f6f698e3          	bne	a3,a5,8000be80 <_printf_i+0x60>
8000bf14:	07800793          	li	a5,120
8000bf18:	04f402a3          	sb	a5,69(s0)
8000bf1c:	00002697          	auipc	a3,0x2
8000bf20:	c0068693          	addi	a3,a3,-1024 # 8000db1c <__sf_fake_stdout+0x48>
8000bf24:	0c80006f          	j	8000bfec <_printf_i+0x1cc>
8000bf28:	00072783          	lw	a5,0(a4)
8000bf2c:	04258493          	addi	s1,a1,66
8000bf30:	00478693          	addi	a3,a5,4
8000bf34:	0007a783          	lw	a5,0(a5)
8000bf38:	00d72023          	sw	a3,0(a4)
8000bf3c:	04f58123          	sb	a5,66(a1)
8000bf40:	00100793          	li	a5,1
8000bf44:	18c0006f          	j	8000c0d0 <_printf_i+0x2b0>
8000bf48:	0407f693          	andi	a3,a5,64
8000bf4c:	00052783          	lw	a5,0(a0)
8000bf50:	00b72023          	sw	a1,0(a4)
8000bf54:	f60682e3          	beqz	a3,8000beb8 <_printf_i+0x98>
8000bf58:	01079793          	slli	a5,a5,0x10
8000bf5c:	4107d793          	srai	a5,a5,0x10
8000bf60:	f59ff06f          	j	8000beb8 <_printf_i+0x98>
8000bf64:	00042583          	lw	a1,0(s0)
8000bf68:	00072783          	lw	a5,0(a4)
8000bf6c:	0805f813          	andi	a6,a1,128
8000bf70:	00478513          	addi	a0,a5,4
8000bf74:	00080863          	beqz	a6,8000bf84 <_printf_i+0x164>
8000bf78:	00a72023          	sw	a0,0(a4)
8000bf7c:	0007a783          	lw	a5,0(a5)
8000bf80:	0140006f          	j	8000bf94 <_printf_i+0x174>
8000bf84:	0405f593          	andi	a1,a1,64
8000bf88:	00a72023          	sw	a0,0(a4)
8000bf8c:	fe0588e3          	beqz	a1,8000bf7c <_printf_i+0x15c>
8000bf90:	0007d783          	lhu	a5,0(a5)
8000bf94:	06f00713          	li	a4,111
8000bf98:	0ae69863          	bne	a3,a4,8000c048 <_printf_i+0x228>
8000bf9c:	00002697          	auipc	a3,0x2
8000bfa0:	b6c68693          	addi	a3,a3,-1172 # 8000db08 <__sf_fake_stdout+0x34>
8000bfa4:	00800713          	li	a4,8
8000bfa8:	040401a3          	sb	zero,67(s0)
8000bfac:	00442583          	lw	a1,4(s0)
8000bfb0:	00b42423          	sw	a1,8(s0)
8000bfb4:	1a05c063          	bltz	a1,8000c154 <_printf_i+0x334>
8000bfb8:	00042503          	lw	a0,0(s0)
8000bfbc:	ffb57513          	andi	a0,a0,-5
8000bfc0:	00a42023          	sw	a0,0(s0)
8000bfc4:	18079a63          	bnez	a5,8000c158 <_printf_i+0x338>
8000bfc8:	00060493          	mv	s1,a2
8000bfcc:	1a058663          	beqz	a1,8000c178 <_printf_i+0x358>
8000bfd0:	0006c783          	lbu	a5,0(a3)
8000bfd4:	04240493          	addi	s1,s0,66
8000bfd8:	04f40123          	sb	a5,66(s0)
8000bfdc:	19c0006f          	j	8000c178 <_printf_i+0x358>
8000bfe0:	04d582a3          	sb	a3,69(a1)
8000bfe4:	00002697          	auipc	a3,0x2
8000bfe8:	b2468693          	addi	a3,a3,-1244 # 8000db08 <__sf_fake_stdout+0x34>
8000bfec:	00042583          	lw	a1,0(s0)
8000bff0:	00072783          	lw	a5,0(a4)
8000bff4:	0805f813          	andi	a6,a1,128
8000bff8:	00478513          	addi	a0,a5,4
8000bffc:	0007a783          	lw	a5,0(a5)
8000c000:	02080863          	beqz	a6,8000c030 <_printf_i+0x210>
8000c004:	00a72023          	sw	a0,0(a4)
8000c008:	0015f713          	andi	a4,a1,1
8000c00c:	00070663          	beqz	a4,8000c018 <_printf_i+0x1f8>
8000c010:	0205e593          	ori	a1,a1,32
8000c014:	00b42023          	sw	a1,0(s0)
8000c018:	01000713          	li	a4,16
8000c01c:	f80796e3          	bnez	a5,8000bfa8 <_printf_i+0x188>
8000c020:	00042583          	lw	a1,0(s0)
8000c024:	fdf5f593          	andi	a1,a1,-33
8000c028:	00b42023          	sw	a1,0(s0)
8000c02c:	f7dff06f          	j	8000bfa8 <_printf_i+0x188>
8000c030:	0405f813          	andi	a6,a1,64
8000c034:	00a72023          	sw	a0,0(a4)
8000c038:	fc0808e3          	beqz	a6,8000c008 <_printf_i+0x1e8>
8000c03c:	01079793          	slli	a5,a5,0x10
8000c040:	0107d793          	srli	a5,a5,0x10
8000c044:	fc5ff06f          	j	8000c008 <_printf_i+0x1e8>
8000c048:	00002697          	auipc	a3,0x2
8000c04c:	ac068693          	addi	a3,a3,-1344 # 8000db08 <__sf_fake_stdout+0x34>
8000c050:	00a00713          	li	a4,10
8000c054:	f55ff06f          	j	8000bfa8 <_printf_i+0x188>
8000c058:	0005a683          	lw	a3,0(a1)
8000c05c:	00072783          	lw	a5,0(a4)
8000c060:	0145a583          	lw	a1,20(a1)
8000c064:	0806f813          	andi	a6,a3,128
8000c068:	00478513          	addi	a0,a5,4
8000c06c:	00080a63          	beqz	a6,8000c080 <_printf_i+0x260>
8000c070:	00a72023          	sw	a0,0(a4)
8000c074:	0007a783          	lw	a5,0(a5)
8000c078:	00b7a023          	sw	a1,0(a5)
8000c07c:	0180006f          	j	8000c094 <_printf_i+0x274>
8000c080:	00a72023          	sw	a0,0(a4)
8000c084:	0406f693          	andi	a3,a3,64
8000c088:	0007a783          	lw	a5,0(a5)
8000c08c:	fe0686e3          	beqz	a3,8000c078 <_printf_i+0x258>
8000c090:	00b79023          	sh	a1,0(a5)
8000c094:	00042823          	sw	zero,16(s0)
8000c098:	00060493          	mv	s1,a2
8000c09c:	1100006f          	j	8000c1ac <_printf_i+0x38c>
8000c0a0:	00072783          	lw	a5,0(a4)
8000c0a4:	0045a603          	lw	a2,4(a1)
8000c0a8:	00000593          	li	a1,0
8000c0ac:	00478693          	addi	a3,a5,4
8000c0b0:	00d72023          	sw	a3,0(a4)
8000c0b4:	0007a483          	lw	s1,0(a5)
8000c0b8:	00048513          	mv	a0,s1
8000c0bc:	245000ef          	jal	ra,8000cb00 <memchr>
8000c0c0:	00050663          	beqz	a0,8000c0cc <_printf_i+0x2ac>
8000c0c4:	40950533          	sub	a0,a0,s1
8000c0c8:	00a42223          	sw	a0,4(s0)
8000c0cc:	00442783          	lw	a5,4(s0)
8000c0d0:	00f42823          	sw	a5,16(s0)
8000c0d4:	040401a3          	sb	zero,67(s0)
8000c0d8:	0d40006f          	j	8000c1ac <_printf_i+0x38c>
8000c0dc:	01042683          	lw	a3,16(s0)
8000c0e0:	00048613          	mv	a2,s1
8000c0e4:	00098593          	mv	a1,s3
8000c0e8:	00090513          	mv	a0,s2
8000c0ec:	000a00e7          	jalr	s4
8000c0f0:	0d550e63          	beq	a0,s5,8000c1cc <_printf_i+0x3ac>
8000c0f4:	00042783          	lw	a5,0(s0)
8000c0f8:	0027f793          	andi	a5,a5,2
8000c0fc:	04079463          	bnez	a5,8000c144 <_printf_i+0x324>
8000c100:	00c12783          	lw	a5,12(sp)
8000c104:	00c42503          	lw	a0,12(s0)
8000c108:	0cf55463          	ble	a5,a0,8000c1d0 <_printf_i+0x3b0>
8000c10c:	00078513          	mv	a0,a5
8000c110:	0c00006f          	j	8000c1d0 <_printf_i+0x3b0>
8000c114:	00100693          	li	a3,1
8000c118:	000a8613          	mv	a2,s5
8000c11c:	00098593          	mv	a1,s3
8000c120:	00090513          	mv	a0,s2
8000c124:	000a00e7          	jalr	s4
8000c128:	0b650263          	beq	a0,s6,8000c1cc <_printf_i+0x3ac>
8000c12c:	00148493          	addi	s1,s1,1
8000c130:	00c42783          	lw	a5,12(s0)
8000c134:	00c12703          	lw	a4,12(sp)
8000c138:	40e787b3          	sub	a5,a5,a4
8000c13c:	fcf4cce3          	blt	s1,a5,8000c114 <_printf_i+0x2f4>
8000c140:	fc1ff06f          	j	8000c100 <_printf_i+0x2e0>
8000c144:	00000493          	li	s1,0
8000c148:	01940a93          	addi	s5,s0,25
8000c14c:	fff00b13          	li	s6,-1
8000c150:	fe1ff06f          	j	8000c130 <_printf_i+0x310>
8000c154:	e6078ee3          	beqz	a5,8000bfd0 <_printf_i+0x1b0>
8000c158:	00060493          	mv	s1,a2
8000c15c:	02e7f5b3          	remu	a1,a5,a4
8000c160:	fff48493          	addi	s1,s1,-1
8000c164:	02e7d7b3          	divu	a5,a5,a4
8000c168:	00b685b3          	add	a1,a3,a1
8000c16c:	0005c583          	lbu	a1,0(a1)
8000c170:	00b48023          	sb	a1,0(s1)
8000c174:	fe0794e3          	bnez	a5,8000c15c <_printf_i+0x33c>
8000c178:	00800793          	li	a5,8
8000c17c:	02f71463          	bne	a4,a5,8000c1a4 <_printf_i+0x384>
8000c180:	00042783          	lw	a5,0(s0)
8000c184:	0017f793          	andi	a5,a5,1
8000c188:	00078e63          	beqz	a5,8000c1a4 <_printf_i+0x384>
8000c18c:	00442703          	lw	a4,4(s0)
8000c190:	01042783          	lw	a5,16(s0)
8000c194:	00e7c863          	blt	a5,a4,8000c1a4 <_printf_i+0x384>
8000c198:	03000793          	li	a5,48
8000c19c:	fef48fa3          	sb	a5,-1(s1)
8000c1a0:	fff48493          	addi	s1,s1,-1
8000c1a4:	40960633          	sub	a2,a2,s1
8000c1a8:	00c42823          	sw	a2,16(s0)
8000c1ac:	000a0713          	mv	a4,s4
8000c1b0:	00098693          	mv	a3,s3
8000c1b4:	00c10613          	addi	a2,sp,12
8000c1b8:	00040593          	mv	a1,s0
8000c1bc:	00090513          	mv	a0,s2
8000c1c0:	aadff0ef          	jal	ra,8000bc6c <_printf_common>
8000c1c4:	fff00a93          	li	s5,-1
8000c1c8:	f1551ae3          	bne	a0,s5,8000c0dc <_printf_i+0x2bc>
8000c1cc:	fff00513          	li	a0,-1
8000c1d0:	02c12083          	lw	ra,44(sp)
8000c1d4:	02812403          	lw	s0,40(sp)
8000c1d8:	02412483          	lw	s1,36(sp)
8000c1dc:	02012903          	lw	s2,32(sp)
8000c1e0:	01c12983          	lw	s3,28(sp)
8000c1e4:	01812a03          	lw	s4,24(sp)
8000c1e8:	01412a83          	lw	s5,20(sp)
8000c1ec:	01012b03          	lw	s6,16(sp)
8000c1f0:	03010113          	addi	sp,sp,48
8000c1f4:	00008067          	ret
8000c1f8:	0000                	unimp
	...

8000c1fc <_sbrk_r>:
_sbrk_r():
8000c1fc:	ff010113          	addi	sp,sp,-16
8000c200:	00812423          	sw	s0,8(sp)
8000c204:	00050413          	mv	s0,a0
8000c208:	00058513          	mv	a0,a1
8000c20c:	00002797          	auipc	a5,0x2
8000c210:	fa07aa23          	sw	zero,-76(a5) # 8000e1c0 <errno>
8000c214:	00112623          	sw	ra,12(sp)
8000c218:	a45f40ef          	jal	ra,80000c5c <_sbrk>
8000c21c:	fff00793          	li	a5,-1
8000c220:	00f51c63          	bne	a0,a5,8000c238 <_sbrk_r+0x3c>
8000c224:	00002797          	auipc	a5,0x2
8000c228:	f9c78793          	addi	a5,a5,-100 # 8000e1c0 <errno>
8000c22c:	0007a783          	lw	a5,0(a5)
8000c230:	00078463          	beqz	a5,8000c238 <_sbrk_r+0x3c>
8000c234:	00f42023          	sw	a5,0(s0)
8000c238:	00c12083          	lw	ra,12(sp)
8000c23c:	00812403          	lw	s0,8(sp)
8000c240:	01010113          	addi	sp,sp,16
8000c244:	00008067          	ret
8000c248:	0000                	unimp
	...

8000c24c <__sread>:
__sread():
8000c24c:	ff010113          	addi	sp,sp,-16
8000c250:	00812423          	sw	s0,8(sp)
8000c254:	00058413          	mv	s0,a1
8000c258:	00e59583          	lh	a1,14(a1)
8000c25c:	00112623          	sw	ra,12(sp)
8000c260:	2dd000ef          	jal	ra,8000cd3c <_read_r>
8000c264:	02054063          	bltz	a0,8000c284 <__sread+0x38>
8000c268:	05442783          	lw	a5,84(s0)
8000c26c:	00a787b3          	add	a5,a5,a0
8000c270:	04f42a23          	sw	a5,84(s0)
8000c274:	00c12083          	lw	ra,12(sp)
8000c278:	00812403          	lw	s0,8(sp)
8000c27c:	01010113          	addi	sp,sp,16
8000c280:	00008067          	ret
8000c284:	00c45783          	lhu	a5,12(s0)
8000c288:	fffff737          	lui	a4,0xfffff
8000c28c:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack_top+0x7ffc09ff>
8000c290:	00e7f7b3          	and	a5,a5,a4
8000c294:	00f41623          	sh	a5,12(s0)
8000c298:	fddff06f          	j	8000c274 <__sread+0x28>
8000c29c:	0000                	unimp
	...

8000c2a0 <__swrite>:
__swrite():
8000c2a0:	00c5d783          	lhu	a5,12(a1)
8000c2a4:	fe010113          	addi	sp,sp,-32
8000c2a8:	00812c23          	sw	s0,24(sp)
8000c2ac:	00912a23          	sw	s1,20(sp)
8000c2b0:	01212823          	sw	s2,16(sp)
8000c2b4:	01312623          	sw	s3,12(sp)
8000c2b8:	00112e23          	sw	ra,28(sp)
8000c2bc:	1007f793          	andi	a5,a5,256
8000c2c0:	00050493          	mv	s1,a0
8000c2c4:	00058413          	mv	s0,a1
8000c2c8:	00060913          	mv	s2,a2
8000c2cc:	00068993          	mv	s3,a3
8000c2d0:	00078a63          	beqz	a5,8000c2e4 <__swrite+0x44>
8000c2d4:	00e59583          	lh	a1,14(a1)
8000c2d8:	00200693          	li	a3,2
8000c2dc:	00000613          	li	a2,0
8000c2e0:	644000ef          	jal	ra,8000c924 <_lseek_r>
8000c2e4:	00c45783          	lhu	a5,12(s0)
8000c2e8:	fffff737          	lui	a4,0xfffff
8000c2ec:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack_top+0x7ffc09ff>
8000c2f0:	00e7f7b3          	and	a5,a5,a4
8000c2f4:	00f41623          	sh	a5,12(s0)
8000c2f8:	00e41583          	lh	a1,14(s0)
8000c2fc:	01812403          	lw	s0,24(sp)
8000c300:	01c12083          	lw	ra,28(sp)
8000c304:	00098693          	mv	a3,s3
8000c308:	00090613          	mv	a2,s2
8000c30c:	00c12983          	lw	s3,12(sp)
8000c310:	01012903          	lw	s2,16(sp)
8000c314:	00048513          	mv	a0,s1
8000c318:	01412483          	lw	s1,20(sp)
8000c31c:	02010113          	addi	sp,sp,32
8000c320:	a9dfe06f          	j	8000adbc <_write_r>
8000c324:	0000                	unimp
	...

8000c328 <__sseek>:
__sseek():
8000c328:	ff010113          	addi	sp,sp,-16
8000c32c:	00812423          	sw	s0,8(sp)
8000c330:	00058413          	mv	s0,a1
8000c334:	00e59583          	lh	a1,14(a1)
8000c338:	00112623          	sw	ra,12(sp)
8000c33c:	5e8000ef          	jal	ra,8000c924 <_lseek_r>
8000c340:	fff00793          	li	a5,-1
8000c344:	00c45703          	lhu	a4,12(s0)
8000c348:	02f51263          	bne	a0,a5,8000c36c <__sseek+0x44>
8000c34c:	fffff7b7          	lui	a5,0xfffff
8000c350:	fff78793          	addi	a5,a5,-1 # ffffefff <__stack_top+0x7ffc09ff>
8000c354:	00e7f7b3          	and	a5,a5,a4
8000c358:	00f41623          	sh	a5,12(s0)
8000c35c:	00c12083          	lw	ra,12(sp)
8000c360:	00812403          	lw	s0,8(sp)
8000c364:	01010113          	addi	sp,sp,16
8000c368:	00008067          	ret
8000c36c:	000017b7          	lui	a5,0x1
8000c370:	00f767b3          	or	a5,a4,a5
8000c374:	00f41623          	sh	a5,12(s0)
8000c378:	04a42a23          	sw	a0,84(s0)
8000c37c:	fe1ff06f          	j	8000c35c <__sseek+0x34>
8000c380:	0000                	unimp
	...

8000c384 <__sclose>:
__sclose():
8000c384:	00e59583          	lh	a1,14(a1)
8000c388:	2c80006f          	j	8000c650 <_close_r>
8000c38c:	0000                	unimp
	...

8000c390 <__swbuf_r>:
__swbuf_r():
8000c390:	fe010113          	addi	sp,sp,-32
8000c394:	00812c23          	sw	s0,24(sp)
8000c398:	00912a23          	sw	s1,20(sp)
8000c39c:	01212823          	sw	s2,16(sp)
8000c3a0:	00112e23          	sw	ra,28(sp)
8000c3a4:	01312623          	sw	s3,12(sp)
8000c3a8:	00050493          	mv	s1,a0
8000c3ac:	00058913          	mv	s2,a1
8000c3b0:	00060413          	mv	s0,a2
8000c3b4:	00050863          	beqz	a0,8000c3c4 <__swbuf_r+0x34>
8000c3b8:	01852783          	lw	a5,24(a0)
8000c3bc:	00079463          	bnez	a5,8000c3c4 <__swbuf_r+0x34>
8000c3c0:	b61fe0ef          	jal	ra,8000af20 <__sinit>
8000c3c4:	00001797          	auipc	a5,0x1
8000c3c8:	6f078793          	addi	a5,a5,1776 # 8000dab4 <__sf_fake_stdin>
8000c3cc:	0af41063          	bne	s0,a5,8000c46c <__swbuf_r+0xdc>
8000c3d0:	0044a403          	lw	s0,4(s1)
8000c3d4:	01842783          	lw	a5,24(s0)
8000c3d8:	00f42423          	sw	a5,8(s0)
8000c3dc:	00c45783          	lhu	a5,12(s0)
8000c3e0:	0087f793          	andi	a5,a5,8
8000c3e4:	0a078863          	beqz	a5,8000c494 <__swbuf_r+0x104>
8000c3e8:	01042783          	lw	a5,16(s0)
8000c3ec:	0a078463          	beqz	a5,8000c494 <__swbuf_r+0x104>
8000c3f0:	01042783          	lw	a5,16(s0)
8000c3f4:	00042503          	lw	a0,0(s0)
8000c3f8:	0ff97993          	andi	s3,s2,255
8000c3fc:	0ff97913          	andi	s2,s2,255
8000c400:	40f50533          	sub	a0,a0,a5
8000c404:	01442783          	lw	a5,20(s0)
8000c408:	00f54a63          	blt	a0,a5,8000c41c <__swbuf_r+0x8c>
8000c40c:	00040593          	mv	a1,s0
8000c410:	00048513          	mv	a0,s1
8000c414:	46c000ef          	jal	ra,8000c880 <_fflush_r>
8000c418:	08051663          	bnez	a0,8000c4a4 <__swbuf_r+0x114>
8000c41c:	00842783          	lw	a5,8(s0)
8000c420:	00150513          	addi	a0,a0,1
8000c424:	fff78793          	addi	a5,a5,-1
8000c428:	00f42423          	sw	a5,8(s0)
8000c42c:	00042783          	lw	a5,0(s0)
8000c430:	00178713          	addi	a4,a5,1
8000c434:	00e42023          	sw	a4,0(s0)
8000c438:	01378023          	sb	s3,0(a5)
8000c43c:	01442783          	lw	a5,20(s0)
8000c440:	00a78c63          	beq	a5,a0,8000c458 <__swbuf_r+0xc8>
8000c444:	00c45783          	lhu	a5,12(s0)
8000c448:	0017f793          	andi	a5,a5,1
8000c44c:	04078e63          	beqz	a5,8000c4a8 <__swbuf_r+0x118>
8000c450:	00a00793          	li	a5,10
8000c454:	04f91a63          	bne	s2,a5,8000c4a8 <__swbuf_r+0x118>
8000c458:	00040593          	mv	a1,s0
8000c45c:	00048513          	mv	a0,s1
8000c460:	420000ef          	jal	ra,8000c880 <_fflush_r>
8000c464:	04050263          	beqz	a0,8000c4a8 <__swbuf_r+0x118>
8000c468:	03c0006f          	j	8000c4a4 <__swbuf_r+0x114>
8000c46c:	00001797          	auipc	a5,0x1
8000c470:	66878793          	addi	a5,a5,1640 # 8000dad4 <__sf_fake_stdout>
8000c474:	00f41663          	bne	s0,a5,8000c480 <__swbuf_r+0xf0>
8000c478:	0084a403          	lw	s0,8(s1)
8000c47c:	f59ff06f          	j	8000c3d4 <__swbuf_r+0x44>
8000c480:	00001797          	auipc	a5,0x1
8000c484:	61478793          	addi	a5,a5,1556 # 8000da94 <__sf_fake_stderr>
8000c488:	f4f416e3          	bne	s0,a5,8000c3d4 <__swbuf_r+0x44>
8000c48c:	00c4a403          	lw	s0,12(s1)
8000c490:	f45ff06f          	j	8000c3d4 <__swbuf_r+0x44>
8000c494:	00040593          	mv	a1,s0
8000c498:	00048513          	mv	a0,s1
8000c49c:	030000ef          	jal	ra,8000c4cc <__swsetup_r>
8000c4a0:	f40508e3          	beqz	a0,8000c3f0 <__swbuf_r+0x60>
8000c4a4:	fff00913          	li	s2,-1
8000c4a8:	01c12083          	lw	ra,28(sp)
8000c4ac:	01812403          	lw	s0,24(sp)
8000c4b0:	00090513          	mv	a0,s2
8000c4b4:	01412483          	lw	s1,20(sp)
8000c4b8:	01012903          	lw	s2,16(sp)
8000c4bc:	00c12983          	lw	s3,12(sp)
8000c4c0:	02010113          	addi	sp,sp,32
8000c4c4:	00008067          	ret
8000c4c8:	0000                	unimp
	...

8000c4cc <__swsetup_r>:
__swsetup_r():
8000c4cc:	ff010113          	addi	sp,sp,-16
8000c4d0:	00001797          	auipc	a5,0x1
8000c4d4:	66c78793          	addi	a5,a5,1644 # 8000db3c <_impure_ptr>
8000c4d8:	00912223          	sw	s1,4(sp)
8000c4dc:	0007a483          	lw	s1,0(a5)
8000c4e0:	00812423          	sw	s0,8(sp)
8000c4e4:	01212023          	sw	s2,0(sp)
8000c4e8:	00112623          	sw	ra,12(sp)
8000c4ec:	00050913          	mv	s2,a0
8000c4f0:	00058413          	mv	s0,a1
8000c4f4:	00048a63          	beqz	s1,8000c508 <__swsetup_r+0x3c>
8000c4f8:	0184a783          	lw	a5,24(s1)
8000c4fc:	00079663          	bnez	a5,8000c508 <__swsetup_r+0x3c>
8000c500:	00048513          	mv	a0,s1
8000c504:	a1dfe0ef          	jal	ra,8000af20 <__sinit>
8000c508:	00001797          	auipc	a5,0x1
8000c50c:	5ac78793          	addi	a5,a5,1452 # 8000dab4 <__sf_fake_stdin>
8000c510:	04f41863          	bne	s0,a5,8000c560 <__swsetup_r+0x94>
8000c514:	0044a403          	lw	s0,4(s1)
8000c518:	00c41703          	lh	a4,12(s0)
8000c51c:	01071793          	slli	a5,a4,0x10
8000c520:	0107d793          	srli	a5,a5,0x10
8000c524:	0087f693          	andi	a3,a5,8
8000c528:	0a069463          	bnez	a3,8000c5d0 <__swsetup_r+0x104>
8000c52c:	0107f693          	andi	a3,a5,16
8000c530:	04069c63          	bnez	a3,8000c588 <__swsetup_r+0xbc>
8000c534:	00900793          	li	a5,9
8000c538:	00f92023          	sw	a5,0(s2)
8000c53c:	04076713          	ori	a4,a4,64
8000c540:	00e41623          	sh	a4,12(s0)
8000c544:	fff00513          	li	a0,-1
8000c548:	00c12083          	lw	ra,12(sp)
8000c54c:	00812403          	lw	s0,8(sp)
8000c550:	00412483          	lw	s1,4(sp)
8000c554:	00012903          	lw	s2,0(sp)
8000c558:	01010113          	addi	sp,sp,16
8000c55c:	00008067          	ret
8000c560:	00001797          	auipc	a5,0x1
8000c564:	57478793          	addi	a5,a5,1396 # 8000dad4 <__sf_fake_stdout>
8000c568:	00f41663          	bne	s0,a5,8000c574 <__swsetup_r+0xa8>
8000c56c:	0084a403          	lw	s0,8(s1)
8000c570:	fa9ff06f          	j	8000c518 <__swsetup_r+0x4c>
8000c574:	00001797          	auipc	a5,0x1
8000c578:	52078793          	addi	a5,a5,1312 # 8000da94 <__sf_fake_stderr>
8000c57c:	f8f41ee3          	bne	s0,a5,8000c518 <__swsetup_r+0x4c>
8000c580:	00c4a403          	lw	s0,12(s1)
8000c584:	f95ff06f          	j	8000c518 <__swsetup_r+0x4c>
8000c588:	0047f793          	andi	a5,a5,4
8000c58c:	02078c63          	beqz	a5,8000c5c4 <__swsetup_r+0xf8>
8000c590:	03442583          	lw	a1,52(s0)
8000c594:	00058c63          	beqz	a1,8000c5ac <__swsetup_r+0xe0>
8000c598:	04440793          	addi	a5,s0,68
8000c59c:	00f58663          	beq	a1,a5,8000c5a8 <__swsetup_r+0xdc>
8000c5a0:	00090513          	mv	a0,s2
8000c5a4:	5ec000ef          	jal	ra,8000cb90 <_free_r>
8000c5a8:	02042a23          	sw	zero,52(s0)
8000c5ac:	00c45783          	lhu	a5,12(s0)
8000c5b0:	00042223          	sw	zero,4(s0)
8000c5b4:	fdb7f793          	andi	a5,a5,-37
8000c5b8:	00f41623          	sh	a5,12(s0)
8000c5bc:	01042783          	lw	a5,16(s0)
8000c5c0:	00f42023          	sw	a5,0(s0)
8000c5c4:	00c45783          	lhu	a5,12(s0)
8000c5c8:	0087e793          	ori	a5,a5,8
8000c5cc:	00f41623          	sh	a5,12(s0)
8000c5d0:	01042783          	lw	a5,16(s0)
8000c5d4:	02079063          	bnez	a5,8000c5f4 <__swsetup_r+0x128>
8000c5d8:	00c45783          	lhu	a5,12(s0)
8000c5dc:	20000713          	li	a4,512
8000c5e0:	2807f793          	andi	a5,a5,640
8000c5e4:	00e78863          	beq	a5,a4,8000c5f4 <__swsetup_r+0x128>
8000c5e8:	00040593          	mv	a1,s0
8000c5ec:	00090513          	mv	a0,s2
8000c5f0:	41c000ef          	jal	ra,8000ca0c <__smakebuf_r>
8000c5f4:	00c45783          	lhu	a5,12(s0)
8000c5f8:	0017f713          	andi	a4,a5,1
8000c5fc:	02070c63          	beqz	a4,8000c634 <__swsetup_r+0x168>
8000c600:	01442783          	lw	a5,20(s0)
8000c604:	00042423          	sw	zero,8(s0)
8000c608:	40f007b3          	neg	a5,a5
8000c60c:	00f42c23          	sw	a5,24(s0)
8000c610:	01042783          	lw	a5,16(s0)
8000c614:	00000513          	li	a0,0
8000c618:	f20798e3          	bnez	a5,8000c548 <__swsetup_r+0x7c>
8000c61c:	00c41783          	lh	a5,12(s0)
8000c620:	0807f713          	andi	a4,a5,128
8000c624:	f20702e3          	beqz	a4,8000c548 <__swsetup_r+0x7c>
8000c628:	0407e793          	ori	a5,a5,64
8000c62c:	00f41623          	sh	a5,12(s0)
8000c630:	f15ff06f          	j	8000c544 <__swsetup_r+0x78>
8000c634:	0027f793          	andi	a5,a5,2
8000c638:	00000713          	li	a4,0
8000c63c:	00079463          	bnez	a5,8000c644 <__swsetup_r+0x178>
8000c640:	01442703          	lw	a4,20(s0)
8000c644:	00e42423          	sw	a4,8(s0)
8000c648:	fc9ff06f          	j	8000c610 <__swsetup_r+0x144>
8000c64c:	0000                	unimp
	...

8000c650 <_close_r>:
_close_r():
8000c650:	ff010113          	addi	sp,sp,-16
8000c654:	00812423          	sw	s0,8(sp)
8000c658:	00050413          	mv	s0,a0
8000c65c:	00058513          	mv	a0,a1
8000c660:	00002797          	auipc	a5,0x2
8000c664:	b607a023          	sw	zero,-1184(a5) # 8000e1c0 <errno>
8000c668:	00112623          	sw	ra,12(sp)
8000c66c:	f00f40ef          	jal	ra,80000d6c <_close>
8000c670:	fff00793          	li	a5,-1
8000c674:	00f51c63          	bne	a0,a5,8000c68c <_close_r+0x3c>
8000c678:	00002797          	auipc	a5,0x2
8000c67c:	b4878793          	addi	a5,a5,-1208 # 8000e1c0 <errno>
8000c680:	0007a783          	lw	a5,0(a5)
8000c684:	00078463          	beqz	a5,8000c68c <_close_r+0x3c>
8000c688:	00f42023          	sw	a5,0(s0)
8000c68c:	00c12083          	lw	ra,12(sp)
8000c690:	00812403          	lw	s0,8(sp)
8000c694:	01010113          	addi	sp,sp,16
8000c698:	00008067          	ret
8000c69c:	0000                	unimp
	...

8000c6a0 <__sflush_r>:
__sflush_r():
8000c6a0:	00c5d783          	lhu	a5,12(a1)
8000c6a4:	fe010113          	addi	sp,sp,-32
8000c6a8:	00812c23          	sw	s0,24(sp)
8000c6ac:	00912a23          	sw	s1,20(sp)
8000c6b0:	00112e23          	sw	ra,28(sp)
8000c6b4:	01212823          	sw	s2,16(sp)
8000c6b8:	01312623          	sw	s3,12(sp)
8000c6bc:	0087f713          	andi	a4,a5,8
8000c6c0:	00050493          	mv	s1,a0
8000c6c4:	00058413          	mv	s0,a1
8000c6c8:	14071863          	bnez	a4,8000c818 <__sflush_r+0x178>
8000c6cc:	0045a703          	lw	a4,4(a1)
8000c6d0:	02e04663          	bgtz	a4,8000c6fc <__sflush_r+0x5c>
8000c6d4:	0405a703          	lw	a4,64(a1)
8000c6d8:	02e04263          	bgtz	a4,8000c6fc <__sflush_r+0x5c>
8000c6dc:	00000513          	li	a0,0
8000c6e0:	01c12083          	lw	ra,28(sp)
8000c6e4:	01812403          	lw	s0,24(sp)
8000c6e8:	01412483          	lw	s1,20(sp)
8000c6ec:	01012903          	lw	s2,16(sp)
8000c6f0:	00c12983          	lw	s3,12(sp)
8000c6f4:	02010113          	addi	sp,sp,32
8000c6f8:	00008067          	ret
8000c6fc:	02c42703          	lw	a4,44(s0)
8000c700:	fc070ee3          	beqz	a4,8000c6dc <__sflush_r+0x3c>
8000c704:	0004a903          	lw	s2,0(s1)
8000c708:	01379693          	slli	a3,a5,0x13
8000c70c:	0004a023          	sw	zero,0(s1)
8000c710:	02042583          	lw	a1,32(s0)
8000c714:	0a06dc63          	bgez	a3,8000c7cc <__sflush_r+0x12c>
8000c718:	05442603          	lw	a2,84(s0)
8000c71c:	00c45783          	lhu	a5,12(s0)
8000c720:	0047f793          	andi	a5,a5,4
8000c724:	00078e63          	beqz	a5,8000c740 <__sflush_r+0xa0>
8000c728:	00442783          	lw	a5,4(s0)
8000c72c:	40f60633          	sub	a2,a2,a5
8000c730:	03442783          	lw	a5,52(s0)
8000c734:	00078663          	beqz	a5,8000c740 <__sflush_r+0xa0>
8000c738:	04042783          	lw	a5,64(s0)
8000c73c:	40f60633          	sub	a2,a2,a5
8000c740:	02c42783          	lw	a5,44(s0)
8000c744:	02042583          	lw	a1,32(s0)
8000c748:	00000693          	li	a3,0
8000c74c:	00048513          	mv	a0,s1
8000c750:	000780e7          	jalr	a5
8000c754:	fff00793          	li	a5,-1
8000c758:	00c45703          	lhu	a4,12(s0)
8000c75c:	02f51263          	bne	a0,a5,8000c780 <__sflush_r+0xe0>
8000c760:	0004a683          	lw	a3,0(s1)
8000c764:	01d00793          	li	a5,29
8000c768:	0ad7e063          	bltu	a5,a3,8000c808 <__sflush_r+0x168>
8000c76c:	204007b7          	lui	a5,0x20400
8000c770:	00178793          	addi	a5,a5,1 # 20400001 <RAM_SIZE+0x20380001>
8000c774:	00d7d7b3          	srl	a5,a5,a3
8000c778:	0017f793          	andi	a5,a5,1
8000c77c:	08078663          	beqz	a5,8000c808 <__sflush_r+0x168>
8000c780:	01042783          	lw	a5,16(s0)
8000c784:	00042223          	sw	zero,4(s0)
8000c788:	00f42023          	sw	a5,0(s0)
8000c78c:	01371793          	slli	a5,a4,0x13
8000c790:	0007dc63          	bgez	a5,8000c7a8 <__sflush_r+0x108>
8000c794:	fff00793          	li	a5,-1
8000c798:	00f51663          	bne	a0,a5,8000c7a4 <__sflush_r+0x104>
8000c79c:	0004a783          	lw	a5,0(s1)
8000c7a0:	00079463          	bnez	a5,8000c7a8 <__sflush_r+0x108>
8000c7a4:	04a42a23          	sw	a0,84(s0)
8000c7a8:	03442583          	lw	a1,52(s0)
8000c7ac:	0124a023          	sw	s2,0(s1)
8000c7b0:	f20586e3          	beqz	a1,8000c6dc <__sflush_r+0x3c>
8000c7b4:	04440793          	addi	a5,s0,68
8000c7b8:	00f58663          	beq	a1,a5,8000c7c4 <__sflush_r+0x124>
8000c7bc:	00048513          	mv	a0,s1
8000c7c0:	3d0000ef          	jal	ra,8000cb90 <_free_r>
8000c7c4:	02042a23          	sw	zero,52(s0)
8000c7c8:	f15ff06f          	j	8000c6dc <__sflush_r+0x3c>
8000c7cc:	00000613          	li	a2,0
8000c7d0:	00100693          	li	a3,1
8000c7d4:	00048513          	mv	a0,s1
8000c7d8:	000700e7          	jalr	a4
8000c7dc:	fff00793          	li	a5,-1
8000c7e0:	00050613          	mv	a2,a0
8000c7e4:	f2f51ce3          	bne	a0,a5,8000c71c <__sflush_r+0x7c>
8000c7e8:	0004a783          	lw	a5,0(s1)
8000c7ec:	f20788e3          	beqz	a5,8000c71c <__sflush_r+0x7c>
8000c7f0:	01d00713          	li	a4,29
8000c7f4:	00e78663          	beq	a5,a4,8000c800 <__sflush_r+0x160>
8000c7f8:	01600713          	li	a4,22
8000c7fc:	06e79263          	bne	a5,a4,8000c860 <__sflush_r+0x1c0>
8000c800:	0124a023          	sw	s2,0(s1)
8000c804:	ed9ff06f          	j	8000c6dc <__sflush_r+0x3c>
8000c808:	04076713          	ori	a4,a4,64
8000c80c:	00e41623          	sh	a4,12(s0)
8000c810:	fff00513          	li	a0,-1
8000c814:	ecdff06f          	j	8000c6e0 <__sflush_r+0x40>
8000c818:	0105a983          	lw	s3,16(a1)
8000c81c:	ec0980e3          	beqz	s3,8000c6dc <__sflush_r+0x3c>
8000c820:	0005a903          	lw	s2,0(a1)
8000c824:	0037f793          	andi	a5,a5,3
8000c828:	0135a023          	sw	s3,0(a1)
8000c82c:	41390933          	sub	s2,s2,s3
8000c830:	00000713          	li	a4,0
8000c834:	00079463          	bnez	a5,8000c83c <__sflush_r+0x19c>
8000c838:	0145a703          	lw	a4,20(a1)
8000c83c:	00e42423          	sw	a4,8(s0)
8000c840:	e9205ee3          	blez	s2,8000c6dc <__sflush_r+0x3c>
8000c844:	02842783          	lw	a5,40(s0)
8000c848:	02042583          	lw	a1,32(s0)
8000c84c:	00090693          	mv	a3,s2
8000c850:	00098613          	mv	a2,s3
8000c854:	00048513          	mv	a0,s1
8000c858:	000780e7          	jalr	a5
8000c85c:	00a04a63          	bgtz	a0,8000c870 <__sflush_r+0x1d0>
8000c860:	00c45783          	lhu	a5,12(s0)
8000c864:	0407e793          	ori	a5,a5,64
8000c868:	00f41623          	sh	a5,12(s0)
8000c86c:	fa5ff06f          	j	8000c810 <__sflush_r+0x170>
8000c870:	00a989b3          	add	s3,s3,a0
8000c874:	40a90933          	sub	s2,s2,a0
8000c878:	fc9ff06f          	j	8000c840 <__sflush_r+0x1a0>
8000c87c:	0000                	unimp
	...

8000c880 <_fflush_r>:
_fflush_r():
8000c880:	0105a783          	lw	a5,16(a1)
8000c884:	08078a63          	beqz	a5,8000c918 <_fflush_r+0x98>
8000c888:	fe010113          	addi	sp,sp,-32
8000c88c:	00812c23          	sw	s0,24(sp)
8000c890:	00112e23          	sw	ra,28(sp)
8000c894:	00050413          	mv	s0,a0
8000c898:	00050c63          	beqz	a0,8000c8b0 <_fflush_r+0x30>
8000c89c:	01852783          	lw	a5,24(a0)
8000c8a0:	00079863          	bnez	a5,8000c8b0 <_fflush_r+0x30>
8000c8a4:	00b12623          	sw	a1,12(sp)
8000c8a8:	e78fe0ef          	jal	ra,8000af20 <__sinit>
8000c8ac:	00c12583          	lw	a1,12(sp)
8000c8b0:	00001797          	auipc	a5,0x1
8000c8b4:	20478793          	addi	a5,a5,516 # 8000dab4 <__sf_fake_stdin>
8000c8b8:	02f59263          	bne	a1,a5,8000c8dc <_fflush_r+0x5c>
8000c8bc:	00442583          	lw	a1,4(s0)
8000c8c0:	00c59783          	lh	a5,12(a1)
8000c8c4:	04078063          	beqz	a5,8000c904 <_fflush_r+0x84>
8000c8c8:	00040513          	mv	a0,s0
8000c8cc:	01812403          	lw	s0,24(sp)
8000c8d0:	01c12083          	lw	ra,28(sp)
8000c8d4:	02010113          	addi	sp,sp,32
8000c8d8:	dc9ff06f          	j	8000c6a0 <__sflush_r>
8000c8dc:	00001797          	auipc	a5,0x1
8000c8e0:	1f878793          	addi	a5,a5,504 # 8000dad4 <__sf_fake_stdout>
8000c8e4:	00f59663          	bne	a1,a5,8000c8f0 <_fflush_r+0x70>
8000c8e8:	00842583          	lw	a1,8(s0)
8000c8ec:	fd5ff06f          	j	8000c8c0 <_fflush_r+0x40>
8000c8f0:	00001797          	auipc	a5,0x1
8000c8f4:	1a478793          	addi	a5,a5,420 # 8000da94 <__sf_fake_stderr>
8000c8f8:	fcf594e3          	bne	a1,a5,8000c8c0 <_fflush_r+0x40>
8000c8fc:	00c42583          	lw	a1,12(s0)
8000c900:	fc1ff06f          	j	8000c8c0 <_fflush_r+0x40>
8000c904:	01c12083          	lw	ra,28(sp)
8000c908:	01812403          	lw	s0,24(sp)
8000c90c:	00000513          	li	a0,0
8000c910:	02010113          	addi	sp,sp,32
8000c914:	00008067          	ret
8000c918:	00000513          	li	a0,0
8000c91c:	00008067          	ret
8000c920:	0000                	unimp
	...

8000c924 <_lseek_r>:
_lseek_r():
8000c924:	ff010113          	addi	sp,sp,-16
8000c928:	00812423          	sw	s0,8(sp)
8000c92c:	00050413          	mv	s0,a0
8000c930:	00058513          	mv	a0,a1
8000c934:	00060593          	mv	a1,a2
8000c938:	00068613          	mv	a2,a3
8000c93c:	00002797          	auipc	a5,0x2
8000c940:	8807a223          	sw	zero,-1916(a5) # 8000e1c0 <errno>
8000c944:	00112623          	sw	ra,12(sp)
8000c948:	cbcf40ef          	jal	ra,80000e04 <_lseek>
8000c94c:	fff00793          	li	a5,-1
8000c950:	00f51c63          	bne	a0,a5,8000c968 <_lseek_r+0x44>
8000c954:	00002797          	auipc	a5,0x2
8000c958:	86c78793          	addi	a5,a5,-1940 # 8000e1c0 <errno>
8000c95c:	0007a783          	lw	a5,0(a5)
8000c960:	00078463          	beqz	a5,8000c968 <_lseek_r+0x44>
8000c964:	00f42023          	sw	a5,0(s0)
8000c968:	00c12083          	lw	ra,12(sp)
8000c96c:	00812403          	lw	s0,8(sp)
8000c970:	01010113          	addi	sp,sp,16
8000c974:	00008067          	ret
8000c978:	0000                	unimp
	...

8000c97c <__swhatbuf_r>:
__swhatbuf_r():
8000c97c:	fa010113          	addi	sp,sp,-96
8000c980:	04912a23          	sw	s1,84(sp)
8000c984:	00058493          	mv	s1,a1
8000c988:	00e59583          	lh	a1,14(a1)
8000c98c:	04812c23          	sw	s0,88(sp)
8000c990:	04112e23          	sw	ra,92(sp)
8000c994:	00060413          	mv	s0,a2
8000c998:	0005de63          	bgez	a1,8000c9b4 <__swhatbuf_r+0x38>
8000c99c:	00c4d783          	lhu	a5,12(s1)
8000c9a0:	0006a023          	sw	zero,0(a3)
8000c9a4:	0807f793          	andi	a5,a5,128
8000c9a8:	04079063          	bnez	a5,8000c9e8 <__swhatbuf_r+0x6c>
8000c9ac:	40000793          	li	a5,1024
8000c9b0:	03c0006f          	j	8000c9ec <__swhatbuf_r+0x70>
8000c9b4:	01410613          	addi	a2,sp,20
8000c9b8:	00d12623          	sw	a3,12(sp)
8000c9bc:	3d8000ef          	jal	ra,8000cd94 <_fstat_r>
8000c9c0:	00c12683          	lw	a3,12(sp)
8000c9c4:	fc054ce3          	bltz	a0,8000c99c <__swhatbuf_r+0x20>
8000c9c8:	01812703          	lw	a4,24(sp)
8000c9cc:	0000f7b7          	lui	a5,0xf
8000c9d0:	00e7f7b3          	and	a5,a5,a4
8000c9d4:	ffffe737          	lui	a4,0xffffe
8000c9d8:	00e787b3          	add	a5,a5,a4
8000c9dc:	0017b793          	seqz	a5,a5
8000c9e0:	00f6a023          	sw	a5,0(a3)
8000c9e4:	fc9ff06f          	j	8000c9ac <__swhatbuf_r+0x30>
8000c9e8:	04000793          	li	a5,64
8000c9ec:	00f42023          	sw	a5,0(s0)
8000c9f0:	05c12083          	lw	ra,92(sp)
8000c9f4:	05812403          	lw	s0,88(sp)
8000c9f8:	05412483          	lw	s1,84(sp)
8000c9fc:	00000513          	li	a0,0
8000ca00:	06010113          	addi	sp,sp,96
8000ca04:	00008067          	ret
8000ca08:	0000                	unimp
	...

8000ca0c <__smakebuf_r>:
__smakebuf_r():
8000ca0c:	00c5d783          	lhu	a5,12(a1)
8000ca10:	fe010113          	addi	sp,sp,-32
8000ca14:	00812c23          	sw	s0,24(sp)
8000ca18:	00112e23          	sw	ra,28(sp)
8000ca1c:	00912a23          	sw	s1,20(sp)
8000ca20:	01212823          	sw	s2,16(sp)
8000ca24:	0027f793          	andi	a5,a5,2
8000ca28:	00058413          	mv	s0,a1
8000ca2c:	02078863          	beqz	a5,8000ca5c <__smakebuf_r+0x50>
8000ca30:	04740793          	addi	a5,s0,71
8000ca34:	00f42023          	sw	a5,0(s0)
8000ca38:	00f42823          	sw	a5,16(s0)
8000ca3c:	00100793          	li	a5,1
8000ca40:	00f42a23          	sw	a5,20(s0)
8000ca44:	01c12083          	lw	ra,28(sp)
8000ca48:	01812403          	lw	s0,24(sp)
8000ca4c:	01412483          	lw	s1,20(sp)
8000ca50:	01012903          	lw	s2,16(sp)
8000ca54:	02010113          	addi	sp,sp,32
8000ca58:	00008067          	ret
8000ca5c:	00c10693          	addi	a3,sp,12
8000ca60:	00810613          	addi	a2,sp,8
8000ca64:	00050493          	mv	s1,a0
8000ca68:	f15ff0ef          	jal	ra,8000c97c <__swhatbuf_r>
8000ca6c:	00812583          	lw	a1,8(sp)
8000ca70:	00050913          	mv	s2,a0
8000ca74:	00048513          	mv	a0,s1
8000ca78:	f0cfe0ef          	jal	ra,8000b184 <_malloc_r>
8000ca7c:	02051063          	bnez	a0,8000ca9c <__smakebuf_r+0x90>
8000ca80:	00c41783          	lh	a5,12(s0)
8000ca84:	2007f713          	andi	a4,a5,512
8000ca88:	fa071ee3          	bnez	a4,8000ca44 <__smakebuf_r+0x38>
8000ca8c:	ffc7f793          	andi	a5,a5,-4
8000ca90:	0027e793          	ori	a5,a5,2
8000ca94:	00f41623          	sh	a5,12(s0)
8000ca98:	f99ff06f          	j	8000ca30 <__smakebuf_r+0x24>
8000ca9c:	ffffe797          	auipc	a5,0xffffe
8000caa0:	37878793          	addi	a5,a5,888 # 8000ae14 <_cleanup_r>
8000caa4:	02f4a423          	sw	a5,40(s1)
8000caa8:	00c45783          	lhu	a5,12(s0)
8000caac:	00a42023          	sw	a0,0(s0)
8000cab0:	00a42823          	sw	a0,16(s0)
8000cab4:	0807e793          	ori	a5,a5,128
8000cab8:	00f41623          	sh	a5,12(s0)
8000cabc:	00812783          	lw	a5,8(sp)
8000cac0:	00f42a23          	sw	a5,20(s0)
8000cac4:	00c12783          	lw	a5,12(sp)
8000cac8:	02078263          	beqz	a5,8000caec <__smakebuf_r+0xe0>
8000cacc:	00e41583          	lh	a1,14(s0)
8000cad0:	00048513          	mv	a0,s1
8000cad4:	314000ef          	jal	ra,8000cde8 <_isatty_r>
8000cad8:	00050a63          	beqz	a0,8000caec <__smakebuf_r+0xe0>
8000cadc:	00c45783          	lhu	a5,12(s0)
8000cae0:	ffc7f793          	andi	a5,a5,-4
8000cae4:	0017e793          	ori	a5,a5,1
8000cae8:	00f41623          	sh	a5,12(s0)
8000caec:	00c45783          	lhu	a5,12(s0)
8000caf0:	00f96933          	or	s2,s2,a5
8000caf4:	01241623          	sh	s2,12(s0)
8000caf8:	f4dff06f          	j	8000ca44 <__smakebuf_r+0x38>
8000cafc:	0000                	unimp
	...

8000cb00 <memchr>:
memchr():
8000cb00:	0ff5f593          	andi	a1,a1,255
8000cb04:	00c50633          	add	a2,a0,a2
8000cb08:	00c51663          	bne	a0,a2,8000cb14 <memchr+0x14>
8000cb0c:	00000513          	li	a0,0
8000cb10:	00008067          	ret
8000cb14:	00054783          	lbu	a5,0(a0)
8000cb18:	feb78ce3          	beq	a5,a1,8000cb10 <memchr+0x10>
8000cb1c:	00150513          	addi	a0,a0,1
8000cb20:	fe9ff06f          	j	8000cb08 <memchr+0x8>
8000cb24:	0000                	unimp
	...

8000cb28 <memmove>:
memmove():
8000cb28:	00c50733          	add	a4,a0,a2
8000cb2c:	00a5e863          	bltu	a1,a0,8000cb3c <memmove+0x14>
8000cb30:	00050793          	mv	a5,a0
8000cb34:	02f71a63          	bne	a4,a5,8000cb68 <memmove+0x40>
8000cb38:	00008067          	ret
8000cb3c:	00c587b3          	add	a5,a1,a2
8000cb40:	40f60633          	sub	a2,a2,a5
8000cb44:	fef576e3          	bleu	a5,a0,8000cb30 <memmove+0x8>
8000cb48:	00c786b3          	add	a3,a5,a2
8000cb4c:	00069463          	bnez	a3,8000cb54 <memmove+0x2c>
8000cb50:	00008067          	ret
8000cb54:	fff78793          	addi	a5,a5,-1
8000cb58:	0007c683          	lbu	a3,0(a5)
8000cb5c:	fff70713          	addi	a4,a4,-1 # ffffdfff <__stack_top+0x7ffbf9ff>
8000cb60:	00d70023          	sb	a3,0(a4)
8000cb64:	fe5ff06f          	j	8000cb48 <memmove+0x20>
8000cb68:	00158593          	addi	a1,a1,1
8000cb6c:	fff5c683          	lbu	a3,-1(a1)
8000cb70:	00178793          	addi	a5,a5,1
8000cb74:	fed78fa3          	sb	a3,-1(a5)
8000cb78:	fbdff06f          	j	8000cb34 <memmove+0xc>
8000cb7c:	0000                	unimp
	...

8000cb80 <__malloc_lock>:
__malloc_lock():
8000cb80:	00008067          	ret
8000cb84:	0000                	unimp
	...

8000cb88 <__malloc_unlock>:
__malloc_unlock():
8000cb88:	00008067          	ret
8000cb8c:	0000                	unimp
	...

8000cb90 <_free_r>:
_free_r():
8000cb90:	10058463          	beqz	a1,8000cc98 <_free_r+0x108>
8000cb94:	ffc5a783          	lw	a5,-4(a1)
8000cb98:	ff010113          	addi	sp,sp,-16
8000cb9c:	00812423          	sw	s0,8(sp)
8000cba0:	00112623          	sw	ra,12(sp)
8000cba4:	00912223          	sw	s1,4(sp)
8000cba8:	ffc58413          	addi	s0,a1,-4
8000cbac:	0007d463          	bgez	a5,8000cbb4 <_free_r+0x24>
8000cbb0:	00f40433          	add	s0,s0,a5
8000cbb4:	00050493          	mv	s1,a0
8000cbb8:	fc9ff0ef          	jal	ra,8000cb80 <__malloc_lock>
8000cbbc:	00001797          	auipc	a5,0x1
8000cbc0:	57c78793          	addi	a5,a5,1404 # 8000e138 <__malloc_free_list>
8000cbc4:	0007a783          	lw	a5,0(a5)
8000cbc8:	02079463          	bnez	a5,8000cbf0 <_free_r+0x60>
8000cbcc:	00042223          	sw	zero,4(s0)
8000cbd0:	00001797          	auipc	a5,0x1
8000cbd4:	5687a423          	sw	s0,1384(a5) # 8000e138 <__malloc_free_list>
8000cbd8:	00812403          	lw	s0,8(sp)
8000cbdc:	00c12083          	lw	ra,12(sp)
8000cbe0:	00048513          	mv	a0,s1
8000cbe4:	00412483          	lw	s1,4(sp)
8000cbe8:	01010113          	addi	sp,sp,16
8000cbec:	f9dff06f          	j	8000cb88 <__malloc_unlock>
8000cbf0:	02f47663          	bleu	a5,s0,8000cc1c <_free_r+0x8c>
8000cbf4:	00042683          	lw	a3,0(s0)
8000cbf8:	00d40733          	add	a4,s0,a3
8000cbfc:	00e79a63          	bne	a5,a4,8000cc10 <_free_r+0x80>
8000cc00:	0007a703          	lw	a4,0(a5)
8000cc04:	0047a783          	lw	a5,4(a5)
8000cc08:	00d70733          	add	a4,a4,a3
8000cc0c:	00e42023          	sw	a4,0(s0)
8000cc10:	00f42223          	sw	a5,4(s0)
8000cc14:	fbdff06f          	j	8000cbd0 <_free_r+0x40>
8000cc18:	00070793          	mv	a5,a4
8000cc1c:	0047a703          	lw	a4,4(a5)
8000cc20:	00070463          	beqz	a4,8000cc28 <_free_r+0x98>
8000cc24:	fee47ae3          	bleu	a4,s0,8000cc18 <_free_r+0x88>
8000cc28:	0007a683          	lw	a3,0(a5)
8000cc2c:	00d78633          	add	a2,a5,a3
8000cc30:	02861863          	bne	a2,s0,8000cc60 <_free_r+0xd0>
8000cc34:	00042603          	lw	a2,0(s0)
8000cc38:	00c686b3          	add	a3,a3,a2
8000cc3c:	00d7a023          	sw	a3,0(a5)
8000cc40:	00d78633          	add	a2,a5,a3
8000cc44:	f8c71ae3          	bne	a4,a2,8000cbd8 <_free_r+0x48>
8000cc48:	00072603          	lw	a2,0(a4)
8000cc4c:	00472703          	lw	a4,4(a4)
8000cc50:	00d606b3          	add	a3,a2,a3
8000cc54:	00d7a023          	sw	a3,0(a5)
8000cc58:	00e7a223          	sw	a4,4(a5)
8000cc5c:	f7dff06f          	j	8000cbd8 <_free_r+0x48>
8000cc60:	00c47863          	bleu	a2,s0,8000cc70 <_free_r+0xe0>
8000cc64:	00c00793          	li	a5,12
8000cc68:	00f4a023          	sw	a5,0(s1)
8000cc6c:	f6dff06f          	j	8000cbd8 <_free_r+0x48>
8000cc70:	00042603          	lw	a2,0(s0)
8000cc74:	00c406b3          	add	a3,s0,a2
8000cc78:	00d71a63          	bne	a4,a3,8000cc8c <_free_r+0xfc>
8000cc7c:	00072683          	lw	a3,0(a4)
8000cc80:	00472703          	lw	a4,4(a4)
8000cc84:	00c686b3          	add	a3,a3,a2
8000cc88:	00d42023          	sw	a3,0(s0)
8000cc8c:	00e42223          	sw	a4,4(s0)
8000cc90:	0087a223          	sw	s0,4(a5)
8000cc94:	f45ff06f          	j	8000cbd8 <_free_r+0x48>
8000cc98:	00008067          	ret
8000cc9c:	0000                	unimp
	...

8000cca0 <_realloc_r>:
_realloc_r():
8000cca0:	00059663          	bnez	a1,8000ccac <_realloc_r+0xc>
8000cca4:	00060593          	mv	a1,a2
8000cca8:	cdcfe06f          	j	8000b184 <_malloc_r>
8000ccac:	fe010113          	addi	sp,sp,-32
8000ccb0:	00812c23          	sw	s0,24(sp)
8000ccb4:	00112e23          	sw	ra,28(sp)
8000ccb8:	00912a23          	sw	s1,20(sp)
8000ccbc:	01212823          	sw	s2,16(sp)
8000ccc0:	01312623          	sw	s3,12(sp)
8000ccc4:	00060413          	mv	s0,a2
8000ccc8:	02061663          	bnez	a2,8000ccf4 <_realloc_r+0x54>
8000cccc:	ec5ff0ef          	jal	ra,8000cb90 <_free_r>
8000ccd0:	00000913          	li	s2,0
8000ccd4:	01c12083          	lw	ra,28(sp)
8000ccd8:	01812403          	lw	s0,24(sp)
8000ccdc:	00090513          	mv	a0,s2
8000cce0:	01412483          	lw	s1,20(sp)
8000cce4:	01012903          	lw	s2,16(sp)
8000cce8:	00c12983          	lw	s3,12(sp)
8000ccec:	02010113          	addi	sp,sp,32
8000ccf0:	00008067          	ret
8000ccf4:	00058493          	mv	s1,a1
8000ccf8:	00050993          	mv	s3,a0
8000ccfc:	13c000ef          	jal	ra,8000ce38 <_malloc_usable_size_r>
8000cd00:	00048913          	mv	s2,s1
8000cd04:	fc8578e3          	bleu	s0,a0,8000ccd4 <_realloc_r+0x34>
8000cd08:	00040593          	mv	a1,s0
8000cd0c:	00098513          	mv	a0,s3
8000cd10:	c74fe0ef          	jal	ra,8000b184 <_malloc_r>
8000cd14:	00050913          	mv	s2,a0
8000cd18:	fa050ee3          	beqz	a0,8000ccd4 <_realloc_r+0x34>
8000cd1c:	00048593          	mv	a1,s1
8000cd20:	00040613          	mv	a2,s0
8000cd24:	dbdfd0ef          	jal	ra,8000aae0 <memcpy>
8000cd28:	00048593          	mv	a1,s1
8000cd2c:	00098513          	mv	a0,s3
8000cd30:	e61ff0ef          	jal	ra,8000cb90 <_free_r>
8000cd34:	fa1ff06f          	j	8000ccd4 <_realloc_r+0x34>
8000cd38:	0000                	unimp
	...

8000cd3c <_read_r>:
_read_r():
8000cd3c:	ff010113          	addi	sp,sp,-16
8000cd40:	00812423          	sw	s0,8(sp)
8000cd44:	00050413          	mv	s0,a0
8000cd48:	00058513          	mv	a0,a1
8000cd4c:	00060593          	mv	a1,a2
8000cd50:	00068613          	mv	a2,a3
8000cd54:	00001797          	auipc	a5,0x1
8000cd58:	4607a623          	sw	zero,1132(a5) # 8000e1c0 <errno>
8000cd5c:	00112623          	sw	ra,12(sp)
8000cd60:	8fcf40ef          	jal	ra,80000e5c <_read>
8000cd64:	fff00793          	li	a5,-1
8000cd68:	00f51c63          	bne	a0,a5,8000cd80 <_read_r+0x44>
8000cd6c:	00001797          	auipc	a5,0x1
8000cd70:	45478793          	addi	a5,a5,1108 # 8000e1c0 <errno>
8000cd74:	0007a783          	lw	a5,0(a5)
8000cd78:	00078463          	beqz	a5,8000cd80 <_read_r+0x44>
8000cd7c:	00f42023          	sw	a5,0(s0)
8000cd80:	00c12083          	lw	ra,12(sp)
8000cd84:	00812403          	lw	s0,8(sp)
8000cd88:	01010113          	addi	sp,sp,16
8000cd8c:	00008067          	ret
8000cd90:	0000                	unimp
	...

8000cd94 <_fstat_r>:
_fstat_r():
8000cd94:	ff010113          	addi	sp,sp,-16
8000cd98:	00812423          	sw	s0,8(sp)
8000cd9c:	00050413          	mv	s0,a0
8000cda0:	00058513          	mv	a0,a1
8000cda4:	00060593          	mv	a1,a2
8000cda8:	00001797          	auipc	a5,0x1
8000cdac:	4007ac23          	sw	zero,1048(a5) # 8000e1c0 <errno>
8000cdb0:	00112623          	sw	ra,12(sp)
8000cdb4:	ff1f30ef          	jal	ra,80000da4 <_fstat>
8000cdb8:	fff00793          	li	a5,-1
8000cdbc:	00f51c63          	bne	a0,a5,8000cdd4 <_fstat_r+0x40>
8000cdc0:	00001797          	auipc	a5,0x1
8000cdc4:	40078793          	addi	a5,a5,1024 # 8000e1c0 <errno>
8000cdc8:	0007a783          	lw	a5,0(a5)
8000cdcc:	00078463          	beqz	a5,8000cdd4 <_fstat_r+0x40>
8000cdd0:	00f42023          	sw	a5,0(s0)
8000cdd4:	00c12083          	lw	ra,12(sp)
8000cdd8:	00812403          	lw	s0,8(sp)
8000cddc:	01010113          	addi	sp,sp,16
8000cde0:	00008067          	ret
8000cde4:	0000                	unimp
	...

8000cde8 <_isatty_r>:
_isatty_r():
8000cde8:	ff010113          	addi	sp,sp,-16
8000cdec:	00812423          	sw	s0,8(sp)
8000cdf0:	00050413          	mv	s0,a0
8000cdf4:	00058513          	mv	a0,a1
8000cdf8:	00001797          	auipc	a5,0x1
8000cdfc:	3c07a423          	sw	zero,968(a5) # 8000e1c0 <errno>
8000ce00:	00112623          	sw	ra,12(sp)
8000ce04:	ee9f30ef          	jal	ra,80000cec <_isatty>
8000ce08:	fff00793          	li	a5,-1
8000ce0c:	00f51c63          	bne	a0,a5,8000ce24 <_isatty_r+0x3c>
8000ce10:	00001797          	auipc	a5,0x1
8000ce14:	3b078793          	addi	a5,a5,944 # 8000e1c0 <errno>
8000ce18:	0007a783          	lw	a5,0(a5)
8000ce1c:	00078463          	beqz	a5,8000ce24 <_isatty_r+0x3c>
8000ce20:	00f42023          	sw	a5,0(s0)
8000ce24:	00c12083          	lw	ra,12(sp)
8000ce28:	00812403          	lw	s0,8(sp)
8000ce2c:	01010113          	addi	sp,sp,16
8000ce30:	00008067          	ret
8000ce34:	0000                	unimp
	...

8000ce38 <_malloc_usable_size_r>:
_malloc_usable_size_r():
8000ce38:	ffc5a783          	lw	a5,-4(a1)
8000ce3c:	ffc78513          	addi	a0,a5,-4
8000ce40:	0007d863          	bgez	a5,8000ce50 <_malloc_usable_size_r+0x18>
8000ce44:	00a585b3          	add	a1,a1,a0
8000ce48:	0005a783          	lw	a5,0(a1)
8000ce4c:	00f50533          	add	a0,a0,a5
8000ce50:	00008067          	ret
	...
8000ce60:	6568                	flw	fa0,76(a0)
8000ce62:	6c6c                	flw	fa1,92(s0)
8000ce64:	0000006f          	j	8000ce64 <_malloc_usable_size_r+0x2c>
8000ce68:	7274                	flw	fa3,100(a2)
8000ce6a:	7061                	0x7061
8000ce6c:	000a                	0xa
8000ce6e:	0000                	unimp
8000ce70:	5f747753          	0x5f747753
8000ce74:	6154                	flw	fa3,4(a0)
8000ce76:	00006b73          	csrrsi	s6,0x0,0
8000ce7a:	0000                	unimp
8000ce7c:	6449                	lui	s0,0x12
8000ce7e:	656c                	flw	fa1,76(a0)
8000ce80:	65726f43          	0x65726f43
8000ce84:	3030                	fld	fa2,96(s0)
8000ce86:	0030                	addi	a2,sp,8
8000ce88:	656d                	lui	a0,0x1b
8000ce8a:	706d                	0x706d
8000ce8c:	206c6f6f          	jal	t5,800d3092 <__stack_top+0x94a92>
8000ce90:	6e69                	lui	t3,0x1a
8000ce92:	7469                	lui	s0,0xffffa
8000ce94:	6f20                	flw	fs0,88(a4)
8000ce96:	000a216b          	0xa216b
8000ce9a:	0000                	unimp
8000ce9c:	656d                	lui	a0,0x1b
8000ce9e:	706d                	0x706d
8000cea0:	206c6f6f          	jal	t5,800d30a6 <__stack_top+0x94aa6>
8000cea4:	6e69                	lui	t3,0x1a
8000cea6:	7469                	lui	s0,0xffffa
8000cea8:	6620                	flw	fs0,72(a2)
8000ceaa:	6961                	lui	s2,0x18
8000ceac:	656c                	flw	fa1,76(a0)
8000ceae:	2164                	fld	fs1,192(a0)
8000ceb0:	000a                	0xa
8000ceb2:	0000                	unimp
8000ceb4:	656d                	lui	a0,0x1b
8000ceb6:	206d                	jal	8000cf60 <_malloc_usable_size_r+0x128>
8000ceb8:	6c61                	lui	s8,0x18
8000ceba:	6f6c                	flw	fa1,92(a4)
8000cebc:	61662063          	0x61662063
8000cec0:	6c69                	lui	s8,0x1a
8000cec2:	6465                	lui	s0,0x19
8000cec4:	0a21                	addi	s4,s4,8
8000cec6:	0000                	unimp
8000cec8:	656d                	lui	a0,0x1b
8000ceca:	206d                	jal	8000cf74 <_malloc_usable_size_r+0x13c>
8000cecc:	6c61                	lui	s8,0x18
8000cece:	6f6c                	flw	fa1,92(a4)
8000ced0:	6b6f2063          	0x6b6f2063
8000ced4:	000a                	0xa
8000ced6:	0000                	unimp
8000ced8:	702a                	flw	ft0,168(sp)
8000ceda:	6e5f 6d75 3d20      	0x3d206d756e5f
8000cee0:	2520                	fld	fs0,72(a0)
8000cee2:	0a64                	addi	s1,sp,284
8000cee4:	0000                	unimp
8000cee6:	0000                	unimp
8000cee8:	656d                	lui	a0,0x1b
8000ceea:	206d                	jal	8000cf94 <_malloc_usable_size_r+0x15c>
8000ceec:	7266                	flw	ft4,120(sp)
8000ceee:	6565                	lui	a0,0x19
8000cef0:	6f20                	flw	fs0,88(a4)
8000cef2:	000a216b          	0xa216b
8000cef6:	0000                	unimp
8000cef8:	656d                	lui	a0,0x1b
8000cefa:	206d                	jal	8000cfa4 <_malloc_usable_size_r+0x16c>
8000cefc:	7266                	flw	ft4,120(sp)
8000cefe:	6565                	lui	a0,0x19
8000cf00:	6620                	flw	fs0,72(a2)
8000cf02:	6961                	lui	s2,0x18
8000cf04:	656c                	flw	fa1,76(a0)
8000cf06:	2164                	fld	fs1,192(a0)
8000cf08:	000a                	0xa
8000cf0a:	0000                	unimp
8000cf0c:	7845                	lui	a6,0xffff1
8000cf0e:	6d61                	lui	s10,0x18
8000cf10:	6c70                	flw	fa2,92(s0)
8000cf12:	5f65                	li	t5,-7
8000cf14:	7645                	lui	a2,0xffff1
8000cf16:	6e65                	lui	t3,0x19
8000cf18:	2074                	fld	fa3,192(s0)
8000cf1a:	74696177          	0x74696177
8000cf1e:	6520                	flw	fs0,72(a0)
8000cf20:	6576                	flw	fa0,92(sp)
8000cf22:	746e                	flw	fs0,248(sp)
8000cf24:	3020                	fld	fs0,96(s0)
8000cf26:	2578                	fld	fa4,200(a0)
8000cf28:	2078                	fld	fa4,192(s0)
8000cf2a:	000a                	0xa
8000cf2c:	7845                	lui	a6,0xffff1
8000cf2e:	6d61                	lui	s10,0x18
8000cf30:	6c70                	flw	fa2,92(s0)
8000cf32:	5f65                	li	t5,-7
8000cf34:	7645                	lui	a2,0xffff1
8000cf36:	6e65                	lui	t3,0x19
8000cf38:	2c74                	fld	fa3,216(s0)
8000cf3a:	6572                	flw	fa0,28(sp)
8000cf3c:	6461                	lui	s0,0x18
8000cf3e:	6520                	flw	fs0,72(a0)
8000cf40:	6576                	flw	fa0,92(sp)
8000cf42:	746e                	flw	fs0,248(sp)
8000cf44:	3a20                	fld	fs0,112(a2)
8000cf46:	7830                	flw	fa2,112(s0)
8000cf48:	7825                	lui	a6,0xfffe9
8000cf4a:	000a                	0xa
8000cf4c:	7845                	lui	a6,0xffff1
8000cf4e:	6d61                	lui	s10,0x18
8000cf50:	6c70                	flw	fa2,92(s0)
8000cf52:	5f65                	li	t5,-7
8000cf54:	7645                	lui	a2,0xffff1
8000cf56:	6e65                	lui	t3,0x19
8000cf58:	2c74                	fld	fa3,216(s0)
8000cf5a:	6572                	flw	fa0,28(sp)
8000cf5c:	6461                	lui	s0,0x18
8000cf5e:	6520                	flw	fs0,72(a0)
8000cf60:	6576                	flw	fa0,92(sp)
8000cf62:	746e                	flw	fs0,248(sp)
8000cf64:	7420                	flw	fs0,104(s0)
8000cf66:	6d69                	lui	s10,0x1a
8000cf68:	6f65                	lui	t5,0x19
8000cf6a:	7475                	lui	s0,0xffffd
8000cf6c:	000a                	0xa
8000cf6e:	0000                	unimp
8000cf70:	6e69                	lui	t3,0x1a
8000cf72:	7469                	lui	s0,0xffffa
8000cf74:	6520                	flw	fs0,72(a0)
8000cf76:	6576                	flw	fa0,92(sp)
8000cf78:	746e                	flw	fs0,248(sp)
8000cf7a:	6620                	flw	fs0,72(a2)
8000cf7c:	6961                	lui	s2,0x18
8000cf7e:	656c                	flw	fa1,76(a0)
8000cf80:	2064                	fld	fs1,192(s0)
8000cf82:	0a2e                	slli	s4,s4,0xb
8000cf84:	0000                	unimp
8000cf86:	0000                	unimp
8000cf88:	7645                	lui	a2,0xffff1
8000cf8a:	6e65                	lui	t3,0x19
8000cf8c:	5474                	lw	a3,108(s0)
8000cf8e:	00316b73          	csrrsi	s6,fcsr,2
8000cf92:	0000                	unimp
8000cf94:	6174                	flw	fa3,68(a0)
8000cf96:	63206b73          	csrrsi	s6,0x632,0
8000cf9a:	6572                	flw	fa0,28(sp)
8000cf9c:	7461                	lui	s0,0xffff8
8000cf9e:	2065                	jal	8000d046 <_malloc_usable_size_r+0x20e>
8000cfa0:	6166                	flw	ft2,88(sp)
8000cfa2:	6c69                	lui	s8,0x1a
8000cfa4:	6465                	lui	s0,0x19
8000cfa6:	2e20                	fld	fs0,88(a2)
8000cfa8:	000a                	0xa
8000cfaa:	0000                	unimp
8000cfac:	7845                	lui	a6,0xffff1
8000cfae:	6d61                	lui	s10,0x18
8000cfb0:	6c70                	flw	fa2,92(s0)
8000cfb2:	5f65                	li	t5,-7
8000cfb4:	6154                	flw	fa3,4(a0)
8000cfb6:	6e456b73          	csrrsi	s6,0x6e4,10
8000cfba:	7274                	flw	fa3,100(a2)
8000cfbc:	5f79                	li	t5,-2
8000cfbe:	7645                	lui	a2,0xffff1
8000cfc0:	6e65                	lui	t3,0x19
8000cfc2:	2074                	fld	fa3,192(s0)
8000cfc4:	74697277          	0x74697277
8000cfc8:	2065                	jal	8000d070 <_malloc_usable_size_r+0x238>
8000cfca:	7665                	lui	a2,0xffff9
8000cfcc:	6e65                	lui	t3,0x19
8000cfce:	2074                	fld	fa3,192(s0)
8000cfd0:	0a2e                	slli	s4,s4,0xb
8000cfd2:	0000                	unimp
8000cfd4:	7665                	lui	a2,0xffff9
8000cfd6:	6e65                	lui	t3,0x19
8000cfd8:	2074                	fld	fa3,192(s0)
8000cfda:	74697277          	0x74697277
8000cfde:	2065                	jal	8000d086 <_malloc_usable_size_r+0x24e>
8000cfe0:	6166                	flw	ft2,88(sp)
8000cfe2:	6c69                	lui	s8,0x1a
8000cfe4:	6465                	lui	s0,0x19
8000cfe6:	2e20                	fld	fs0,88(a2)
8000cfe8:	000a                	0xa
8000cfea:	0000                	unimp
8000cfec:	7645                	lui	a2,0xffff1
8000cfee:	6e65                	lui	t3,0x19
8000cff0:	4d74                	lw	a3,92(a0)
8000cff2:	7361                	lui	t1,0xffff8
8000cff4:	64253a6b          	0x64253a6b
8000cff8:	000a                	0xa
8000cffa:	0000                	unimp
8000cffc:	6174                	flw	fa3,68(a0)
8000cffe:	64206b73          	csrrsi	s6,0x642,0
8000d002:	6c65                	lui	s8,0x19
8000d004:	7465                	lui	s0,0xffff9
8000d006:	2065                	jal	8000d0ae <_malloc_usable_size_r+0x276>
8000d008:	6166                	flw	ft2,88(sp)
8000d00a:	6c69                	lui	s8,0x1a
8000d00c:	6465                	lui	s0,0x19
8000d00e:	2e20                	fld	fs0,88(a2)
8000d010:	000a                	0xa
8000d012:	0000                	unimp
8000d014:	6e69                	lui	t3,0x1a
8000d016:	7469                	lui	s0,0xffffa
8000d018:	6169                	addi	sp,sp,208
8000d01a:	2e6c                	fld	fa1,216(a2)
8000d01c:	2e2e                	fld	ft8,200(sp)
8000d01e:	2e2e                	fld	ft8,200(sp)
8000d020:	0a2e                	slli	s4,s4,0xb
8000d022:	0000                	unimp
8000d024:	6e69                	lui	t3,0x1a
8000d026:	7469                	lui	s0,0xffffa
8000d028:	6169                	addi	sp,sp,208
8000d02a:	206c                	fld	fa1,192(s0)
8000d02c:	6166                	flw	ft2,88(sp)
8000d02e:	6c69                	lui	s8,0x1a
8000d030:	6465                	lui	s0,0x19
8000d032:	000a                	0xa
8000d034:	6f6e                	flw	ft10,216(sp)
8000d036:	6564                	flw	fs1,76(a0)
8000d038:	6120                	flw	fs0,64(a0)
8000d03a:	6464                	flw	fs1,76(s0)
8000d03c:	6120                	flw	fs0,64(a0)
8000d03e:	646e                	flw	fs0,216(sp)
8000d040:	7420                	flw	fs0,104(s0)
8000d042:	6961                	lui	s2,0x18
8000d044:	206c                	fld	fa1,192(s0)
8000d046:	6461                	lui	s0,0x18
8000d048:	2e64                	fld	fs1,216(a2)
8000d04a:	2e2e                	fld	ft8,200(sp)
8000d04c:	2e2e                	fld	ft8,200(sp)
8000d04e:	0a2e                	slli	s4,s4,0xb
8000d050:	0000                	unimp
8000d052:	0000                	unimp
8000d054:	6461                	lui	s0,0x18
8000d056:	2064                	fld	fs1,192(s0)
8000d058:	6f6e                	flw	ft10,216(sp)
8000d05a:	6564                	flw	fs1,76(a0)
8000d05c:	7320                	flw	fs0,96(a4)
8000d05e:	6375                	lui	t1,0x1d
8000d060:	73736563          	bltu	t1,s7,8000d78a <_malloc_usable_size_r+0x952>
8000d064:	000a                	0xa
8000d066:	0000                	unimp
8000d068:	6461                	lui	s0,0x18
8000d06a:	2064                	fld	fs1,192(s0)
8000d06c:	6174                	flw	fa3,68(a0)
8000d06e:	6c69                	lui	s8,0x1a
8000d070:	7320                	flw	fs0,96(a4)
8000d072:	6375                	lui	t1,0x1d
8000d074:	73736563          	bltu	t1,s7,8000d79e <_malloc_usable_size_r+0x966>
8000d078:	000a                	0xa
8000d07a:	0000                	unimp
8000d07c:	6564                	flw	fs1,76(a0)
8000d07e:	656c                	flw	fa1,76(a0)
8000d080:	6574                	flw	fa3,76(a0)
8000d082:	6e20                	flw	fs0,88(a2)
8000d084:	2e65646f          	jal	s0,8006336a <__stack_top+0x24d6a>
8000d088:	2e2e                	fld	ft8,200(sp)
8000d08a:	2e2e                	fld	ft8,200(sp)
8000d08c:	0a2e                	slli	s4,s4,0xb
8000d08e:	0000                	unimp
8000d090:	6564                	flw	fs1,76(a0)
8000d092:	656c                	flw	fa1,76(a0)
8000d094:	6574                	flw	fa3,76(a0)
8000d096:	6e20                	flw	fs0,88(a2)
8000d098:	2065646f          	jal	s0,8006329e <__stack_top+0x24c9e>
8000d09c:	63637573          	csrrci	a0,0x636,6
8000d0a0:	7365                	lui	t1,0xffff9
8000d0a2:	00000a73          	0xa73
8000d0a6:	0000                	unimp
8000d0a8:	6564                	flw	fs1,76(a0)
8000d0aa:	656c                	flw	fa1,76(a0)
8000d0ac:	6574                	flw	fa3,76(a0)
8000d0ae:	6e20                	flw	fs0,88(a2)
8000d0b0:	2065646f          	jal	s0,800632b6 <__stack_top+0x24cb6>
8000d0b4:	7265                	lui	tp,0xffff9
8000d0b6:	6f72                	flw	ft10,28(sp)
8000d0b8:	0a72                	slli	s4,s4,0x1c
8000d0ba:	0000                	unimp
8000d0bc:	646e6573          	csrrsi	a0,0x646,28
8000d0c0:	6d20                	flw	fs0,88(a0)
8000d0c2:	7365                	lui	t1,0xffff9
8000d0c4:	65676173          	csrrsi	sp,0x656,14
8000d0c8:	6620                	flw	fs0,72(a2)
8000d0ca:	6961                	lui	s2,0x18
8000d0cc:	756c                	flw	fa1,108(a0)
8000d0ce:	6572                	flw	fa0,28(sp)
8000d0d0:	652c                	flw	fa1,72(a0)
8000d0d2:	7272                	flw	ft4,60(sp)
8000d0d4:	253a726f          	jal	tp,800b4b26 <__stack_top+0x76526>
8000d0d8:	0a78                	addi	a4,sp,284
8000d0da:	0000                	unimp
8000d0dc:	6572                	flw	fa0,28(sp)
8000d0de:	6d207663          	bleu	s2,zero,8000d7aa <_malloc_usable_size_r+0x972>
8000d0e2:	7365                	lui	t1,0xffff9
8000d0e4:	65676173          	csrrsi	sp,0x656,14
8000d0e8:	6620                	flw	fs0,72(a2)
8000d0ea:	6961                	lui	s2,0x18
8000d0ec:	756c                	flw	fa1,108(a0)
8000d0ee:	6572                	flw	fa0,28(sp)
8000d0f0:	652c                	flw	fa1,72(a0)
8000d0f2:	7272                	flw	ft4,60(sp)
8000d0f4:	253a726f          	jal	tp,800b4b46 <__stack_top+0x76546>
8000d0f8:	0a78                	addi	a4,sp,284
8000d0fa:	0000                	unimp
8000d0fc:	6572                	flw	fa0,28(sp)
8000d0fe:	6d207663          	bleu	s2,zero,8000d7ca <_malloc_usable_size_r+0x992>
8000d102:	7365                	lui	t1,0xffff9
8000d104:	65676173          	csrrsi	sp,0x656,14
8000d108:	253a                	fld	fa0,392(sp)
8000d10a:	00000a73          	0xa73
8000d10e:	0000                	unimp
8000d110:	6564                	flw	fs1,76(a0)
8000d112:	656c                	flw	fa1,76(a0)
8000d114:	6574                	flw	fa3,76(a0)
8000d116:	7420                	flw	fs0,104(s0)
8000d118:	6568                	flw	fa0,76(a0)
8000d11a:	7120                	flw	fs0,96(a0)
8000d11c:	6575                	lui	a0,0x1d
8000d11e:	6575                	lui	a0,0x1d
8000d120:	7320                	flw	fs0,96(a4)
8000d122:	6375                	lui	t1,0x1d
8000d124:	73736563          	bltu	t1,s7,8000d84e <_malloc_usable_size_r+0xa16>
8000d128:	0a21                	addi	s4,s4,8
8000d12a:	0000                	unimp
8000d12c:	646e6573          	csrrsi	a0,0x646,28
8000d130:	7551                	lui	a0,0xffff4
8000d132:	7565                	lui	a0,0xffff9
8000d134:	0065                	c.addi	zero,25
8000d136:	0000                	unimp
8000d138:	61657263          	bleu	s6,a0,8000d73c <_malloc_usable_size_r+0x904>
8000d13c:	6574                	flw	fa3,76(a0)
8000d13e:	7420                	flw	fs0,104(s0)
8000d140:	7361                	lui	t1,0xffff8
8000d142:	6620316b          	0x6620316b
8000d146:	6961                	lui	s2,0x18
8000d148:	656c                	flw	fa1,76(a0)
8000d14a:	2164                	fld	fs1,192(a0)
8000d14c:	652c                	flw	fa1,72(a0)
8000d14e:	7272                	flw	ft4,60(sp)
8000d150:	253a726f          	jal	tp,800b4ba2 <__stack_top+0x765a2>
8000d154:	0a78                	addi	a4,sp,284
8000d156:	0000                	unimp
8000d158:	61657263          	bleu	s6,a0,8000d75c <_malloc_usable_size_r+0x924>
8000d15c:	6574                	flw	fa3,76(a0)
8000d15e:	7420                	flw	fs0,104(s0)
8000d160:	7361                	lui	t1,0xffff8
8000d162:	6620326b          	0x6620326b
8000d166:	6961                	lui	s2,0x18
8000d168:	656c                	flw	fa1,76(a0)
8000d16a:	2164                	fld	fs1,192(a0)
8000d16c:	652c                	flw	fa1,72(a0)
8000d16e:	7272                	flw	ft4,60(sp)
8000d170:	253a726f          	jal	tp,800b4bc2 <__stack_top+0x765c2>
8000d174:	0a78                	addi	a4,sp,284
8000d176:	0000                	unimp
8000d178:	7571                	lui	a0,0xffffc
8000d17a:	7565                	lui	a0,0xffff9
8000d17c:	0065                	c.addi	zero,25
8000d17e:	0000                	unimp
8000d180:	61657263          	bleu	s6,a0,8000d784 <_malloc_usable_size_r+0x94c>
8000d184:	6574                	flw	fa3,76(a0)
8000d186:	7120                	flw	fs0,96(a0)
8000d188:	6575                	lui	a0,0x1d
8000d18a:	6575                	lui	a0,0x1d
8000d18c:	6620                	flw	fs0,72(a2)
8000d18e:	6961                	lui	s2,0x18
8000d190:	756c                	flw	fa1,108(a0)
8000d192:	6572                	flw	fa0,28(sp)
8000d194:	2c21                	jal	8000d3ac <_malloc_usable_size_r+0x574>
8000d196:	7265                	lui	tp,0xffff9
8000d198:	6f72                	flw	ft10,28(sp)
8000d19a:	3a72                	fld	fs4,312(sp)
8000d19c:	7825                	lui	a6,0xfffe9
8000d19e:	000a                	0xa
8000d1a0:	61657263          	bleu	s6,a0,8000d7a4 <_malloc_usable_size_r+0x96c>
8000d1a4:	6574                	flw	fa3,76(a0)
8000d1a6:	7420                	flw	fs0,104(s0)
8000d1a8:	6568                	flw	fa0,76(a0)
8000d1aa:	7120                	flw	fs0,96(a0)
8000d1ac:	6575                	lui	a0,0x1d
8000d1ae:	6575                	lui	a0,0x1d
8000d1b0:	7320                	flw	fs0,96(a4)
8000d1b2:	6375                	lui	t1,0x1d
8000d1b4:	73736563          	bltu	t1,s7,8000d8de <_malloc_usable_size_r+0xaa6>
8000d1b8:	0a21                	addi	s4,s4,8
8000d1ba:	0000                	unimp
8000d1bc:	6174                	flw	fa3,68(a0)
8000d1be:	20316b73          	csrrsi	s6,0x203,2
8000d1c2:	7274                	flw	fa3,100(a2)
8000d1c4:	2079                	jal	8000d252 <_malloc_usable_size_r+0x41a>
8000d1c6:	6f74                	flw	fa3,92(a4)
8000d1c8:	6720                	flw	fs0,72(a4)
8000d1ca:	7465                	lui	s0,0xffff9
8000d1cc:	6d20                	flw	fs0,88(a0)
8000d1ce:	7475                	lui	s0,0xffffd
8000d1d0:	7865                	lui	a6,0xffff9
8000d1d2:	202c                	fld	fa1,64(s0)
8000d1d4:	74696177          	0x74696177
8000d1d8:	3120                	fld	fs0,96(a0)
8000d1da:	2030                	fld	fa2,64(s0)
8000d1dc:	6954                	flw	fa3,20(a0)
8000d1de:	0a2e6b63          	bltu	t3,sp,8000d294 <_malloc_usable_size_r+0x45c>
8000d1e2:	0000                	unimp
8000d1e4:	6174                	flw	fa3,68(a0)
8000d1e6:	20316b73          	csrrsi	s6,0x203,2
8000d1ea:	20746567          	0x20746567
8000d1ee:	756d                	lui	a0,0xffffb
8000d1f0:	6574                	flw	fa3,76(a0)
8000d1f2:	2078                	fld	fa4,192(s0)
8000d1f4:	65545f67          	0x65545f67
8000d1f8:	756d7473          	csrrci	s0,0x756,26
8000d1fc:	3078                	fld	fa4,224(s0)
8000d1fe:	2e31                	jal	8000d51a <_malloc_usable_size_r+0x6e2>
8000d200:	000a                	0xa
8000d202:	0000                	unimp
8000d204:	6174                	flw	fa3,68(a0)
8000d206:	20316b73          	csrrsi	s6,0x203,2
8000d20a:	6974                	flw	fa3,84(a0)
8000d20c:	656d                	lui	a0,0x1b
8000d20e:	2074756f          	jal	a0,80054c14 <__stack_top+0x16614>
8000d212:	6e61                	lui	t3,0x18
8000d214:	2064                	fld	fs1,192(s0)
8000d216:	7274                	flw	fa3,100(a2)
8000d218:	2079                	jal	8000d2a6 <_malloc_usable_size_r+0x46e>
8000d21a:	6f74                	flw	fa3,92(a4)
8000d21c:	6720                	flw	fs0,72(a4)
8000d21e:	7465                	lui	s0,0xffff9
8000d220:	2020                	fld	fs0,64(s0)
8000d222:	756d                	lui	a0,0xffffb
8000d224:	6574                	flw	fa3,76(a0)
8000d226:	2c78                	fld	fa4,216(s0)
8000d228:	7720                	flw	fs0,104(a4)
8000d22a:	6961                	lui	s2,0x18
8000d22c:	2074                	fld	fa3,192(s0)
8000d22e:	6f66                	flw	ft10,88(sp)
8000d230:	6572                	flw	fa0,28(sp)
8000d232:	6576                	flw	fa0,92(sp)
8000d234:	2e72                	fld	ft8,280(sp)
8000d236:	000a                	0xa
8000d238:	6174                	flw	fa3,68(a0)
8000d23a:	20316b73          	csrrsi	s6,0x203,2
8000d23e:	74696177          	0x74696177
8000d242:	6620                	flw	fs0,72(a2)
8000d244:	7665726f          	jal	tp,800649aa <__stack_top+0x263aa>
8000d248:	7265                	lui	tp,0xffff9
8000d24a:	672c                	flw	fa1,72(a4)
8000d24c:	6d20746f          	jal	s0,8001491e <__global_pointer$+0x65ee>
8000d250:	7475                	lui	s0,0xffffd
8000d252:	7865                	lui	a6,0xffff9
8000d254:	6720                	flw	fs0,72(a4)
8000d256:	545f 7365 6d74      	0x6d747365545f
8000d25c:	7875                	lui	a6,0xffffd
8000d25e:	3130                	fld	fa2,96(a0)
8000d260:	7320                	flw	fs0,96(a4)
8000d262:	6375                	lui	t1,0x1d
8000d264:	73736563          	bltu	t1,s7,8000d98e <_malloc_usable_size_r+0xb56>
8000d268:	0a2e                	slli	s4,s4,0xb
8000d26a:	0000                	unimp
8000d26c:	6174                	flw	fa3,68(a0)
8000d26e:	20326b73          	csrrsi	s6,0x203,4
8000d272:	7274                	flw	fa3,100(a2)
8000d274:	2079                	jal	8000d302 <_malloc_usable_size_r+0x4ca>
8000d276:	6f74                	flw	fa3,92(a4)
8000d278:	6720                	flw	fs0,72(a4)
8000d27a:	7465                	lui	s0,0xffff9
8000d27c:	6d20                	flw	fs0,88(a0)
8000d27e:	7475                	lui	s0,0xffffd
8000d280:	7865                	lui	a6,0xffff9
8000d282:	202c                	fld	fa1,64(s0)
8000d284:	74696177          	0x74696177
8000d288:	6620                	flw	fs0,72(a2)
8000d28a:	7665726f          	jal	tp,800649f0 <__stack_top+0x263f0>
8000d28e:	7265                	lui	tp,0xffff9
8000d290:	0a2e                	slli	s4,s4,0xb
8000d292:	0000                	unimp
8000d294:	6174                	flw	fa3,68(a0)
8000d296:	20326b73          	csrrsi	s6,0x203,4
8000d29a:	4f4c                	lw	a1,28(a4)
8000d29c:	754d5f53          	0x754d5f53
8000d2a0:	5078                	lw	a4,100(s0)
8000d2a2:	6e65                	lui	t3,0x19
8000d2a4:	2064                	fld	fs1,192(s0)
8000d2a6:	6166                	flw	ft2,88(sp)
8000d2a8:	6c69                	lui	s8,0x1a
8000d2aa:	6465                	lui	s0,0x19
8000d2ac:	2e20                	fld	fs0,88(a2)
8000d2ae:	000a                	0xa
8000d2b0:	6174                	flw	fa3,68(a0)
8000d2b2:	20326b73          	csrrsi	s6,0x203,4
8000d2b6:	20746567          	0x20746567
8000d2ba:	756d                	lui	a0,0xffffb
8000d2bc:	6574                	flw	fa3,76(a0)
8000d2be:	2078                	fld	fa4,192(s0)
8000d2c0:	65545f67          	0x65545f67
8000d2c4:	756d7473          	csrrci	s0,0x756,26
8000d2c8:	3078                	fld	fa4,224(s0)
8000d2ca:	2031                	jal	8000d2d6 <_malloc_usable_size_r+0x49e>
8000d2cc:	6e61                	lui	t3,0x18
8000d2ce:	2064                	fld	fs1,192(s0)
8000d2d0:	70737573          	csrrci	a0,0x707,6
8000d2d4:	6e65                	lui	t3,0x19
8000d2d6:	2064                	fld	fs1,192(s0)
8000d2d8:	3031                	jal	8000cae4 <__smakebuf_r+0xd8>
8000d2da:	2030                	fld	fa2,64(s0)
8000d2dc:	6954                	flw	fa3,20(a0)
8000d2de:	0a2e6b63          	bltu	t3,sp,8000d394 <_malloc_usable_size_r+0x55c>
8000d2e2:	0000                	unimp
8000d2e4:	6174                	flw	fa3,68(a0)
8000d2e6:	20326b73          	csrrsi	s6,0x203,4
8000d2ea:	6572                	flw	fa0,28(sp)
8000d2ec:	656d7573          	csrrci	a0,0x656,26
8000d2f0:	2064                	fld	fs1,192(s0)
8000d2f2:	6e61                	lui	t3,0x18
8000d2f4:	2064                	fld	fs1,192(s0)
8000d2f6:	6f70                	flw	fa2,92(a4)
8000d2f8:	74207473          	csrrci	s0,0x742,0
8000d2fc:	6568                	flw	fa0,76(a0)
8000d2fe:	6720                	flw	fs0,72(a4)
8000d300:	545f 7365 6d74      	0x6d747365545f
8000d306:	7875                	lui	a6,0xffffd
8000d308:	3130                	fld	fa2,96(a0)
8000d30a:	000a                	0xa
8000d30c:	754d                	lui	a0,0xffff3
8000d30e:	6574                	flw	fa3,76(a0)
8000d310:	5478                	lw	a4,108(s0)
8000d312:	00316b73          	csrrsi	s6,fcsr,2
8000d316:	0000                	unimp
8000d318:	6174                	flw	fa3,68(a0)
8000d31a:	20316b73          	csrrsi	s6,0x203,2
8000d31e:	61657263          	bleu	s6,a0,8000d922 <_malloc_usable_size_r+0xaea>
8000d322:	6574                	flw	fa3,76(a0)
8000d324:	6620                	flw	fs0,72(a2)
8000d326:	6961                	lui	s2,0x18
8000d328:	656c                	flw	fa1,76(a0)
8000d32a:	2064                	fld	fs1,192(s0)
8000d32c:	0a2e                	slli	s4,s4,0xb
8000d32e:	0000                	unimp
8000d330:	754d                	lui	a0,0xffff3
8000d332:	6574                	flw	fa3,76(a0)
8000d334:	5478                	lw	a4,108(s0)
8000d336:	00326b73          	csrrsi	s6,fcsr,4
8000d33a:	0000                	unimp
8000d33c:	6174                	flw	fa3,68(a0)
8000d33e:	20326b73          	csrrsi	s6,0x203,4
8000d342:	61657263          	bleu	s6,a0,8000d946 <_malloc_usable_size_r+0xb0e>
8000d346:	6574                	flw	fa3,76(a0)
8000d348:	6620                	flw	fs0,72(a2)
8000d34a:	6961                	lui	s2,0x18
8000d34c:	656c                	flw	fa1,76(a0)
8000d34e:	2064                	fld	fs1,192(s0)
8000d350:	0a2e                	slli	s4,s4,0xb
8000d352:	0000                	unimp
8000d354:	6174                	flw	fa3,68(a0)
8000d356:	20316b73          	csrrsi	s6,0x203,2
8000d35a:	6564                	flw	fs1,76(a0)
8000d35c:	656c                	flw	fa1,76(a0)
8000d35e:	6574                	flw	fa3,76(a0)
8000d360:	6620                	flw	fs0,72(a2)
8000d362:	6961                	lui	s2,0x18
8000d364:	656c                	flw	fa1,76(a0)
8000d366:	2064                	fld	fs1,192(s0)
8000d368:	0a2e                	slli	s4,s4,0xb
8000d36a:	0000                	unimp
8000d36c:	6174                	flw	fa3,68(a0)
8000d36e:	20326b73          	csrrsi	s6,0x203,4
8000d372:	6564                	flw	fs1,76(a0)
8000d374:	656c                	flw	fa1,76(a0)
8000d376:	6574                	flw	fa3,76(a0)
8000d378:	6620                	flw	fs0,72(a2)
8000d37a:	6961                	lui	s2,0x18
8000d37c:	656c                	flw	fa1,76(a0)
8000d37e:	2064                	fld	fs1,192(s0)
8000d380:	0a2e                	slli	s4,s4,0xb
8000d382:	0000                	unimp
8000d384:	7845                	lui	a6,0xffff1
8000d386:	6d61                	lui	s10,0x18
8000d388:	6c70                	flw	fa2,92(s0)
8000d38a:	5f65                	li	t5,-7
8000d38c:	546d6553          	0x546d6553
8000d390:	7361                	lui	t1,0xffff8
8000d392:	7420316b          	0x7420316b
8000d396:	7972                	flw	fs2,60(sp)
8000d398:	6720                	flw	fs0,72(a4)
8000d39a:	7465                	lui	s0,0xffff9
8000d39c:	7320                	flw	fs0,96(a4)
8000d39e:	6d65                	lui	s10,0x19
8000d3a0:	6720                	flw	fs0,72(a4)
8000d3a2:	755f 5373 6d65      	0x6d655373755f
8000d3a8:	4449                	li	s0,18
8000d3aa:	2c20                	fld	fs0,88(s0)
8000d3ac:	6974                	flw	fa3,84(a0)
8000d3ae:	656d                	lui	a0,0x1b
8000d3b0:	2074756f          	jal	a0,80054db6 <__stack_top+0x167b6>
8000d3b4:	3031                	jal	8000cbc0 <_free_r+0x30>
8000d3b6:	7420                	flw	fs0,104(s0)
8000d3b8:	6369                	lui	t1,0x1a
8000d3ba:	0a2e736b          	0xa2e736b
8000d3be:	0000                	unimp
8000d3c0:	7845                	lui	a6,0xffff1
8000d3c2:	6d61                	lui	s10,0x18
8000d3c4:	6c70                	flw	fa2,92(s0)
8000d3c6:	5f65                	li	t5,-7
8000d3c8:	546d6553          	0x546d6553
8000d3cc:	7361                	lui	t1,0xffff8
8000d3ce:	7420316b          	0x7420316b
8000d3d2:	6d69                	lui	s10,0x1a
8000d3d4:	6f65                	lui	t5,0x19
8000d3d6:	7475                	lui	s0,0xffffd
8000d3d8:	6120                	flw	fs0,64(a0)
8000d3da:	646e                	flw	fs0,216(sp)
8000d3dc:	7420                	flw	fs0,104(s0)
8000d3de:	7972                	flw	fs2,60(sp)
8000d3e0:	6720                	flw	fs0,72(a4)
8000d3e2:	7465                	lui	s0,0xffff9
8000d3e4:	7320                	flw	fs0,96(a4)
8000d3e6:	6d65                	lui	s10,0x19
8000d3e8:	6720                	flw	fs0,72(a4)
8000d3ea:	755f 5373 6d65      	0x6d655373755f
8000d3f0:	4449                	li	s0,18
8000d3f2:	7720                	flw	fs0,104(a4)
8000d3f4:	6961                	lui	s2,0x18
8000d3f6:	2074                	fld	fa3,192(s0)
8000d3f8:	6f66                	flw	ft10,88(sp)
8000d3fa:	6572                	flw	fa0,28(sp)
8000d3fc:	6576                	flw	fa0,92(sp)
8000d3fe:	2e72                	fld	ft8,280(sp)
8000d400:	000a                	0xa
8000d402:	0000                	unimp
8000d404:	7845                	lui	a6,0xffff1
8000d406:	6d61                	lui	s10,0x18
8000d408:	6c70                	flw	fa2,92(s0)
8000d40a:	5f65                	li	t5,-7
8000d40c:	546d6553          	0x546d6553
8000d410:	7361                	lui	t1,0xffff8
8000d412:	7720316b          	0x7720316b
8000d416:	6961                	lui	s2,0x18
8000d418:	5f74                	lw	a3,124(a4)
8000d41a:	6f66                	flw	ft10,88(sp)
8000d41c:	6572                	flw	fa0,28(sp)
8000d41e:	6576                	flw	fa0,92(sp)
8000d420:	2072                	fld	ft0,280(sp)
8000d422:	6e61                	lui	t3,0x18
8000d424:	2064                	fld	fs1,192(s0)
8000d426:	20746f67          	0x20746f67
8000d42a:	206d6573          	csrrsi	a0,0x206,26
8000d42e:	73755f67          	0x73755f67
8000d432:	496d6553          	0x496d6553
8000d436:	2044                	fld	fs1,128(s0)
8000d438:	63637573          	csrrci	a0,0x636,6
8000d43c:	7365                	lui	t1,0xffff9
8000d43e:	000a2e73          	csrrs	t3,0x0,s4
8000d442:	0000                	unimp
8000d444:	7845                	lui	a6,0xffff1
8000d446:	6d61                	lui	s10,0x18
8000d448:	6c70                	flw	fa2,92(s0)
8000d44a:	5f65                	li	t5,-7
8000d44c:	546d6553          	0x546d6553
8000d450:	7361                	lui	t1,0xffff8
8000d452:	7420326b          	0x7420326b
8000d456:	7972                	flw	fs2,60(sp)
8000d458:	6720                	flw	fs0,72(a4)
8000d45a:	7465                	lui	s0,0xffff9
8000d45c:	7320                	flw	fs0,96(a4)
8000d45e:	6d65                	lui	s10,0x19
8000d460:	6720                	flw	fs0,72(a4)
8000d462:	755f 5373 6d65      	0x6d655373755f
8000d468:	4449                	li	s0,18
8000d46a:	7720                	flw	fs0,104(a4)
8000d46c:	6961                	lui	s2,0x18
8000d46e:	2074                	fld	fa3,192(s0)
8000d470:	6f66                	flw	ft10,88(sp)
8000d472:	6572                	flw	fa0,28(sp)
8000d474:	6576                	flw	fa0,92(sp)
8000d476:	2e72                	fld	ft8,280(sp)
8000d478:	000a                	0xa
8000d47a:	0000                	unimp
8000d47c:	7845                	lui	a6,0xffff1
8000d47e:	6d61                	lui	s10,0x18
8000d480:	6c70                	flw	fa2,92(s0)
8000d482:	5f65                	li	t5,-7
8000d484:	546d6553          	0x546d6553
8000d488:	7361                	lui	t1,0xffff8
8000d48a:	6720326b          	0x6720326b
8000d48e:	7465                	lui	s0,0xffff9
8000d490:	7320                	flw	fs0,96(a4)
8000d492:	6d65                	lui	s10,0x19
8000d494:	6720                	flw	fs0,72(a4)
8000d496:	755f 5373 6d65      	0x6d655373755f
8000d49c:	4449                	li	s0,18
8000d49e:	6120                	flw	fs0,64(a0)
8000d4a0:	646e                	flw	fs0,216(sp)
8000d4a2:	7420                	flw	fs0,104(s0)
8000d4a4:	6568                	flw	fa0,76(a0)
8000d4a6:	206e                	fld	ft0,216(sp)
8000d4a8:	6564                	flw	fs1,76(a0)
8000d4aa:	616c                	flw	fa1,68(a0)
8000d4ac:	2079                	jal	8000d53a <_malloc_usable_size_r+0x702>
8000d4ae:	3032                	fld	ft0,296(sp)
8000d4b0:	6974                	flw	fa3,84(a0)
8000d4b2:	20736b63          	bltu	t1,t2,8000d6c8 <_malloc_usable_size_r+0x890>
8000d4b6:	0a2e                	slli	s4,s4,0xb
8000d4b8:	0000                	unimp
8000d4ba:	0000                	unimp
8000d4bc:	7845                	lui	a6,0xffff1
8000d4be:	6d61                	lui	s10,0x18
8000d4c0:	6c70                	flw	fa2,92(s0)
8000d4c2:	5f65                	li	t5,-7
8000d4c4:	546d6553          	0x546d6553
8000d4c8:	7361                	lui	t1,0xffff8
8000d4ca:	7020326b          	0x7020326b
8000d4ce:	2074736f          	jal	t1,80054ed4 <__stack_top+0x168d4>
8000d4d2:	206d6573          	csrrsi	a0,0x206,26
8000d4d6:	73755f67          	0x73755f67
8000d4da:	496d6553          	0x496d6553
8000d4de:	2044                	fld	fs1,128(s0)
8000d4e0:	0a2e                	slli	s4,s4,0xb
8000d4e2:	0000                	unimp
8000d4e4:	754d                	lui	a0,0xffff3
8000d4e6:	6574                	flw	fa3,76(a0)
8000d4e8:	5478                	lw	a4,108(s0)
8000d4ea:	00316b73          	csrrsi	s6,fcsr,2
8000d4ee:	0000                	unimp
8000d4f0:	6174                	flw	fa3,68(a0)
8000d4f2:	20316b73          	csrrsi	s6,0x203,2
8000d4f6:	61657263          	bleu	s6,a0,8000dafa <__sf_fake_stdout+0x26>
8000d4fa:	6574                	flw	fa3,76(a0)
8000d4fc:	6620                	flw	fs0,72(a2)
8000d4fe:	6961                	lui	s2,0x18
8000d500:	656c                	flw	fa1,76(a0)
8000d502:	2064                	fld	fs1,192(s0)
8000d504:	0a2e                	slli	s4,s4,0xb
8000d506:	0000                	unimp
8000d508:	754d                	lui	a0,0xffff3
8000d50a:	6574                	flw	fa3,76(a0)
8000d50c:	5478                	lw	a4,108(s0)
8000d50e:	00326b73          	csrrsi	s6,fcsr,4
8000d512:	0000                	unimp
8000d514:	6174                	flw	fa3,68(a0)
8000d516:	20326b73          	csrrsi	s6,0x203,4
8000d51a:	61657263          	bleu	s6,a0,8000db1e <__sf_fake_stdout+0x4a>
8000d51e:	6574                	flw	fa3,76(a0)
8000d520:	6620                	flw	fs0,72(a2)
8000d522:	6961                	lui	s2,0x18
8000d524:	656c                	flw	fa1,76(a0)
8000d526:	2064                	fld	fs1,192(s0)
8000d528:	0a2e                	slli	s4,s4,0xb
8000d52a:	0000                	unimp
8000d52c:	6174                	flw	fa3,68(a0)
8000d52e:	20316b73          	csrrsi	s6,0x203,2
8000d532:	6564                	flw	fs1,76(a0)
8000d534:	656c                	flw	fa1,76(a0)
8000d536:	6574                	flw	fa3,76(a0)
8000d538:	6620                	flw	fs0,72(a2)
8000d53a:	6961                	lui	s2,0x18
8000d53c:	656c                	flw	fa1,76(a0)
8000d53e:	2064                	fld	fs1,192(s0)
8000d540:	0a2e                	slli	s4,s4,0xb
8000d542:	0000                	unimp
8000d544:	6174                	flw	fa3,68(a0)
8000d546:	20326b73          	csrrsi	s6,0x203,4
8000d54a:	6564                	flw	fs1,76(a0)
8000d54c:	656c                	flw	fa1,76(a0)
8000d54e:	6574                	flw	fa3,76(a0)
8000d550:	6620                	flw	fs0,72(a2)
8000d552:	6961                	lui	s2,0x18
8000d554:	656c                	flw	fa1,76(a0)
8000d556:	2064                	fld	fs1,192(s0)
8000d558:	0a2e                	slli	s4,s4,0xb
8000d55a:	0000                	unimp
8000d55c:	654d                	lui	a0,0x13
8000d55e:	206d                	jal	8000d608 <_malloc_usable_size_r+0x7d0>
8000d560:	6f62                	flw	ft10,24(sp)
8000d562:	2078                	fld	fa4,192(s0)
8000d564:	6e69                	lui	t3,0x1a
8000d566:	7469                	lui	s0,0xffffa
8000d568:	6620                	flw	fs0,72(a2)
8000d56a:	6961                	lui	s2,0x18
8000d56c:	656c                	flw	fa1,76(a0)
8000d56e:	0a64                	addi	s1,sp,284
8000d570:	0000                	unimp
8000d572:	0000                	unimp
8000d574:	654d                	lui	a0,0x13
8000d576:	206d                	jal	8000d620 <_malloc_usable_size_r+0x7e8>
8000d578:	6f62                	flw	ft10,24(sp)
8000d57a:	2078                	fld	fa4,192(s0)
8000d57c:	6e69                	lui	t3,0x1a
8000d57e:	7469                	lui	s0,0xffffa
8000d580:	6f20                	flw	fs0,88(a4)
8000d582:	000a216b          	0xa216b
8000d586:	0000                	unimp
8000d588:	654d                	lui	a0,0x13
8000d58a:	206d                	jal	8000d634 <_malloc_usable_size_r+0x7fc>
8000d58c:	6f62                	flw	ft10,24(sp)
8000d58e:	2078                	fld	fa4,192(s0)
8000d590:	6c61                	lui	s8,0x18
8000d592:	6f6c                	flw	fa1,92(a4)
8000d594:	61662063          	0x61662063
8000d598:	6c69                	lui	s8,0x1a
8000d59a:	6465                	lui	s0,0x19
8000d59c:	0a21                	addi	s4,s4,8
8000d59e:	0000                	unimp
8000d5a0:	654d                	lui	a0,0x13
8000d5a2:	206d                	jal	8000d64c <_malloc_usable_size_r+0x814>
8000d5a4:	6f62                	flw	ft10,24(sp)
8000d5a6:	2078                	fld	fa4,192(s0)
8000d5a8:	6c61                	lui	s8,0x18
8000d5aa:	6f6c                	flw	fa1,92(a4)
8000d5ac:	6b6f2063          	0x6b6f2063
8000d5b0:	000a                	0xa
8000d5b2:	0000                	unimp
8000d5b4:	702a                	flw	ft0,168(sp)
8000d5b6:	6e5f 6d75 3d20      	0x3d206d756e5f
8000d5bc:	2520                	fld	fs0,72(a0)
8000d5be:	0a64                	addi	s1,sp,284
8000d5c0:	0000                	unimp
8000d5c2:	0000                	unimp
8000d5c4:	61656c63          	bltu	a0,s6,8000dbdc <gInspect+0x8>
8000d5c8:	2072                	fld	ft0,280(sp)
8000d5ca:	6164                	flw	fs1,68(a0)
8000d5cc:	6174                	flw	fa3,68(a0)
8000d5ce:	6f20                	flw	fs0,88(a4)
8000d5d0:	2a200a6b          	0x2a200a6b
8000d5d4:	5f70                	lw	a2,124(a4)
8000d5d6:	756e                	flw	fa0,248(sp)
8000d5d8:	206d                	jal	8000d682 <_malloc_usable_size_r+0x84a>
8000d5da:	203d                	jal	8000d608 <_malloc_usable_size_r+0x7d0>
8000d5dc:	6425                	lui	s0,0x9
8000d5de:	000a                	0xa
8000d5e0:	654d                	lui	a0,0x13
8000d5e2:	206d                	jal	8000d68c <_malloc_usable_size_r+0x854>
8000d5e4:	6f62                	flw	ft10,24(sp)
8000d5e6:	2078                	fld	fa4,192(s0)
8000d5e8:	7266                	flw	ft4,120(sp)
8000d5ea:	6565                	lui	a0,0x19
8000d5ec:	6f20                	flw	fs0,88(a4)
8000d5ee:	000a216b          	0xa216b
8000d5f2:	0000                	unimp
8000d5f4:	654d                	lui	a0,0x13
8000d5f6:	206d                	jal	8000d6a0 <_malloc_usable_size_r+0x868>
8000d5f8:	6f62                	flw	ft10,24(sp)
8000d5fa:	2078                	fld	fa4,192(s0)
8000d5fc:	7266                	flw	ft4,120(sp)
8000d5fe:	6565                	lui	a0,0x19
8000d600:	6620                	flw	fs0,72(a2)
8000d602:	6961                	lui	s2,0x18
8000d604:	656c                	flw	fa1,76(a0)
8000d606:	2164                	fld	fs1,192(a0)
8000d608:	000a                	0xa
8000d60a:	0000                	unimp
8000d60c:	7775                	lui	a4,0xffffd
8000d60e:	6954                	flw	fa3,20(a0)
8000d610:	3d206b63          	bltu	zero,s2,8000d9e6 <_malloc_usable_size_r+0xbae>
8000d614:	2520                	fld	fs0,72(a0)
8000d616:	2064                	fld	fs1,192(s0)
8000d618:	000a                	0xa
8000d61a:	0000                	unimp
8000d61c:	7775                	lui	a4,0xffffd
8000d61e:	734d                	lui	t1,0xffff3
8000d620:	3d20                	fld	fs0,120(a0)
8000d622:	2520                	fld	fs0,72(a0)
8000d624:	2064                	fld	fs1,192(s0)
8000d626:	000a                	0xa
8000d628:	4f4c                	lw	a1,28(a4)
8000d62a:	79435f53          	0x79435f53
8000d62e:	50656c63          	bltu	a0,t1,8000db46 <__data_load+0x6>
8000d632:	7265                	lui	tp,0xffff9
8000d634:	6954                	flw	fa3,20(a0)
8000d636:	65476b63          	bltu	a4,s4,8000dc8c <gInspect+0xb8>
8000d63a:	2074                	fld	fa3,192(s0)
8000d63c:	203d                	jal	8000d66a <_malloc_usable_size_r+0x832>
8000d63e:	6425                	lui	s0,0x9
8000d640:	0a20                	addi	s0,sp,280
8000d642:	0000                	unimp
8000d644:	4f4c                	lw	a1,28(a4)
8000d646:	69545f53          	0x69545f53
8000d64a:	6f436b63          	bltu	t1,s4,8000dd40 <__data_end+0x40>
8000d64e:	6e75                	lui	t3,0x1d
8000d650:	4774                	lw	a3,76(a4)
8000d652:	7465                	lui	s0,0xffff9
8000d654:	3d20                	fld	fs0,120(a0)
8000d656:	2520                	fld	fs0,72(a0)
8000d658:	2064                	fld	fs1,192(s0)
8000d65a:	000a                	0xa
8000d65c:	4f4c                	lw	a1,28(a4)
8000d65e:	69545f53          	0x69545f53
8000d662:	6f436b63          	bltu	t1,s4,8000dd58 <__data_end+0x58>
8000d666:	6e75                	lui	t3,0x1d
8000d668:	4774                	lw	a3,76(a4)
8000d66a:	7465                	lui	s0,0xffff9
8000d66c:	6120                	flw	fs0,64(a0)
8000d66e:	7466                	flw	fs0,120(sp)
8000d670:	7265                	lui	tp,0xffff9
8000d672:	6420                	flw	fs0,72(s0)
8000d674:	6c65                	lui	s8,0x19
8000d676:	7961                	lui	s2,0xffff8
8000d678:	3d20                	fld	fs0,120(a0)
8000d67a:	2520                	fld	fs0,72(a0)
8000d67c:	2064                	fld	fs1,192(s0)
8000d67e:	000a                	0xa
8000d680:	6e45                	lui	t3,0x11
8000d682:	6574                	flw	fa3,76(a0)
8000d684:	2072                	fld	ft0,280(sp)
8000d686:	6154                	flw	fa3,4(a0)
8000d688:	69486b73          	csrrsi	s6,0x694,16
8000d68c:	4820                	lw	s0,80(s0)
8000d68e:	6e61                	lui	t3,0x18
8000d690:	6c64                	flw	fs1,92(s0)
8000d692:	7265                	lui	tp,0xffff9
8000d694:	0d2e                	slli	s10,s10,0xb
8000d696:	000a                	0xa
8000d698:	6544                	flw	fs1,12(a0)
8000d69a:	616c                	flw	fa1,68(a0)
8000d69c:	2079                	jal	8000d72a <_malloc_usable_size_r+0x8f2>
8000d69e:	6154                	flw	fa3,4(a0)
8000d6a0:	46206b73          	csrrsi	s6,0x462,0
8000d6a4:	6961                	lui	s2,0x18
8000d6a6:	656c                	flw	fa1,76(a0)
8000d6a8:	2e64                	fld	fs1,216(a2)
8000d6aa:	0a0d                	addi	s4,s4,3
8000d6ac:	0000                	unimp
8000d6ae:	0000                	unimp
8000d6b0:	6154                	flw	fa3,4(a0)
8000d6b2:	69486b73          	csrrsi	s6,0x694,16
8000d6b6:	4c20                	lw	s0,88(s0)
8000d6b8:	545f534f          	0x545f534f
8000d6bc:	7361                	lui	t1,0xffff8
8000d6be:	6c65446b          	0x6c65446b
8000d6c2:	7961                	lui	s2,0xffff8
8000d6c4:	4420                	lw	s0,72(s0)
8000d6c6:	2e656e6f          	jal	t3,800639ac <__stack_top+0x253ac>
8000d6ca:	0a0d                	addi	s4,s4,3
8000d6cc:	0000                	unimp
8000d6ce:	0000                	unimp
8000d6d0:	70737553          	0x70737553
8000d6d4:	6e65                	lui	t3,0x19
8000d6d6:	2064                	fld	fs1,192(s0)
8000d6d8:	6154                	flw	fa3,4(a0)
8000d6da:	69486b73          	csrrsi	s6,0x694,16
8000d6de:	4620                	lw	s0,72(a2)
8000d6e0:	6961                	lui	s2,0x18
8000d6e2:	656c                	flw	fa1,76(a0)
8000d6e4:	2e64                	fld	fs1,216(a2)
8000d6e6:	0a0d                	addi	s4,s4,3
8000d6e8:	0000                	unimp
8000d6ea:	0000                	unimp
8000d6ec:	6154                	flw	fa3,4(a0)
8000d6ee:	69486b73          	csrrsi	s6,0x694,16
8000d6f2:	4c20                	lw	s0,88(s0)
8000d6f4:	545f534f          	0x545f534f
8000d6f8:	7361                	lui	t1,0xffff8
8000d6fa:	7365526b          	0x7365526b
8000d6fe:	6d75                	lui	s10,0x1d
8000d700:	2065                	jal	8000d7a8 <_malloc_usable_size_r+0x970>
8000d702:	63637553          	0x63637553
8000d706:	7365                	lui	t1,0xffff9
8000d708:	0a0d2e73          	csrrs	t3,0xa0,s10
8000d70c:	0000                	unimp
8000d70e:	0000                	unimp
8000d710:	6154                	flw	fa3,4(a0)
8000d712:	69486b73          	csrrsi	s6,0x694,16
8000d716:	6420                	flw	fs0,72(s0)
8000d718:	6c65                	lui	s8,0x19
8000d71a:	7465                	lui	s0,0xffff9
8000d71c:	2065                	jal	8000d7c4 <_malloc_usable_size_r+0x98c>
8000d71e:	6166                	flw	ft2,88(sp)
8000d720:	6c69                	lui	s8,0x1a
8000d722:	6465                	lui	s0,0x19
8000d724:	2e20                	fld	fs0,88(a2)
8000d726:	000a                	0xa
8000d728:	6e45                	lui	t3,0x11
8000d72a:	6574                	flw	fa3,76(a0)
8000d72c:	2072                	fld	ft0,280(sp)
8000d72e:	6154                	flw	fa3,4(a0)
8000d730:	6f4c6b73          	csrrsi	s6,0x6f4,24
8000d734:	4820                	lw	s0,80(s0)
8000d736:	6e61                	lui	t3,0x18
8000d738:	6c64                	flw	fs1,92(s0)
8000d73a:	7265                	lui	tp,0xffff9
8000d73c:	0d2e                	slli	s10,s10,0xb
8000d73e:	000a                	0xa
8000d740:	6544                	flw	fs1,12(a0)
8000d742:	616c                	flw	fa1,68(a0)
8000d744:	2079                	jal	8000d7d2 <_malloc_usable_size_r+0x99a>
8000d746:	6154                	flw	fa3,4(a0)
8000d748:	6f4c6b73          	csrrsi	s6,0x6f4,24
8000d74c:	4620                	lw	s0,72(a2)
8000d74e:	6961                	lui	s2,0x18
8000d750:	656c                	flw	fa1,76(a0)
8000d752:	2e64                	fld	fs1,216(a2)
8000d754:	0a0d                	addi	s4,s4,3
8000d756:	0000                	unimp
8000d758:	6154                	flw	fa3,4(a0)
8000d75a:	69486b73          	csrrsi	s6,0x694,16
8000d75e:	4c20                	lw	s0,88(s0)
8000d760:	545f534f          	0x545f534f
8000d764:	7361                	lui	t1,0xffff8
8000d766:	7375536b          	0x7375536b
8000d76a:	6570                	flw	fa2,76(a0)
8000d76c:	646e                	flw	fs0,216(sp)
8000d76e:	5320                	lw	s0,96(a4)
8000d770:	6375                	lui	t1,0x1d
8000d772:	73736563          	bltu	t1,s7,8000de9c <__data_end+0x19c>
8000d776:	0d2e                	slli	s10,s10,0xb
8000d778:	000a                	0xa
8000d77a:	0000                	unimp
8000d77c:	6552                	flw	fa0,20(sp)
8000d77e:	656d7573          	csrrci	a0,0x656,26
8000d782:	5420                	lw	s0,104(s0)
8000d784:	7361                	lui	t1,0xffff8
8000d786:	2069486b          	0x2069486b
8000d78a:	6146                	flw	ft2,80(sp)
8000d78c:	6c69                	lui	s8,0x1a
8000d78e:	6465                	lui	s0,0x19
8000d790:	0d2e                	slli	s10,s10,0xb
8000d792:	000a                	0xa
8000d794:	6154                	flw	fa3,4(a0)
8000d796:	6f4c6b73          	csrrsi	s6,0x6f4,24
8000d79a:	6420                	flw	fs0,72(s0)
8000d79c:	6c65                	lui	s8,0x19
8000d79e:	7465                	lui	s0,0xffff9
8000d7a0:	2065                	jal	8000d848 <_malloc_usable_size_r+0xa10>
8000d7a2:	6166                	flw	ft2,88(sp)
8000d7a4:	6c69                	lui	s8,0x1a
8000d7a6:	6465                	lui	s0,0x19
8000d7a8:	2e20                	fld	fs0,88(a2)
8000d7aa:	000a                	0xa
8000d7ac:	4f4c                	lw	a1,28(a4)
8000d7ae:	61545f53          	0x61545f53
8000d7b2:	6f4c6b73          	csrrsi	s6,0x6f4,24
8000d7b6:	29286b63          	bltu	a6,s2,8000da4c <_malloc_usable_size_r+0xc14>
8000d7ba:	5320                	lw	s0,96(a4)
8000d7bc:	6375                	lui	t1,0x1d
8000d7be:	73736563          	bltu	t1,s7,8000dee8 <__data_end+0x1e8>
8000d7c2:	0d21                	addi	s10,s10,8
8000d7c4:	000a                	0xa
8000d7c6:	0000                	unimp
8000d7c8:	4948                	lw	a0,20(a0)
8000d7ca:	4e5f4847          	fmsub.q	fa6,ft10,ft5,fs1,rmm
8000d7ce:	4d41                	li	s10,16
8000d7d0:	0045                	c.addi	zero,17
8000d7d2:	0000                	unimp
8000d7d4:	7845                	lui	a6,0xffff1
8000d7d6:	6d61                	lui	s10,0x18
8000d7d8:	6c70                	flw	fa2,92(s0)
8000d7da:	5f65                	li	t5,-7
8000d7dc:	6154                	flw	fa3,4(a0)
8000d7de:	69486b73          	csrrsi	s6,0x694,16
8000d7e2:	6320                	flw	fs0,64(a4)
8000d7e4:	6572                	flw	fa0,28(sp)
8000d7e6:	7461                	lui	s0,0xffff8
8000d7e8:	2065                	jal	8000d890 <_malloc_usable_size_r+0xa58>
8000d7ea:	6146                	flw	ft2,80(sp)
8000d7ec:	6c69                	lui	s8,0x1a
8000d7ee:	6465                	lui	s0,0x19
8000d7f0:	0d21                	addi	s10,s10,8
8000d7f2:	000a                	0xa
8000d7f4:	7845                	lui	a6,0xffff1
8000d7f6:	6d61                	lui	s10,0x18
8000d7f8:	6c70                	flw	fa2,92(s0)
8000d7fa:	5f65                	li	t5,-7
8000d7fc:	6154                	flw	fa3,4(a0)
8000d7fe:	69486b73          	csrrsi	s6,0x694,16
8000d802:	6320                	flw	fs0,64(a4)
8000d804:	6572                	flw	fa0,28(sp)
8000d806:	7461                	lui	s0,0xffff8
8000d808:	2065                	jal	8000d8b0 <_malloc_usable_size_r+0xa78>
8000d80a:	63637553          	0x63637553
8000d80e:	7365                	lui	t1,0xffff9
8000d810:	0a0d2173          	csrrs	sp,0xa0,s10
8000d814:	0000                	unimp
8000d816:	0000                	unimp
8000d818:	4f4c                	lw	a1,28(a4)
8000d81a:	414e5f57          	0x414e5f57
8000d81e:	454d                	li	a0,19
8000d820:	0000                	unimp
8000d822:	0000                	unimp
8000d824:	7845                	lui	a6,0xffff1
8000d826:	6d61                	lui	s10,0x18
8000d828:	6c70                	flw	fa2,92(s0)
8000d82a:	5f65                	li	t5,-7
8000d82c:	6154                	flw	fa3,4(a0)
8000d82e:	6f4c6b73          	csrrsi	s6,0x6f4,24
8000d832:	6320                	flw	fs0,64(a4)
8000d834:	6572                	flw	fa0,28(sp)
8000d836:	7461                	lui	s0,0xffff8
8000d838:	2065                	jal	8000d8e0 <_malloc_usable_size_r+0xaa8>
8000d83a:	6146                	flw	ft2,80(sp)
8000d83c:	6c69                	lui	s8,0x1a
8000d83e:	6465                	lui	s0,0x19
8000d840:	0d21                	addi	s10,s10,8
8000d842:	000a                	0xa
8000d844:	7845                	lui	a6,0xffff1
8000d846:	6d61                	lui	s10,0x18
8000d848:	6c70                	flw	fa2,92(s0)
8000d84a:	5f65                	li	t5,-7
8000d84c:	6154                	flw	fa3,4(a0)
8000d84e:	6f4c6b73          	csrrsi	s6,0x6f4,24
8000d852:	6320                	flw	fs0,64(a4)
8000d854:	6572                	flw	fa0,28(sp)
8000d856:	7461                	lui	s0,0xffff8
8000d858:	2065                	jal	8000d900 <_malloc_usable_size_r+0xac8>
8000d85a:	63637553          	0x63637553
8000d85e:	7365                	lui	t1,0xffff9
8000d860:	0a0d2173          	csrrs	sp,0xa0,s10
8000d864:	0000                	unimp
8000d866:	0000                	unimp
8000d868:	69745f67          	0x69745f67
8000d86c:	656d                	lui	a0,0x1b
8000d86e:	6372                	flw	ft6,28(sp)
8000d870:	746e756f          	jal	a0,800f4fb6 <__stack_top+0xb69b6>
8000d874:	3d31                	jal	8000d690 <_malloc_usable_size_r+0x858>
8000d876:	6425                	lui	s0,0x9
8000d878:	000a                	0xa
8000d87a:	0000                	unimp
8000d87c:	6974                	flw	fa3,84(a0)
8000d87e:	6c5f6b63          	bltu	t5,t0,8000df54 <__data_end+0x254>
8000d882:	7361                	lui	t1,0xffff8
8000d884:	3174                	fld	fa3,224(a0)
8000d886:	253d                	jal	8000deb4 <__data_end+0x1b4>
8000d888:	756c                	flw	fa1,108(a0)
8000d88a:	000a                	0xa
8000d88c:	69745f67          	0x69745f67
8000d890:	656d                	lui	a0,0x1b
8000d892:	6372                	flw	ft6,28(sp)
8000d894:	746e756f          	jal	a0,800f4fda <__stack_top+0xb69da>
8000d898:	3d32                	fld	fs10,296(sp)
8000d89a:	6425                	lui	s0,0x9
8000d89c:	000a                	0xa
8000d89e:	0000                	unimp
8000d8a0:	6974                	flw	fa3,84(a0)
8000d8a2:	6c5f6b63          	bltu	t5,t0,8000df78 <__data_end+0x278>
8000d8a6:	7361                	lui	t1,0xffff8
8000d8a8:	3274                	fld	fa3,224(a2)
8000d8aa:	253d                	jal	8000ded8 <__data_end+0x1d8>
8000d8ac:	756c                	flw	fa1,108(a0)
8000d8ae:	000a                	0xa
8000d8b0:	61657263          	bleu	s6,a0,8000deb4 <__data_end+0x1b4>
8000d8b4:	6574                	flw	fa3,76(a0)
8000d8b6:	5420                	lw	s0,104(s0)
8000d8b8:	6d69                	lui	s10,0x1a
8000d8ba:	7265                	lui	tp,0xffff9
8000d8bc:	2031                	jal	8000d8c8 <_malloc_usable_size_r+0xa90>
8000d8be:	63637573          	csrrci	a0,0x636,6
8000d8c2:	7365                	lui	t1,0xffff9
8000d8c4:	00000a73          	0xa73
8000d8c8:	72617473          	csrrci	s0,0x726,2
8000d8cc:	2074                	fld	fa3,192(s0)
8000d8ce:	6954                	flw	fa3,20(a0)
8000d8d0:	656d                	lui	a0,0x1b
8000d8d2:	3172                	fld	ft2,312(sp)
8000d8d4:	7320                	flw	fs0,96(a4)
8000d8d6:	6375                	lui	t1,0x1d
8000d8d8:	7365                	lui	t1,0xffff9
8000d8da:	00000a73          	0xa73
8000d8de:	0000                	unimp
8000d8e0:	706f7473          	csrrci	s0,0x706,30
8000d8e4:	5420                	lw	s0,104(s0)
8000d8e6:	6d69                	lui	s10,0x1a
8000d8e8:	7265                	lui	tp,0xffff9
8000d8ea:	2031                	jal	8000d8f6 <_malloc_usable_size_r+0xabe>
8000d8ec:	65637573          	csrrci	a0,0x656,6
8000d8f0:	000a7373          	csrrci	t1,0x0,20
8000d8f4:	6564                	flw	fs1,76(a0)
8000d8f6:	656c                	flw	fa1,76(a0)
8000d8f8:	6574                	flw	fa3,76(a0)
8000d8fa:	5420                	lw	s0,104(s0)
8000d8fc:	6d69                	lui	s10,0x1a
8000d8fe:	7265                	lui	tp,0xffff9
8000d900:	2031                	jal	8000d90c <_malloc_usable_size_r+0xad4>
8000d902:	65637573          	csrrci	a0,0x656,6
8000d906:	000a7373          	csrrci	t1,0x0,20
8000d90a:	0000                	unimp
8000d90c:	72617473          	csrrci	s0,0x726,2
8000d910:	2074                	fld	fa3,192(s0)
8000d912:	6954                	flw	fa3,20(a0)
8000d914:	656d                	lui	a0,0x1b
8000d916:	3272                	fld	ft4,312(sp)
8000d918:	000a                	0xa
8000d91a:	0000                	unimp
8000d91c:	0a0d                	addi	s4,s4,3
8000d91e:	4920                	lw	s0,80(a0)
8000d920:	736e                	flw	ft6,248(sp)
8000d922:	6570                	flw	fa2,76(a0)
8000d924:	44497463          	bleu	tp,s2,8000dd6c <__data_end+0x6c>
8000d928:	3d20                	fld	fs0,120(a0)
8000d92a:	5b20                	lw	s0,112(a4)
8000d92c:	6425                	lui	s0,0x9
8000d92e:	205d                	jal	8000d9d4 <_malloc_usable_size_r+0xb9c>
8000d930:	7245                	lui	tp,0xffff1
8000d932:	2e72                	fld	ft8,280(sp)
8000d934:	0a0d                	addi	s4,s4,3
8000d936:	0000                	unimp
8000d938:	6e49                	lui	t3,0x12
8000d93a:	63657073          	csrci	0x636,10
8000d93e:	4974                	lw	a3,84(a0)
8000d940:	2044                	fld	fs1,128(s0)
8000d942:	203d                	jal	8000d970 <_malloc_usable_size_r+0xb38>
8000d944:	5d64255b          	0x5d64255b
8000d948:	4520                	lw	s0,72(a0)
8000d94a:	7272                	flw	ft4,60(sp)
8000d94c:	492c                	lw	a1,80(a0)
8000d94e:	736e                	flw	ft6,248(sp)
8000d950:	6570                	flw	fa2,76(a0)
8000d952:	75667463          	bleu	s6,a2,8000e09a <__data_end+0x39a>
8000d956:	636e                	flw	ft6,216(sp)
8000d958:	6920                	flw	fs0,80(a0)
8000d95a:	554e2073          	csrs	0x554,t3
8000d95e:	4c4c                	lw	a1,28(s0)
8000d960:	0d2e                	slli	s10,s10,0xb
8000d962:	0d0a                	slli	s10,s10,0x2
8000d964:	000a                	0xa
8000d966:	0000                	unimp
8000d968:	6e49                	lui	t3,0x12
8000d96a:	63657073          	csrci	0x636,10
8000d96e:	2074                	fld	fa3,192(s0)
8000d970:	7325                	lui	t1,0xfffe9
8000d972:	7320                	flw	fs0,96(a4)
8000d974:	6375                	lui	t1,0x1d
8000d976:	73736563          	bltu	t1,s7,8000e0a0 <__data_end+0x3a0>
8000d97a:	0a0d                	addi	s4,s4,3
8000d97c:	0a0d                	addi	s4,s4,3
8000d97e:	0000                	unimp
8000d980:	6e49                	lui	t3,0x12
8000d982:	63657073          	csrci	0x636,10
8000d986:	2074                	fld	fa3,192(s0)
8000d988:	7325                	lui	t1,0xfffe9
8000d98a:	6520                	flw	fs0,72(a0)
8000d98c:	7272                	flw	ft4,60(sp)
8000d98e:	672c726f          	jal	tp,800d5000 <__stack_top+0x96a00>
8000d992:	6e49                	lui	t3,0x12
8000d994:	63657073          	csrci	0x636,10
8000d998:	4574                	lw	a3,76(a0)
8000d99a:	7272                	flw	ft4,60(sp)
8000d99c:	20746e43          	fmadd.s	ft8,fs0,ft7,ft4,unknown
8000d9a0:	203d                	jal	8000d9ce <_malloc_usable_size_r+0xb96>
8000d9a2:	5d64255b          	0x5d64255b
8000d9a6:	0a0d                	addi	s4,s4,3
8000d9a8:	0a0d                	addi	s4,s4,3
8000d9aa:	0000                	unimp
8000d9ac:	0a0d                	addi	s4,s4,3
8000d9ae:	4b20                	lw	s0,80(a4)
8000d9b0:	7965                	lui	s2,0xffff9
8000d9b2:	7420                	flw	fs0,104(s0)
8000d9b4:	7365                	lui	t1,0xffff9
8000d9b6:	2074                	fld	fa3,192(s0)
8000d9b8:	7865                	lui	a6,0xffff9
8000d9ba:	6d61                	lui	s10,0x18
8000d9bc:	6c70                	flw	fa2,92(s0)
8000d9be:	2065                	jal	8000da66 <_malloc_usable_size_r+0xc2e>
8000d9c0:	0a0d                	addi	s4,s4,3
8000d9c2:	0000                	unimp
8000d9c4:	0a0d                	addi	s4,s4,3
8000d9c6:	4c20                	lw	s0,88(s0)
8000d9c8:	4920736f          	jal	t1,80014e5a <__global_pointer$+0x6b2a>
8000d9cc:	736e                	flw	ft6,248(sp)
8000d9ce:	6570                	flw	fa2,76(a0)
8000d9d0:	73207463          	bleu	s2,zero,8000e0f8 <__data_end+0x3f8>
8000d9d4:	6174                	flw	fa3,68(a0)
8000d9d6:	7472                	flw	fs0,60(sp)
8000d9d8:	0d2e                	slli	s10,s10,0xb
8000d9da:	000a                	0xa
8000d9dc:	6e49                	lui	t3,0x12
8000d9de:	63657073          	csrci	0x636,10
8000d9e2:	2074                	fld	fa3,192(s0)
8000d9e4:	706d6f63          	bltu	s10,t1,8000e102 <__sbss_start+0x2>
8000d9e8:	656c                	flw	fa1,76(a0)
8000d9ea:	6574                	flw	fa3,76(a0)
8000d9ec:	2c64                	fld	fs1,216(s0)
8000d9ee:	736e4967          	0x736e4967
8000d9f2:	6570                	flw	fa2,76(a0)
8000d9f4:	72457463          	bleu	tp,a0,8000e11c <g_TestTaskID01>
8000d9f8:	4372                	lw	t1,28(sp)
8000d9fa:	746e                	flw	fs0,248(sp)
8000d9fc:	3d20                	fld	fs0,120(a0)
8000d9fe:	5b20                	lw	s0,112(a4)
8000da00:	6425                	lui	s0,0x9
8000da02:	0d5d                	addi	s10,s10,23
8000da04:	0d0a                	slli	s10,s10,0x2
8000da06:	000a                	0xa
8000da08:	0a0d                	addi	s4,s4,3
8000da0a:	4c20                	lw	s0,88(s0)
8000da0c:	4b20736f          	jal	t1,80014ebe <__global_pointer$+0x6b8e>
8000da10:	7965                	lui	s2,0xffff9
8000da12:	6520                	flw	fs0,72(a0)
8000da14:	6178                	flw	fa4,68(a0)
8000da16:	706d                	0x706d
8000da18:	656c                	flw	fa1,76(a0)
8000da1a:	203a                	fld	ft0,392(sp)
8000da1c:	6c70                	flw	fa2,92(s0)
8000da1e:	6165                	addi	sp,sp,112
8000da20:	70206573          	csrrsi	a0,0x702,0
8000da24:	6572                	flw	fa0,28(sp)
8000da26:	74207373          	csrrci	t1,0x742,0
8000da2a:	6568                	flw	fa0,76(a0)
8000da2c:	5520                	lw	s0,104(a0)
8000da2e:	4b726573          	csrrsi	a0,0x4b7,4
8000da32:	7965                	lui	s2,0xffff9
8000da34:	2820                	fld	fs0,80(s0)
8000da36:	29325753          	0x29325753
8000da3a:	6b20                	flw	fs0,80(a4)
8000da3c:	7965                	lui	s2,0xffff9
8000da3e:	0d20                	addi	s0,sp,664
8000da40:	000a                	0xa
8000da42:	0000                	unimp
8000da44:	6e49                	lui	t3,0x12
8000da46:	63657073          	csrci	0x636,10
8000da4a:	5474                	lw	a3,108(s0)
8000da4c:	00006b73          	csrrsi	s6,0x0,0
8000da50:	0a0d                	addi	s4,s4,3
8000da52:	2d2d                	jal	8000e08c <__data_end+0x38c>
8000da54:	2d2d                	jal	8000e08e <__data_end+0x38e>
8000da56:	2d2d                	jal	8000e090 <__data_end+0x390>
8000da58:	2d2d                	jal	8000e092 <__data_end+0x392>
8000da5a:	2d2d                	jal	8000e094 <__data_end+0x394>
8000da5c:	2d2d                	jal	8000e096 <__data_end+0x396>
8000da5e:	2d2d                	jal	8000e098 <__data_end+0x398>
8000da60:	2d2d                	jal	8000e09a <__data_end+0x39a>
8000da62:	2d2d                	jal	8000e09c <__data_end+0x39c>
8000da64:	2d2d                	jal	8000e09e <__data_end+0x39e>
8000da66:	2d2d                	jal	8000e0a0 <__data_end+0x3a0>
8000da68:	2d2d                	jal	8000e0a2 <__data_end+0x3a2>
8000da6a:	2d2d                	jal	8000e0a4 <__data_end+0x3a4>
8000da6c:	2d2d                	jal	8000e0a6 <__data_end+0x3a6>
8000da6e:	2d2d                	jal	8000e0a8 <__data_end+0x3a8>
8000da70:	2d2d                	jal	8000e0aa <__data_end+0x3aa>
8000da72:	2d2d                	jal	8000e0ac <__data_end+0x3ac>
8000da74:	2d2d                	jal	8000e0ae <__data_end+0x3ae>
8000da76:	2d2d                	jal	8000e0b0 <__data_end+0x3b0>
8000da78:	2d2d                	jal	8000e0b2 <__data_end+0x3b2>
8000da7a:	2d2d                	jal	8000e0b4 <__data_end+0x3b4>
8000da7c:	2d2d                	jal	8000e0b6 <__data_end+0x3b6>
8000da7e:	2d2d                	jal	8000e0b8 <__data_end+0x3b8>
8000da80:	2d2d                	jal	8000e0ba <__data_end+0x3ba>
8000da82:	2d2d                	jal	8000e0bc <__data_end+0x3bc>
8000da84:	2d2d                	jal	8000e0be <__data_end+0x3be>
8000da86:	2d2d                	jal	8000e0c0 <__data_end+0x3c0>
8000da88:	2d2d                	jal	8000e0c2 <__data_end+0x3c2>
8000da8a:	2d2d                	jal	8000e0c4 <__data_end+0x3c4>
8000da8c:	2d2d                	jal	8000e0c6 <__data_end+0x3c6>
8000da8e:	2d2d                	jal	8000e0c8 <__data_end+0x3c8>
8000da90:	0a0d                	addi	s4,s4,3
	...

8000da94 <__sf_fake_stderr>:
	...

8000dab4 <__sf_fake_stdin>:
	...

8000dad4 <__sf_fake_stdout>:
	...
8000daf4:	2d23 2b30 0020 0000 6c68 004c 6665 4567     #-0+ ...hlL.efgE
8000db04:	4746 0000 3130 3332 3534 3736 3938 4241     FG..0123456789AB
8000db14:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
8000db24:	3938 6261 6463 6665 0000 0000               89abcdef....
